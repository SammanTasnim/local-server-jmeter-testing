/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 4223.0, "series": [{"data": [[0.0, 2.0], [0.1, 5.0], [0.2, 17.0], [0.3, 20.0], [0.4, 24.0], [0.5, 26.0], [0.6, 29.0], [0.7, 33.0], [0.8, 35.0], [0.9, 36.0], [1.0, 37.0], [1.1, 41.0], [1.2, 42.0], [1.3, 44.0], [1.4, 45.0], [1.5, 46.0], [1.6, 47.0], [1.7, 47.0], [1.8, 48.0], [1.9, 49.0], [2.0, 52.0], [2.1, 53.0], [2.2, 54.0], [2.3, 56.0], [2.4, 59.0], [2.5, 61.0], [2.6, 63.0], [2.7, 66.0], [2.8, 67.0], [2.9, 68.0], [3.0, 75.0], [3.1, 98.0], [3.2, 102.0], [3.3, 103.0], [3.4, 104.0], [3.5, 104.0], [3.6, 111.0], [3.7, 119.0], [3.8, 128.0], [3.9, 130.0], [4.0, 132.0], [4.1, 133.0], [4.2, 135.0], [4.3, 138.0], [4.4, 139.0], [4.5, 142.0], [4.6, 145.0], [4.7, 147.0], [4.8, 148.0], [4.9, 149.0], [5.0, 151.0], [5.1, 154.0], [5.2, 156.0], [5.3, 157.0], [5.4, 159.0], [5.5, 160.0], [5.6, 168.0], [5.7, 170.0], [5.8, 175.0], [5.9, 182.0], [6.0, 184.0], [6.1, 187.0], [6.2, 194.0], [6.3, 200.0], [6.4, 212.0], [6.5, 214.0], [6.6, 216.0], [6.7, 219.0], [6.8, 224.0], [6.9, 237.0], [7.0, 245.0], [7.1, 247.0], [7.2, 251.0], [7.3, 255.0], [7.4, 255.0], [7.5, 257.0], [7.6, 263.0], [7.7, 263.0], [7.8, 307.0], [7.9, 359.0], [8.0, 360.0], [8.1, 360.0], [8.2, 395.0], [8.3, 396.0], [8.4, 396.0], [8.5, 396.0], [8.6, 396.0], [8.7, 397.0], [8.8, 397.0], [8.9, 508.0], [9.0, 510.0], [9.1, 513.0], [9.2, 555.0], [9.3, 563.0], [9.4, 566.0], [9.5, 568.0], [9.6, 577.0], [9.7, 579.0], [9.8, 583.0], [9.9, 585.0], [10.0, 586.0], [10.1, 586.0], [10.2, 587.0], [10.3, 588.0], [10.4, 589.0], [10.5, 592.0], [10.6, 596.0], [10.7, 598.0], [10.8, 599.0], [10.9, 601.0], [11.0, 611.0], [11.1, 614.0], [11.2, 615.0], [11.3, 618.0], [11.4, 619.0], [11.5, 621.0], [11.6, 623.0], [11.7, 625.0], [11.8, 629.0], [11.9, 630.0], [12.0, 637.0], [12.1, 642.0], [12.2, 643.0], [12.3, 644.0], [12.4, 644.0], [12.5, 645.0], [12.6, 645.0], [12.7, 646.0], [12.8, 647.0], [12.9, 648.0], [13.0, 651.0], [13.1, 656.0], [13.2, 658.0], [13.3, 662.0], [13.4, 666.0], [13.5, 671.0], [13.6, 673.0], [13.7, 674.0], [13.8, 677.0], [13.9, 678.0], [14.0, 680.0], [14.1, 692.0], [14.2, 695.0], [14.3, 700.0], [14.4, 708.0], [14.5, 715.0], [14.6, 720.0], [14.7, 728.0], [14.8, 733.0], [14.9, 736.0], [15.0, 740.0], [15.1, 742.0], [15.2, 743.0], [15.3, 745.0], [15.4, 746.0], [15.5, 747.0], [15.6, 748.0], [15.7, 750.0], [15.8, 751.0], [15.9, 752.0], [16.0, 755.0], [16.1, 758.0], [16.2, 760.0], [16.3, 765.0], [16.4, 767.0], [16.5, 768.0], [16.6, 770.0], [16.7, 771.0], [16.8, 773.0], [16.9, 780.0], [17.0, 781.0], [17.1, 785.0], [17.2, 786.0], [17.3, 787.0], [17.4, 790.0], [17.5, 796.0], [17.6, 803.0], [17.7, 806.0], [17.8, 809.0], [17.9, 814.0], [18.0, 818.0], [18.1, 825.0], [18.2, 830.0], [18.3, 835.0], [18.4, 837.0], [18.5, 838.0], [18.6, 839.0], [18.7, 840.0], [18.8, 846.0], [18.9, 847.0], [19.0, 876.0], [19.1, 922.0], [19.2, 992.0], [19.3, 993.0], [19.4, 995.0], [19.5, 997.0], [19.6, 998.0], [19.7, 1000.0], [19.8, 1004.0], [19.9, 1006.0], [20.0, 1010.0], [20.1, 1013.0], [20.2, 1015.0], [20.3, 1017.0], [20.4, 1029.0], [20.5, 1038.0], [20.6, 1043.0], [20.7, 1047.0], [20.8, 1049.0], [20.9, 1056.0], [21.0, 1058.0], [21.1, 1060.0], [21.2, 1062.0], [21.3, 1066.0], [21.4, 1069.0], [21.5, 1073.0], [21.6, 1075.0], [21.7, 1088.0], [21.8, 1091.0], [21.9, 1093.0], [22.0, 1096.0], [22.1, 1097.0], [22.2, 1097.0], [22.3, 1098.0], [22.4, 1098.0], [22.5, 1099.0], [22.6, 1100.0], [22.7, 1103.0], [22.8, 1104.0], [22.9, 1105.0], [23.0, 1106.0], [23.1, 1109.0], [23.2, 1110.0], [23.3, 1111.0], [23.4, 1115.0], [23.5, 1116.0], [23.6, 1117.0], [23.7, 1119.0], [23.8, 1120.0], [23.9, 1122.0], [24.0, 1122.0], [24.1, 1125.0], [24.2, 1127.0], [24.3, 1128.0], [24.4, 1129.0], [24.5, 1130.0], [24.6, 1131.0], [24.7, 1131.0], [24.8, 1132.0], [24.9, 1133.0], [25.0, 1135.0], [25.1, 1139.0], [25.2, 1141.0], [25.3, 1144.0], [25.4, 1150.0], [25.5, 1153.0], [25.6, 1156.0], [25.7, 1158.0], [25.8, 1161.0], [25.9, 1164.0], [26.0, 1165.0], [26.1, 1168.0], [26.2, 1169.0], [26.3, 1176.0], [26.4, 1181.0], [26.5, 1182.0], [26.6, 1183.0], [26.7, 1184.0], [26.8, 1185.0], [26.9, 1186.0], [27.0, 1187.0], [27.1, 1188.0], [27.2, 1190.0], [27.3, 1191.0], [27.4, 1192.0], [27.5, 1195.0], [27.6, 1197.0], [27.7, 1200.0], [27.8, 1203.0], [27.9, 1209.0], [28.0, 1212.0], [28.1, 1216.0], [28.2, 1218.0], [28.3, 1220.0], [28.4, 1222.0], [28.5, 1225.0], [28.6, 1233.0], [28.7, 1234.0], [28.8, 1236.0], [28.9, 1238.0], [29.0, 1241.0], [29.1, 1242.0], [29.2, 1246.0], [29.3, 1255.0], [29.4, 1259.0], [29.5, 1260.0], [29.6, 1261.0], [29.7, 1263.0], [29.8, 1265.0], [29.9, 1267.0], [30.0, 1276.0], [30.1, 1278.0], [30.2, 1285.0], [30.3, 1290.0], [30.4, 1570.0], [30.5, 1574.0], [30.6, 1578.0], [30.7, 1579.0], [30.8, 1580.0], [30.9, 1583.0], [31.0, 1589.0], [31.1, 1589.0], [31.2, 1590.0], [31.3, 1591.0], [31.4, 1591.0], [31.5, 1593.0], [31.6, 1593.0], [31.7, 1594.0], [31.8, 1596.0], [31.9, 1598.0], [32.0, 1599.0], [32.1, 1601.0], [32.2, 1602.0], [32.3, 1603.0], [32.4, 1603.0], [32.5, 1604.0], [32.6, 1605.0], [32.7, 1606.0], [32.8, 1608.0], [32.9, 1610.0], [33.0, 1613.0], [33.1, 1614.0], [33.2, 1619.0], [33.3, 1624.0], [33.4, 1625.0], [33.5, 1628.0], [33.6, 1630.0], [33.7, 1633.0], [33.8, 1634.0], [33.9, 1636.0], [34.0, 1637.0], [34.1, 1638.0], [34.2, 1641.0], [34.3, 1643.0], [34.4, 1646.0], [34.5, 1648.0], [34.6, 1650.0], [34.7, 1652.0], [34.8, 1654.0], [34.9, 1655.0], [35.0, 1656.0], [35.1, 1658.0], [35.2, 1662.0], [35.3, 1668.0], [35.4, 1673.0], [35.5, 1683.0], [35.6, 1687.0], [35.7, 1689.0], [35.8, 1693.0], [35.9, 1695.0], [36.0, 1703.0], [36.1, 1708.0], [36.2, 1711.0], [36.3, 1713.0], [36.4, 1716.0], [36.5, 1718.0], [36.6, 1720.0], [36.7, 1722.0], [36.8, 1724.0], [36.9, 1725.0], [37.0, 1727.0], [37.1, 1728.0], [37.2, 1730.0], [37.3, 1735.0], [37.4, 1738.0], [37.5, 1739.0], [37.6, 1740.0], [37.7, 1743.0], [37.8, 1746.0], [37.9, 1752.0], [38.0, 1764.0], [38.1, 1767.0], [38.2, 1772.0], [38.3, 1790.0], [38.4, 1830.0], [38.5, 1832.0], [38.6, 2084.0], [38.7, 2087.0], [38.8, 2088.0], [38.9, 2090.0], [39.0, 2090.0], [39.1, 2091.0], [39.2, 2092.0], [39.3, 2093.0], [39.4, 2095.0], [39.5, 2095.0], [39.6, 2096.0], [39.7, 2096.0], [39.8, 2097.0], [39.9, 2098.0], [40.0, 2099.0], [40.1, 2100.0], [40.2, 2100.0], [40.3, 2101.0], [40.4, 2101.0], [40.5, 2102.0], [40.6, 2103.0], [40.7, 2104.0], [40.8, 2105.0], [40.9, 2106.0], [41.0, 2107.0], [41.1, 2109.0], [41.2, 2110.0], [41.3, 2111.0], [41.4, 2112.0], [41.5, 2114.0], [41.6, 2115.0], [41.7, 2115.0], [41.8, 2116.0], [41.9, 2116.0], [42.0, 2116.0], [42.1, 2116.0], [42.2, 2117.0], [42.3, 2117.0], [42.4, 2118.0], [42.5, 2119.0], [42.6, 2120.0], [42.7, 2121.0], [42.8, 2125.0], [42.9, 2129.0], [43.0, 2129.0], [43.1, 2130.0], [43.2, 2131.0], [43.3, 2134.0], [43.4, 2135.0], [43.5, 2137.0], [43.6, 2137.0], [43.7, 2138.0], [43.8, 2138.0], [43.9, 2139.0], [44.0, 2140.0], [44.1, 2140.0], [44.2, 2141.0], [44.3, 2141.0], [44.4, 2143.0], [44.5, 2145.0], [44.6, 2146.0], [44.7, 2148.0], [44.8, 2150.0], [44.9, 2151.0], [45.0, 2152.0], [45.1, 2153.0], [45.2, 2153.0], [45.3, 2154.0], [45.4, 2155.0], [45.5, 2155.0], [45.6, 2157.0], [45.7, 2163.0], [45.8, 2164.0], [45.9, 2169.0], [46.0, 2169.0], [46.1, 2170.0], [46.2, 2175.0], [46.3, 2192.0], [46.4, 2193.0], [46.5, 2201.0], [46.6, 2202.0], [46.7, 2203.0], [46.8, 2204.0], [46.9, 2205.0], [47.0, 2205.0], [47.1, 2209.0], [47.2, 2212.0], [47.3, 2215.0], [47.4, 2220.0], [47.5, 2221.0], [47.6, 2222.0], [47.7, 2224.0], [47.8, 2226.0], [47.9, 2234.0], [48.0, 2238.0], [48.1, 2239.0], [48.2, 2239.0], [48.3, 2240.0], [48.4, 2241.0], [48.5, 2243.0], [48.6, 2247.0], [48.7, 2251.0], [48.8, 2255.0], [48.9, 2268.0], [49.0, 2268.0], [49.1, 2270.0], [49.2, 2271.0], [49.3, 2273.0], [49.4, 2278.0], [49.5, 2280.0], [49.6, 2282.0], [49.7, 2577.0], [49.8, 2582.0], [49.9, 2585.0], [50.0, 2588.0], [50.1, 2592.0], [50.2, 2594.0], [50.3, 2596.0], [50.4, 2598.0], [50.5, 2599.0], [50.6, 2601.0], [50.7, 2603.0], [50.8, 2604.0], [50.9, 2607.0], [51.0, 2608.0], [51.1, 2610.0], [51.2, 2611.0], [51.3, 2613.0], [51.4, 2615.0], [51.5, 2618.0], [51.6, 2620.0], [51.7, 2621.0], [51.8, 2621.0], [51.9, 2623.0], [52.0, 2624.0], [52.1, 2625.0], [52.2, 2625.0], [52.3, 2626.0], [52.4, 2626.0], [52.5, 2627.0], [52.6, 2628.0], [52.7, 2630.0], [52.8, 2631.0], [52.9, 2633.0], [53.0, 2634.0], [53.1, 2637.0], [53.2, 2637.0], [53.3, 2638.0], [53.4, 2640.0], [53.5, 2641.0], [53.6, 2641.0], [53.7, 2643.0], [53.8, 2645.0], [53.9, 2645.0], [54.0, 2647.0], [54.1, 2649.0], [54.2, 2650.0], [54.3, 2652.0], [54.4, 2653.0], [54.5, 2654.0], [54.6, 2655.0], [54.7, 2658.0], [54.8, 2659.0], [54.9, 2661.0], [55.0, 2662.0], [55.1, 2663.0], [55.2, 2666.0], [55.3, 2668.0], [55.4, 2671.0], [55.5, 2675.0], [55.6, 2678.0], [55.7, 2680.0], [55.8, 2682.0], [55.9, 2685.0], [56.0, 2688.0], [56.1, 2690.0], [56.2, 2692.0], [56.3, 2694.0], [56.4, 2697.0], [56.5, 2698.0], [56.6, 2698.0], [56.7, 2700.0], [56.8, 2703.0], [56.9, 2706.0], [57.0, 2707.0], [57.1, 2708.0], [57.2, 2714.0], [57.3, 2716.0], [57.4, 2719.0], [57.5, 2720.0], [57.6, 2722.0], [57.7, 2725.0], [57.8, 2730.0], [57.9, 2732.0], [58.0, 2734.0], [58.1, 2737.0], [58.2, 2738.0], [58.3, 2739.0], [58.4, 2747.0], [58.5, 2751.0], [58.6, 2754.0], [58.7, 2757.0], [58.8, 2763.0], [58.9, 2765.0], [59.0, 2767.0], [59.1, 2772.0], [59.2, 2777.0], [59.3, 2787.0], [59.4, 2794.0], [59.5, 2798.0], [59.6, 3041.0], [59.7, 3046.0], [59.8, 3049.0], [59.9, 3057.0], [60.0, 3061.0], [60.1, 3064.0], [60.2, 3064.0], [60.3, 3065.0], [60.4, 3066.0], [60.5, 3067.0], [60.6, 3068.0], [60.7, 3069.0], [60.8, 3070.0], [60.9, 3071.0], [61.0, 3073.0], [61.1, 3074.0], [61.2, 3075.0], [61.3, 3076.0], [61.4, 3077.0], [61.5, 3078.0], [61.6, 3079.0], [61.7, 3080.0], [61.8, 3081.0], [61.9, 3083.0], [62.0, 3084.0], [62.1, 3084.0], [62.2, 3085.0], [62.3, 3087.0], [62.4, 3088.0], [62.5, 3089.0], [62.6, 3090.0], [62.7, 3090.0], [62.8, 3092.0], [62.9, 3093.0], [63.0, 3095.0], [63.1, 3096.0], [63.2, 3097.0], [63.3, 3098.0], [63.4, 3099.0], [63.5, 3100.0], [63.6, 3100.0], [63.7, 3101.0], [63.8, 3102.0], [63.9, 3103.0], [64.0, 3103.0], [64.1, 3105.0], [64.2, 3105.0], [64.3, 3106.0], [64.4, 3106.0], [64.5, 3107.0], [64.6, 3108.0], [64.7, 3109.0], [64.8, 3110.0], [64.9, 3110.0], [65.0, 3113.0], [65.1, 3115.0], [65.2, 3116.0], [65.3, 3117.0], [65.4, 3119.0], [65.5, 3119.0], [65.6, 3120.0], [65.7, 3121.0], [65.8, 3123.0], [65.9, 3123.0], [66.0, 3124.0], [66.1, 3125.0], [66.2, 3126.0], [66.3, 3127.0], [66.4, 3128.0], [66.5, 3129.0], [66.6, 3130.0], [66.7, 3131.0], [66.8, 3133.0], [66.9, 3133.0], [67.0, 3134.0], [67.1, 3135.0], [67.2, 3136.0], [67.3, 3137.0], [67.4, 3137.0], [67.5, 3139.0], [67.6, 3140.0], [67.7, 3141.0], [67.8, 3142.0], [67.9, 3143.0], [68.0, 3144.0], [68.1, 3144.0], [68.2, 3146.0], [68.3, 3146.0], [68.4, 3149.0], [68.5, 3152.0], [68.6, 3153.0], [68.7, 3154.0], [68.8, 3154.0], [68.9, 3156.0], [69.0, 3156.0], [69.1, 3158.0], [69.2, 3160.0], [69.3, 3160.0], [69.4, 3162.0], [69.5, 3162.0], [69.6, 3163.0], [69.7, 3164.0], [69.8, 3165.0], [69.9, 3167.0], [70.0, 3168.0], [70.1, 3168.0], [70.2, 3169.0], [70.3, 3171.0], [70.4, 3171.0], [70.5, 3172.0], [70.6, 3173.0], [70.7, 3174.0], [70.8, 3176.0], [70.9, 3177.0], [71.0, 3180.0], [71.1, 3183.0], [71.2, 3184.0], [71.3, 3185.0], [71.4, 3187.0], [71.5, 3191.0], [71.6, 3193.0], [71.7, 3196.0], [71.8, 3198.0], [71.9, 3199.0], [72.0, 3201.0], [72.1, 3206.0], [72.2, 3208.0], [72.3, 3210.0], [72.4, 3211.0], [72.5, 3218.0], [72.6, 3223.0], [72.7, 3227.0], [72.8, 3230.0], [72.9, 3237.0], [73.0, 3249.0], [73.1, 3255.0], [73.2, 3283.0], [73.3, 3291.0], [73.4, 3304.0], [73.5, 3556.0], [73.6, 3557.0], [73.7, 3560.0], [73.8, 3561.0], [73.9, 3562.0], [74.0, 3563.0], [74.1, 3565.0], [74.2, 3566.0], [74.3, 3567.0], [74.4, 3569.0], [74.5, 3570.0], [74.6, 3570.0], [74.7, 3570.0], [74.8, 3571.0], [74.9, 3573.0], [75.0, 3575.0], [75.1, 3576.0], [75.2, 3576.0], [75.3, 3576.0], [75.4, 3577.0], [75.5, 3578.0], [75.6, 3578.0], [75.7, 3579.0], [75.8, 3580.0], [75.9, 3580.0], [76.0, 3581.0], [76.1, 3581.0], [76.2, 3582.0], [76.3, 3582.0], [76.4, 3583.0], [76.5, 3583.0], [76.6, 3584.0], [76.7, 3584.0], [76.8, 3585.0], [76.9, 3586.0], [77.0, 3586.0], [77.1, 3586.0], [77.2, 3587.0], [77.3, 3587.0], [77.4, 3588.0], [77.5, 3588.0], [77.6, 3588.0], [77.7, 3589.0], [77.8, 3590.0], [77.9, 3591.0], [78.0, 3593.0], [78.1, 3595.0], [78.2, 3597.0], [78.3, 3599.0], [78.4, 3600.0], [78.5, 3601.0], [78.6, 3602.0], [78.7, 3602.0], [78.8, 3605.0], [78.9, 3607.0], [79.0, 3608.0], [79.1, 3610.0], [79.2, 3611.0], [79.3, 3611.0], [79.4, 3613.0], [79.5, 3615.0], [79.6, 3616.0], [79.7, 3617.0], [79.8, 3619.0], [79.9, 3620.0], [80.0, 3623.0], [80.1, 3625.0], [80.2, 3626.0], [80.3, 3628.0], [80.4, 3629.0], [80.5, 3630.0], [80.6, 3632.0], [80.7, 3633.0], [80.8, 3634.0], [80.9, 3635.0], [81.0, 3635.0], [81.1, 3637.0], [81.2, 3638.0], [81.3, 3639.0], [81.4, 3641.0], [81.5, 3641.0], [81.6, 3643.0], [81.7, 3645.0], [81.8, 3645.0], [81.9, 3646.0], [82.0, 3647.0], [82.1, 3648.0], [82.2, 3650.0], [82.3, 3652.0], [82.4, 3654.0], [82.5, 3655.0], [82.6, 3656.0], [82.7, 3659.0], [82.8, 3660.0], [82.9, 3662.0], [83.0, 3664.0], [83.1, 3665.0], [83.2, 3666.0], [83.3, 3667.0], [83.4, 3669.0], [83.5, 3670.0], [83.6, 3671.0], [83.7, 3672.0], [83.8, 3674.0], [83.9, 3675.0], [84.0, 3676.0], [84.1, 3678.0], [84.2, 3680.0], [84.3, 3681.0], [84.4, 3684.0], [84.5, 3685.0], [84.6, 3686.0], [84.7, 3686.0], [84.8, 3687.0], [84.9, 3689.0], [85.0, 3690.0], [85.1, 3692.0], [85.2, 3694.0], [85.3, 3695.0], [85.4, 3699.0], [85.5, 3703.0], [85.6, 3703.0], [85.7, 3704.0], [85.8, 3707.0], [85.9, 3708.0], [86.0, 3709.0], [86.1, 3710.0], [86.2, 3712.0], [86.3, 3713.0], [86.4, 3714.0], [86.5, 3716.0], [86.6, 3720.0], [86.7, 3722.0], [86.8, 3724.0], [86.9, 3724.0], [87.0, 3726.0], [87.1, 3727.0], [87.2, 3729.0], [87.3, 3731.0], [87.4, 3733.0], [87.5, 3735.0], [87.6, 3737.0], [87.7, 3740.0], [87.8, 3742.0], [87.9, 3744.0], [88.0, 3754.0], [88.1, 4057.0], [88.2, 4068.0], [88.3, 4075.0], [88.4, 4077.0], [88.5, 4077.0], [88.6, 4079.0], [88.7, 4079.0], [88.8, 4080.0], [88.9, 4081.0], [89.0, 4082.0], [89.1, 4082.0], [89.2, 4083.0], [89.3, 4083.0], [89.4, 4083.0], [89.5, 4084.0], [89.6, 4084.0], [89.7, 4084.0], [89.8, 4084.0], [89.9, 4085.0], [90.0, 4085.0], [90.1, 4086.0], [90.2, 4086.0], [90.3, 4086.0], [90.4, 4086.0], [90.5, 4086.0], [90.6, 4087.0], [90.7, 4087.0], [90.8, 4087.0], [90.9, 4087.0], [91.0, 4088.0], [91.1, 4088.0], [91.2, 4088.0], [91.3, 4088.0], [91.4, 4089.0], [91.5, 4089.0], [91.6, 4089.0], [91.7, 4089.0], [91.8, 4090.0], [91.9, 4090.0], [92.0, 4090.0], [92.1, 4090.0], [92.2, 4090.0], [92.3, 4091.0], [92.4, 4091.0], [92.5, 4091.0], [92.6, 4091.0], [92.7, 4092.0], [92.8, 4092.0], [92.9, 4092.0], [93.0, 4093.0], [93.1, 4093.0], [93.2, 4094.0], [93.3, 4094.0], [93.4, 4094.0], [93.5, 4094.0], [93.6, 4095.0], [93.7, 4095.0], [93.8, 4095.0], [93.9, 4095.0], [94.0, 4095.0], [94.1, 4096.0], [94.2, 4096.0], [94.3, 4096.0], [94.4, 4096.0], [94.5, 4097.0], [94.6, 4098.0], [94.7, 4098.0], [94.8, 4098.0], [94.9, 4098.0], [95.0, 4099.0], [95.1, 4099.0], [95.2, 4099.0], [95.3, 4099.0], [95.4, 4100.0], [95.5, 4100.0], [95.6, 4100.0], [95.7, 4100.0], [95.8, 4101.0], [95.9, 4101.0], [96.0, 4101.0], [96.1, 4103.0], [96.2, 4103.0], [96.3, 4104.0], [96.4, 4104.0], [96.5, 4105.0], [96.6, 4105.0], [96.7, 4105.0], [96.8, 4106.0], [96.9, 4106.0], [97.0, 4107.0], [97.1, 4107.0], [97.2, 4107.0], [97.3, 4109.0], [97.4, 4109.0], [97.5, 4110.0], [97.6, 4110.0], [97.7, 4111.0], [97.8, 4112.0], [97.9, 4112.0], [98.0, 4113.0], [98.1, 4114.0], [98.2, 4114.0], [98.3, 4115.0], [98.4, 4116.0], [98.5, 4117.0], [98.6, 4118.0], [98.7, 4120.0], [98.8, 4121.0], [98.9, 4124.0], [99.0, 4127.0], [99.1, 4129.0], [99.2, 4147.0], [99.3, 4159.0], [99.4, 4168.0], [99.5, 4180.0], [99.6, 4189.0], [99.7, 4196.0], [99.8, 4199.0], [99.9, 4216.0], [100.0, 4223.0]], "isOverall": false, "label": "JDBC Request 1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 426.0, "series": [{"data": [[0.0, 157.0], [600.0, 174.0], [700.0, 163.0], [800.0, 75.0], [900.0, 30.0], [1000.0, 144.0], [1100.0, 258.0], [1200.0, 135.0], [1500.0, 82.0], [100.0, 158.0], [1600.0, 197.0], [1700.0, 118.0], [1800.0, 13.0], [2000.0, 75.0], [2100.0, 320.0], [2200.0, 156.0], [2400.0, 1.0], [2500.0, 43.0], [2600.0, 307.0], [2700.0, 143.0], [3000.0, 196.0], [3100.0, 426.0], [200.0, 75.0], [3200.0, 71.0], [3300.0, 3.0], [3500.0, 246.0], [3600.0, 353.0], [3700.0, 131.0], [4000.0, 368.0], [4100.0, 221.0], [4200.0, 10.0], [300.0, 51.0], [500.0, 100.0]], "isOverall": false, "label": "JDBC Request 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4848.0, "series": [{"data": [[0.0, 150.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4848.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1726.9952746603678, "minX": 1.69987062E12, "maxY": 2764.5402726146217, "series": [{"data": [[1.69987068E12, 1726.9952746603678], [1.69987062E12, 2764.5402726146217]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69987068E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 3.0, "maxY": 4223.0, "series": [{"data": [[3.0, 4095.6666666666665], [4.0, 4098.0], [5.0, 4099.0], [6.0, 4094.0], [10.0, 4102.25], [12.0, 4102.5], [15.0, 4105.0], [17.0, 4090.0], [19.0, 4090.0], [22.0, 4091.6666666666665], [23.0, 4096.0], [24.0, 4095.0], [25.0, 4085.0], [26.0, 2080.0], [27.0, 62.0], [28.0, 4094.5], [29.0, 4090.0], [33.0, 4088.75], [34.0, 4092.0], [37.0, 4089.0], [36.0, 4087.5], [39.0, 4089.0], [38.0, 4090.0], [41.0, 4096.0], [40.0, 4096.0], [43.0, 4104.0], [45.0, 4081.0], [44.0, 4105.0], [47.0, 4081.0], [48.0, 4087.0], [51.0, 4088.0], [50.0, 4080.5], [52.0, 4083.0], [55.0, 4084.3333333333335], [57.0, 4083.0], [59.0, 4073.0], [58.0, 4080.0], [60.0, 4057.0], [63.0, 4058.0], [62.0, 4058.0], [66.0, 4073.5], [64.0, 4098.0], [71.0, 4096.0], [68.0, 4095.0], [75.0, 3752.0], [74.0, 3743.0], [73.0, 3743.0], [72.0, 4067.25], [79.0, 3754.0], [78.0, 3746.0], [77.0, 3754.0], [76.0, 3749.0], [83.0, 3739.0], [82.0, 3739.0], [81.0, 3732.0], [80.0, 3729.0], [87.0, 3740.0], [86.0, 3743.0], [85.0, 3739.0], [84.0, 3738.0], [91.0, 3726.0], [90.0, 3749.0], [89.0, 3744.0], [88.0, 3740.0], [95.0, 3725.0], [94.0, 3731.0], [93.0, 3726.0], [92.0, 3730.0], [99.0, 3736.0], [98.0, 3742.0], [97.0, 3734.0], [96.0, 3732.0], [102.0, 3725.0], [101.0, 3736.0], [100.0, 3736.0], [107.0, 3725.0], [106.0, 3735.0], [105.0, 3733.0], [104.0, 3726.5], [111.0, 3703.0], [110.0, 3716.0], [109.0, 3733.0], [108.0, 3727.0], [115.0, 3714.0], [114.0, 3709.0], [113.0, 3709.0], [112.0, 3718.0], [119.0, 3721.0], [118.0, 3723.0], [117.0, 3714.0], [116.0, 3727.0], [123.0, 3712.0], [122.0, 3712.0], [121.0, 3711.0], [120.0, 3715.0], [127.0, 3699.0], [126.0, 3720.0], [125.0, 3711.0], [124.0, 4223.0], [135.0, 4222.0], [134.0, 3696.0], [133.0, 4219.0], [132.0, 3710.0], [131.0, 4219.0], [130.0, 3708.0], [129.0, 3719.0], [128.0, 3712.0], [143.0, 3705.0], [142.0, 3700.0], [141.0, 4214.0], [140.0, 3709.0], [139.0, 4221.0], [138.0, 3711.0], [137.0, 4216.0], [136.0, 3714.0], [151.0, 2103.5], [150.0, 1890.0], [149.0, 3695.0], [148.0, 3704.0], [147.0, 3694.0], [146.0, 4211.0], [145.0, 3703.0], [144.0, 4208.0], [159.0, 2355.0], [158.0, 1306.25], [156.0, 2353.0], [155.0, 2100.0], [154.0, 2102.0], [153.0, 2099.5], [157.0, 2118.5], [152.0, 4197.0], [166.0, 1054.2], [167.0, 1570.0], [165.0, 1049.0], [162.0, 1328.5], [161.0, 2353.5], [160.0, 1583.3333333333333], [163.0, 1188.0], [164.0, 1345.25], [175.0, 996.0], [174.0, 2186.5], [173.0, 773.8333333333333], [172.0, 2198.0], [171.0, 1098.5], [170.0, 1458.6666666666667], [169.0, 1465.0], [168.0, 1043.25], [183.0, 245.2857142857143], [182.0, 1075.6], [181.0, 1073.3000000000002], [179.0, 648.1111111111111], [177.0, 702.5], [176.0, 1291.3333333333333], [178.0, 412.2307692307692], [180.0, 250.77777777777777], [184.0, 137.0], [191.0, 489.3333333333333], [190.0, 346.25], [189.0, 293.2500000000001], [188.0, 231.0], [186.0, 258.55555555555554], [185.0, 212.375], [187.0, 179.66666666666666], [199.0, 979.5], [198.0, 1571.4285714285713], [196.0, 180.0], [195.0, 995.25], [194.0, 326.5], [193.0, 683.7777777777778], [192.0, 313.6666666666667], [197.0, 1821.3333333333333], [205.0, 1352.25], [204.0, 988.6428571428571], [202.0, 225.08333333333331], [201.0, 1571.5], [200.0, 1458.7142857142858], [206.0, 203.0], [203.0, 1258.6666666666665], [207.0, 1937.8], [208.0, 355.375], [210.0, 162.0], [209.0, 1708.1], [214.0, 1142.75], [213.0, 2929.9000000000005], [211.0, 1175.0], [215.0, 2118.0], [212.0, 4102.0], [222.0, 1482.3333333333333], [221.0, 2206.0], [220.0, 911.2], [219.0, 987.2], [216.0, 622.5], [218.0, 1090.25], [223.0, 3636.0], [217.0, 4172.0], [231.0, 102.66666666666667], [230.0, 214.0], [229.0, 216.0], [228.0, 1885.25], [227.0, 219.0], [226.0, 1935.5], [225.0, 1308.0], [224.0, 545.75], [238.0, 77.25], [237.0, 178.0], [236.0, 142.33333333333334], [235.0, 163.4], [234.0, 101.0], [233.0, 129.0], [232.0, 212.0], [239.0, 44.0], [247.0, 1662.2], [243.0, 45.0], [246.0, 4085.0], [245.0, 4087.0], [244.0, 4083.5], [242.0, 3642.0], [250.0, 1056.75], [249.0, 854.4], [248.0, 2593.3333333333335], [255.0, 3638.0], [254.0, 3654.0], [253.0, 4010.833333333333], [252.0, 4084.0], [271.0, 3630.0], [269.0, 1822.0], [268.0, 1384.6666666666667], [259.0, 3648.0], [258.0, 4159.0], [257.0, 3637.0], [256.0, 3644.0], [270.0, 3635.0], [267.0, 3639.0], [266.0, 3635.0], [265.0, 4151.0], [264.0, 3641.0], [263.0, 4155.0], [262.0, 4149.0], [261.0, 3638.0], [260.0, 3641.0], [278.0, 4134.0], [277.0, 3636.0], [276.0, 4164.0], [275.0, 3633.0], [274.0, 4068.5], [273.0, 4070.0], [290.0, 5.0], [289.0, 4.0], [316.0, 4109.666666666667], [334.0, 4084.0], [335.0, 4095.0], [333.0, 4091.0], [321.0, 4091.5], [320.0, 4092.0], [331.0, 4090.0], [330.0, 4092.0], [329.0, 4096.0], [328.0, 4085.0], [327.0, 4089.0], [326.0, 4090.0], [324.0, 4088.5], [350.0, 4094.0], [351.0, 4083.0], [349.0, 4088.0], [348.0, 4090.0], [346.0, 4088.5], [345.0, 4086.0], [344.0, 4090.0], [343.0, 4089.0], [336.0, 4087.0], [338.0, 4083.0], [337.0, 4096.5], [341.0, 4086.5], [340.0, 4093.0], [365.0, 4087.0], [367.0, 4084.5], [364.0, 4089.0], [355.0, 4086.0], [354.0, 4094.0], [353.0, 4085.5], [363.0, 4082.0], [362.0, 4086.0], [361.0, 4087.0], [360.0, 4085.0], [358.0, 4091.0], [356.0, 4092.0], [382.0, 4083.5], [383.0, 4080.0], [380.0, 4079.0], [371.0, 4090.0], [370.0, 4092.0], [368.0, 4092.0], [379.0, 4085.6666666666665], [378.0, 4085.0], [377.0, 4082.0], [376.0, 4083.6666666666665], [375.0, 4090.0], [374.0, 4088.0], [372.0, 4089.0], [397.0, 4088.0], [399.0, 4087.0], [396.0, 4076.0], [386.0, 4086.0], [385.0, 4083.25], [384.0, 4085.6666666666665], [395.0, 4087.0], [394.0, 4082.0], [393.0, 4090.0], [392.0, 4086.0], [390.0, 4087.5], [388.0, 4087.25], [389.0, 4091.0], [414.0, 2070.0], [415.0, 4140.0], [413.0, 4124.0], [412.0, 4125.0], [411.0, 4128.0], [410.0, 4122.0], [409.0, 4085.3333333333335], [408.0, 4078.0], [407.0, 4082.5], [403.0, 4081.3333333333335], [401.0, 4089.0], [400.0, 4080.5], [405.0, 4084.4], [431.0, 4101.0], [427.0, 2068.0], [430.0, 4114.0], [429.0, 4110.0], [426.0, 4115.0], [425.0, 4117.0], [424.0, 4114.0], [423.0, 4116.0], [417.0, 4121.0], [416.0, 4140.0], [419.0, 3610.0], [418.0, 4143.0], [421.0, 3616.0], [420.0, 3618.0], [435.0, 4095.0], [445.0, 4095.0], [446.0, 4098.0], [444.0, 4091.0], [443.0, 4096.5], [441.0, 4100.0], [439.0, 4099.0], [438.0, 4100.0], [437.0, 4098.0], [434.0, 4101.0], [433.0, 4090.0], [432.0, 4100.0], [451.0, 4093.0], [463.0, 4091.0], [462.0, 4096.0], [458.0, 4099.0], [457.0, 4098.0], [456.0, 4096.5], [454.0, 4092.0], [452.0, 4093.0], [450.0, 4091.0], [449.0, 4089.0], [448.0, 4094.0], [467.0, 4095.0], [478.0, 2060.0], [476.0, 2739.0], [475.0, 4094.0], [473.0, 4091.0], [472.0, 4093.5], [470.0, 4096.0], [469.0, 4090.0], [468.0, 4093.0], [466.0, 4094.5], [464.0, 4096.0], [494.0, 4102.0], [492.0, 4098.0], [491.0, 4103.0], [490.0, 4105.0], [488.0, 4105.5], [485.0, 4100.0], [484.0, 4106.0], [483.0, 4095.0], [480.0, 4091.0], [509.0, 33.0], [511.0, 4089.0], [510.0, 4100.0], [507.0, 4092.0], [498.0, 4087.0], [540.0, 4110.0], [542.0, 4101.0], [538.0, 4113.0], [536.0, 4112.0], [534.0, 4107.0], [530.0, 4101.0], [528.0, 4085.6666666666665], [526.0, 4086.0], [514.0, 4088.75], [512.0, 4097.0], [518.0, 4099.0], [516.0, 4101.0], [522.0, 4100.0], [520.0, 4087.0], [572.0, 3616.0], [548.0, 37.0], [574.0, 3621.0], [570.0, 4107.0], [566.0, 3577.0], [562.0, 4102.0], [560.0, 3586.0], [550.0, 4089.0], [544.0, 4107.0], [604.0, 4121.0], [584.0, 1827.5], [586.0, 4123.5], [590.0, 4116.0], [580.0, 4121.0], [576.0, 4127.0], [588.0, 4116.5], [582.0, 44.0], [606.0, 3613.5], [602.0, 4126.0], [600.0, 3611.0], [598.0, 3611.0], [596.0, 3597.6666666666665], [594.0, 4115.0], [614.0, 3613.5], [638.0, 4112.0], [632.0, 3853.0], [630.0, 4107.5], [628.0, 4114.5], [626.0, 3611.0], [622.0, 4122.0], [618.0, 3605.0], [616.0, 4127.0], [612.0, 3864.5], [610.0, 4110.0], [608.0, 4111.0], [670.0, 3602.0], [664.0, 4104.0], [660.0, 4105.0], [658.0, 4114.0], [654.0, 4104.0], [652.0, 4120.0], [642.0, 4108.0], [700.0, 1825.5], [686.0, 3095.0], [684.0, 2084.5], [702.0, 3585.0], [696.0, 3848.5], [678.0, 3602.5], [676.0, 4098.0], [694.0, 4106.0], [692.0, 4107.0], [690.0, 3766.0], [680.0, 4108.5], [732.0, 4086.5], [734.0, 4092.5], [730.0, 4103.5], [728.0, 4097.0], [726.0, 4086.0], [724.0, 4076.5], [722.0, 4089.142857142857], [708.0, 4096.0], [706.0, 4101.0], [704.0, 4110.0], [752.0, 4092.0], [760.0, 4086.0], [742.0, 4083.0], [738.0, 3578.0], [736.0, 3840.5], [758.0, 4095.0], [756.0, 4095.0], [754.0, 4097.5], [750.0, 3581.0], [748.0, 4101.0], [746.0, 4084.0], [744.0, 4097.0], [768.0, 4081.0], [894.0, 3588.0], [924.0, 3330.5], [926.0, 3334.0], [922.0, 3080.5], [902.0, 3579.0], [900.0, 3581.0], [898.0, 3581.0], [896.0, 3581.0], [918.0, 3080.5], [916.0, 3074.0], [914.0, 3575.0], [912.0, 3573.0], [908.0, 3571.0], [904.0, 3067.0], [956.0, 3071.5], [938.0, 1588.0], [936.0, 3071.0], [932.0, 102.0], [958.0, 3068.0], [952.0, 3585.0], [934.0, 3077.0], [950.0, 3580.0], [948.0, 3582.0], [946.0, 3412.0], [942.0, 3078.0], [930.0, 3586.0], [928.0, 3592.0], [940.0, 3581.0], [988.0, 3583.0], [990.0, 3070.5], [984.0, 3573.0], [982.0, 3580.0], [980.0, 3583.5], [978.0, 3075.0], [976.0, 3065.0], [970.0, 3070.0], [960.0, 3068.0], [964.0, 3322.5], [962.0, 3583.5], [966.0, 3586.0], [1022.0, 3711.0], [1014.0, 1920.0], [1020.0, 3726.0], [1018.0, 3686.0], [1016.0, 3721.0], [998.0, 3473.0], [1012.0, 3726.0], [1010.0, 3724.0], [1008.0, 3728.0], [1006.0, 3727.0], [1004.0, 3728.0], [1002.0, 3743.0], [1000.0, 3729.0], [1080.0, 3665.0], [1076.0, 1849.5], [1084.0, 1847.0], [1072.0, 3679.0], [1068.0, 3676.0], [1064.0, 3686.0], [1060.0, 3686.0], [1052.0, 3669.0], [1028.0, 3690.0], [1024.0, 3724.0], [1036.0, 3708.0], [1032.0, 3703.0], [1048.0, 3659.0], [1044.0, 3677.0], [1040.0, 3677.0], [1144.0, 3673.0], [1148.0, 3162.0], [1140.0, 3684.0], [1136.0, 3169.0], [1132.0, 3708.0], [1128.0, 3701.0], [1124.0, 3722.0], [1120.0, 3209.0], [1116.0, 3700.0], [1092.0, 3653.0], [1088.0, 3659.0], [1100.0, 3651.0], [1096.0, 3665.0], [1112.0, 3641.0], [1108.0, 3647.0], [1104.0, 3650.0], [1204.0, 3639.0], [1208.0, 3638.0], [1200.0, 3635.0], [1164.0, 3144.0], [1160.0, 3154.0], [1156.0, 3683.0], [1152.0, 3685.0], [1196.0, 3139.0], [1192.0, 3643.0], [1188.0, 3130.0], [1184.0, 3655.0], [1180.0, 3141.0], [1176.0, 3133.0], [1172.0, 3669.0], [1168.0, 3671.0], [1264.0, 35.0], [1292.0, 37.0], [1296.0, 36.0], [1328.0, 29.0], [1384.0, 33.0], [1468.0, 3665.0], [1464.0, 3098.0], [1460.0, 3685.0], [1524.0, 3634.0], [1528.0, 3616.0], [1520.0, 3625.0], [1480.0, 3084.0], [1476.0, 2577.0], [1472.0, 3672.0], [1516.0, 3630.0], [1512.0, 3645.0], [1508.0, 3610.0], [1504.0, 3613.0], [1500.0, 3080.0], [1496.0, 2564.0], [1492.0, 3660.0], [1488.0, 3654.0], [1592.0, 3283.0], [1544.0, 1831.5], [1540.0, 3627.0], [1536.0, 3633.0], [1548.0, 3176.5], [1596.0, 2778.0], [1588.0, 2788.0], [1584.0, 2778.0], [1580.0, 3293.0], [1572.0, 3286.0], [1568.0, 2795.0], [1564.0, 2796.0], [1560.0, 3630.0], [1556.0, 3625.0], [1552.0, 3628.0], [1656.0, 2738.0], [1660.0, 3238.0], [1652.0, 2734.0], [1612.0, 2763.0], [1608.0, 2767.0], [1604.0, 2763.0], [1600.0, 2768.0], [1644.0, 2738.0], [1640.0, 3229.0], [1636.0, 3248.0], [1632.0, 2754.0], [1628.0, 2749.0], [1624.0, 2754.0], [1620.0, 2755.0], [1616.0, 2763.0], [1724.0, 2689.0], [1720.0, 3195.0], [1704.0, 2694.0], [1716.0, 3192.0], [1712.0, 3199.0], [1676.0, 2711.0], [1672.0, 3219.0], [1668.0, 3228.0], [1664.0, 3236.0], [1708.0, 3208.0], [1700.0, 3210.0], [1696.0, 3201.0], [1692.0, 3196.0], [1688.0, 3218.0], [1684.0, 2705.0], [1680.0, 2717.0], [1784.0, 3147.0], [1760.0, 2649.0], [1764.0, 2651.0], [1768.0, 3153.0], [1788.0, 3134.0], [1780.0, 3136.0], [1776.0, 3140.0], [1728.0, 2685.0], [1732.0, 2682.0], [1736.0, 3184.0], [1740.0, 3184.0], [1756.0, 2653.0], [1752.0, 3174.0], [1748.0, 3169.0], [1744.0, 3168.0], [1772.0, 3154.0], [1848.0, 3165.0], [1824.0, 3110.0], [1828.0, 3106.0], [1832.0, 3105.0], [1852.0, 3165.0], [1844.0, 3176.0], [1840.0, 2584.0], [1792.0, 3134.0], [1796.0, 2964.0], [1800.0, 3123.0], [1804.0, 3123.0], [1820.0, 3119.0], [1816.0, 3123.0], [1812.0, 3121.0], [1808.0, 3121.0], [1836.0, 3101.0], [1912.0, 3121.0], [1916.0, 3119.0], [1892.0, 3142.0], [1896.0, 3136.0], [1908.0, 3123.0], [1904.0, 3126.0], [1868.0, 3164.0], [1864.0, 3165.0], [1860.0, 3167.0], [1856.0, 3162.0], [1884.0, 3152.0], [1880.0, 3145.0], [1876.0, 3154.0], [1872.0, 3156.0], [1900.0, 3128.0], [2168.0, 3155.5], [2128.0, 3171.0], [2160.0, 3141.0], [2152.0, 3150.0], [2144.0, 3158.0], [2136.0, 3158.0], [2296.0, 3063.0], [2240.0, 1615.5], [2248.0, 3085.0], [2256.0, 3115.0], [2264.0, 3092.0], [2288.0, 3070.0], [2280.0, 3068.0], [2272.0, 3063.0], [2200.0, 3141.0], [2192.0, 3116.0], [2176.0, 3156.0], [2232.0, 3103.0], [2224.0, 3122.0], [2216.0, 3108.0], [2208.0, 3123.0], [2400.0, 2141.0], [2408.0, 2137.0], [2384.0, 2668.0], [2416.0, 2133.0], [2368.0, 2681.0], [2312.0, 2726.0], [2320.0, 2731.5], [2328.0, 2714.0], [2360.0, 2694.0], [2352.0, 2700.0], [2344.0, 2705.0], [2336.0, 2709.0], [2392.0, 2665.0], [2376.0, 2680.0], [2448.0, 149.0], [2520.0, 156.0], [2680.0, 2678.0], [2672.0, 2615.0], [2664.0, 2641.0], [2656.0, 2624.5], [2808.0, 2093.0], [2752.0, 1522.0], [2768.0, 2139.0], [2776.0, 2121.0], [2800.0, 2101.0], [2792.0, 2115.0], [2784.0, 2118.5], [2712.0, 2623.0], [2704.0, 2637.0], [2696.0, 2647.0], [2688.0, 2653.5], [2744.0, 2604.0], [2736.0, 2604.0], [2728.0, 2623.0], [2720.0, 2625.0], [2840.0, 2272.0], [2920.0, 2195.0], [2872.0, 1543.6666666666667], [2864.0, 2265.0], [2856.0, 2268.0], [2848.0, 2271.0], [2904.0, 1868.25], [2928.0, 2192.0], [2880.0, 2245.5], [2888.0, 2237.0], [2896.0, 2221.0], [2912.0, 2220.0], [2832.0, 2278.0], [2824.0, 2294.0], [2816.0, 2088.0], [3176.0, 1742.0], [3184.0, 1261.0], [3096.0, 215.0], [3168.0, 1757.0], [3152.0, 1771.0], [3144.0, 1779.0], [3136.0, 2099.0], [3160.0, 1268.0], [3192.0, 1726.0], [3224.0, 1683.0], [3304.0, 1726.0], [3320.0, 1711.0], [3296.0, 1400.4444444444443], [3200.0, 1725.0], [3256.0, 1636.0], [3248.0, 1647.0], [3240.0, 1658.5], [3312.0, 1715.0], [3264.0, 1629.0], [3272.0, 1368.5], [3280.0, 1621.0], [3288.0, 1739.0], [3432.0, 1087.0], [3424.0, 1092.0], [3336.0, 579.0], [3328.0, 489.71428571428567], [3344.0, 395.0], [3368.0, 1640.0], [3576.0, 1616.0], [3688.0, 1261.0], [3608.0, 1134.0], [3640.0, 1131.5], [3680.0, 1266.0], [3696.0, 1242.0], [3704.0, 1236.5], [3648.0, 1151.0], [3656.0, 1133.0], [3664.0, 1122.0], [3592.0, 1232.0], [3600.0, 1220.0], [3672.0, 1111.0], [3632.0, 1169.0], [3624.0, 1186.0], [3616.0, 1196.0], [3720.0, 1217.0], [3736.0, 1189.5], [3712.0, 1219.0], [3728.0, 1207.0], [3768.0, 1139.5], [3760.0, 1156.0], [3744.0, 1170.0], [3776.0, 1122.0], [3792.0, 1103.0], [3784.0, 1109.0], [3912.0, 799.0], [4088.0, 2107.0], [4032.0, 1043.2], [4072.0, 958.5], [4016.0, 700.0], [4008.0, 734.5], [4024.0, 1131.5], [4064.0, 678.0], [4048.0, 708.5], [4056.0, 933.8571428571429], [4112.0, 989.6666666666666], [4096.0, 1362.6666666666667], [4144.0, 745.0], [4097.0, 992.5], [4113.0, 909.0], [4129.0, 768.0], [4177.0, 748.6666666666666], [4161.0, 743.0], [2113.0, 2658.7989690721656], [2161.0, 3141.0], [2121.0, 3171.5], [2129.0, 3183.0], [2137.0, 3196.0], [2169.0, 3144.0], [2153.0, 3176.0], [2145.0, 3174.0], [2289.0, 3092.0], [2241.0, 3100.0], [2249.0, 3100.0], [2257.0, 3092.0], [2297.0, 3064.0], [2281.0, 3059.0], [2273.0, 3079.0], [2193.0, 3129.0], [2201.0, 3145.0], [2233.0, 3091.0], [2225.0, 3118.0], [2217.0, 3110.0], [2209.0, 3103.0], [2265.0, 3096.0], [2401.0, 2141.0], [2385.0, 2663.0], [2409.0, 2138.0], [2369.0, 2686.0], [2329.0, 2715.0], [2321.0, 2722.0], [2313.0, 2725.0], [2305.0, 3082.0], [2361.0, 2685.0], [2353.0, 2707.0], [2345.0, 2702.0], [2337.0, 2707.0], [2393.0, 2668.0], [2377.0, 2674.0], [2497.0, 2131.0], [2673.0, 2641.0], [2681.0, 2668.0], [2665.0, 2641.0], [2657.0, 2638.0], [2809.0, 2090.0], [2753.0, 1882.5], [2761.0, 2150.5], [2769.0, 2138.0], [2777.0, 2120.0], [2801.0, 2098.0], [2793.0, 2111.0], [2785.0, 2119.0], [2713.0, 2622.0], [2705.0, 2634.0], [2697.0, 2643.0], [2689.0, 2652.0], [2745.0, 2598.0], [2737.0, 2603.0], [2729.0, 2612.0], [2721.0, 2620.0], [2817.0, 2087.0], [2913.0, 2225.0], [2929.0, 2192.0], [2865.0, 2251.0], [2857.0, 2268.0], [2849.0, 2270.0], [2825.0, 2282.0], [2833.0, 2279.0], [2841.0, 2271.0], [2873.0, 2245.0], [2921.0, 2205.0], [2897.0, 2232.0], [2889.0, 2226.0], [2881.0, 2242.0], [3177.0, 1745.0], [3185.0, 1264.0], [3073.0, 213.0], [3097.0, 215.0], [3169.0, 1752.0], [3121.0, 219.0], [3137.0, 2099.0], [3145.0, 1778.0], [3153.0, 1767.0], [3161.0, 1267.0], [3193.0, 1730.5], [3297.0, 1399.25], [3265.0, 1628.0], [3305.0, 1724.0], [3289.0, 1738.0], [3281.0, 1621.0], [3273.0, 1119.0], [3225.0, 1677.0], [3217.0, 1723.0], [3209.0, 1722.0], [3201.0, 1724.0], [3241.0, 1650.0], [3233.0, 1669.5], [3321.0, 1711.0], [3313.0, 1714.0], [3337.0, 1321.6666666666667], [3393.0, 646.0], [3353.0, 361.0], [3329.0, 1704.0], [3361.0, 1148.0], [3609.0, 1148.5], [3697.0, 1241.0], [3689.0, 1260.0], [3681.0, 1266.0], [3705.0, 1237.0], [3593.0, 1231.0], [3585.0, 953.0328638497648], [3601.0, 1219.0], [3641.0, 1164.0], [3649.0, 1125.5], [3657.0, 1131.0], [3665.0, 1120.0], [3673.0, 1119.0], [3617.0, 1143.5], [3625.0, 1184.0], [3633.0, 1169.0], [3737.0, 1188.0], [3817.0, 1137.0], [3809.0, 662.0], [3777.0, 1122.0], [3785.0, 1108.0], [3793.0, 1100.0], [3761.0, 1152.0], [3753.0, 1158.5], [3745.0, 1176.0], [3713.0, 1214.0], [3729.0, 1195.0], [3721.0, 925.5], [3905.0, 1976.0], [3881.0, 1132.0], [3929.0, 1918.0], [3921.0, 795.0], [3913.0, 2150.0], [4065.0, 739.0], [4041.0, 1049.0], [4089.0, 999.0], [4081.0, 1275.25], [3993.0, 1634.5], [4001.0, 735.0], [4009.0, 733.0], [4017.0, 711.0], [4057.0, 817.0], [4098.0, 773.0], [4114.0, 881.0], [4130.0, 767.0], [4162.0, 746.0], [4099.0, 1596.6666666666667], [4115.0, 881.0], [1077.0, 3666.0], [1081.0, 3666.0], [1073.0, 3668.0], [1037.0, 3703.0], [1033.0, 3703.0], [1029.0, 3679.0], [1025.0, 3714.0], [1069.0, 3674.0], [1065.0, 3683.0], [1057.0, 3690.0], [1053.0, 3687.0], [1049.0, 3659.0], [1045.0, 3663.0], [1041.0, 3673.0], [1145.0, 1241.6666666666667], [1149.0, 1593.0], [1141.0, 3173.0], [1137.0, 3171.0], [1133.0, 3708.0], [1129.0, 3708.0], [1125.0, 3712.0], [1121.0, 3212.0], [1117.0, 3197.0], [1093.0, 3653.0], [1089.0, 3656.0], [1101.0, 3652.0], [1097.0, 3654.0], [1113.0, 3645.0], [1109.0, 3641.0], [1105.0, 3648.0], [1205.0, 3637.0], [1201.0, 3645.0], [1165.0, 3676.0], [1161.0, 3144.0], [1157.0, 3682.0], [1153.0, 3681.0], [1197.0, 3649.0], [1193.0, 3641.0], [1189.0, 3146.0], [1185.0, 3646.0], [1181.0, 3657.0], [1177.0, 3136.0], [1173.0, 3647.0], [1169.0, 3669.0], [1277.0, 3629.0], [1337.0, 3097.0], [1309.0, 3629.0], [1389.0, 32.0], [1393.0, 3255.0], [1469.0, 3672.0], [1465.0, 2592.0], [1461.0, 2594.0], [1533.0, 3643.0], [1473.0, 1855.5], [1501.0, 3079.0], [1497.0, 3069.0], [1493.0, 3656.0], [1489.0, 3662.0], [1505.0, 1841.0], [1529.0, 3616.0], [1525.0, 3619.0], [1521.0, 3635.0], [1485.0, 3090.0], [1481.0, 3085.0], [1477.0, 3653.0], [1517.0, 3634.0], [1513.0, 3627.0], [1509.0, 3609.0], [1597.0, 2774.0], [1581.0, 1416.5], [1593.0, 3281.0], [1589.0, 3289.0], [1585.0, 2777.0], [1549.0, 3618.0], [1545.0, 3617.0], [1541.0, 3607.0], [1537.0, 3634.0], [1577.0, 3289.3333333333335], [1573.0, 3305.0], [1569.0, 2794.0], [1565.0, 2794.0], [1561.0, 3630.0], [1557.0, 3627.0], [1553.0, 3630.0], [1657.0, 3226.0], [1661.0, 3238.0], [1653.0, 2737.0], [1649.0, 2732.0], [1641.0, 2748.0], [1637.0, 3251.0], [1633.0, 2741.0], [1629.0, 2748.0], [1605.0, 2769.0], [1601.0, 2766.0], [1613.0, 2759.0], [1609.0, 2768.0], [1625.0, 2750.0], [1621.0, 2751.0], [1617.0, 2761.0], [1721.0, 3191.0], [1701.0, 2700.0], [1705.0, 2690.0], [1725.0, 2683.0], [1697.0, 3208.0], [1717.0, 3187.0], [1713.0, 2697.0], [1693.0, 3199.0], [1669.0, 3233.0], [1665.0, 3219.0], [1677.0, 2720.0], [1673.0, 3218.0], [1689.0, 3210.0], [1685.0, 3206.0], [1681.0, 3224.0], [1709.0, 3198.0], [1785.0, 3133.0], [1761.0, 2653.0], [1765.0, 3152.0], [1769.0, 2649.0], [1789.0, 3132.0], [1781.0, 3137.0], [1777.0, 2640.0], [1729.0, 2677.0], [1733.0, 3187.0], [1737.0, 3183.0], [1741.0, 3173.0], [1757.0, 2658.0], [1753.0, 2662.0], [1749.0, 3174.0], [1745.0, 3160.0], [1773.0, 3156.0], [1849.0, 3172.0], [1825.0, 3106.0], [1829.0, 3107.0], [1833.0, 3104.0], [1853.0, 3162.0], [1845.0, 3174.0], [1841.0, 2585.0], [1793.0, 3134.0], [1797.0, 3141.0], [1801.0, 3125.0], [1805.0, 3129.0], [1821.0, 3119.0], [1817.0, 3117.0], [1813.0, 3123.0], [1809.0, 2621.0], [1837.0, 3099.0], [1905.0, 3122.0], [1913.0, 3121.0], [1889.0, 3139.5], [1893.0, 3143.0], [1909.0, 3127.0], [1857.0, 3161.0], [1861.0, 3168.0], [1865.0, 3154.0], [1869.0, 3163.0], [1885.0, 3146.0], [1873.0, 3149.0], [1901.0, 3132.0], [1897.0, 3126.0], [1985.0, 99.0], [2114.0, 3196.0], [2162.0, 3158.0], [2122.0, 3171.0], [2130.0, 3187.0], [2170.0, 3134.0], [2154.0, 3152.0], [2146.0, 3153.0], [2138.0, 3172.0], [2186.0, 3121.0], [2290.0, 3087.0], [2178.0, 3155.5], [2194.0, 3133.0], [2202.0, 3106.0], [2234.0, 3115.0], [2226.0, 3139.0], [2218.0, 3131.0], [2210.0, 3116.0], [2242.0, 3110.0], [2250.0, 3118.0], [2258.0, 3090.0], [2266.0, 3094.0], [2298.0, 3084.0], [2282.0, 3066.0], [2274.0, 3064.0], [2322.0, 2723.0], [2386.0, 2660.0], [2402.0, 2141.0], [2330.0, 2725.0], [2314.0, 2729.0], [2306.0, 2628.0], [2362.0, 2685.0], [2354.0, 2702.0], [2346.0, 2707.0], [2338.0, 2705.0], [2394.0, 2659.0], [2378.0, 2671.0], [2370.0, 2683.0], [2522.0, 156.0], [2674.0, 2633.0], [2666.0, 1771.0], [2810.0, 2090.0], [2754.0, 1877.5], [2762.0, 2135.0], [2770.0, 2138.0], [2802.0, 2096.0], [2714.0, 2636.0], [2706.0, 2646.0], [2698.0, 2650.0], [2690.0, 2661.0], [2746.0, 2609.0], [2738.0, 2606.0], [2730.0, 2608.0], [2722.0, 2625.0], [2778.0, 2120.0], [2826.0, 2281.0], [2914.0, 2219.0], [2866.0, 2257.0], [2858.0, 2268.0], [2850.0, 2270.0], [2818.0, 2088.0], [2834.0, 2278.0], [2842.0, 2272.0], [2874.0, 2250.0], [2898.0, 2221.0], [2890.0, 2235.0], [2906.0, 1869.0], [2882.0, 2242.0], [2922.0, 2195.0], [3194.0, 1722.0], [3178.0, 1738.0], [3074.0, 213.0], [3170.0, 1755.0], [3130.0, 1831.7300000000002], [3154.0, 1767.0], [3146.0, 1779.0], [3138.0, 2099.0], [3162.0, 1764.0], [3186.0, 1741.0], [3306.0, 1723.0], [3298.0, 1606.0], [3226.0, 1672.0], [3210.0, 1724.5], [3258.0, 1378.0], [3242.0, 1651.0], [3314.0, 1714.0], [3266.0, 1628.0], [3274.0, 1115.0], [3282.0, 1114.0], [3290.0, 1738.0], [3322.0, 1710.0], [3450.0, 1087.0], [3354.0, 1661.6666666666667], [3402.0, 261.0], [3394.0, 647.0], [3330.0, 1704.0], [3338.0, 1691.0], [3370.0, 1640.5], [3362.0, 955.0], [3562.0, 1098.0], [3466.0, 1090.0], [3698.0, 1241.0], [3682.0, 1270.0], [3610.0, 1203.0], [3690.0, 1258.0], [3706.0, 1228.0], [3650.0, 1141.0], [3658.0, 1131.0], [3666.0, 1117.0], [3586.0, 1235.0], [3594.0, 1224.0], [3602.0, 1218.0], [3642.0, 1161.0], [3674.0, 1110.0], [3634.0, 1169.0], [3626.0, 1140.5], [3618.0, 1191.0], [3722.0, 1208.0], [3714.0, 1217.0], [3730.0, 1194.0], [3738.0, 1176.0], [3770.0, 1143.5], [3762.0, 1153.0], [3754.0, 1158.0], [3746.0, 1162.0], [3778.0, 1121.0], [3794.0, 1143.0], [3786.0, 1107.0], [3850.0, 1135.0], [3954.0, 1127.0], [3906.0, 2166.5], [3922.0, 794.0], [4074.0, 1012.0], [4042.0, 1048.2], [4090.0, 1489.6666666666667], [4082.0, 1000.0], [4018.0, 703.5], [4010.0, 732.0], [4026.0, 1131.0], [3986.0, 1804.0], [3994.0, 1637.0], [4050.0, 686.0], [4058.0, 793.3333333333334], [4116.0, 876.0], [4100.0, 1974.5], [4164.0, 747.25], [4181.0, 749.0], [4117.0, 860.0], [4101.0, 995.0], [4133.0, 742.0], [4149.0, 745.0], [2115.0, 3198.0], [2171.0, 1641.0], [2123.0, 3173.0], [2131.0, 3202.0], [2163.0, 3139.0], [2155.0, 3183.0], [2147.0, 3184.0], [2139.0, 3170.0], [2195.0, 3135.0], [2291.0, 3090.0], [2227.0, 1633.5], [2219.0, 3113.0], [2211.0, 3122.0], [2187.0, 3129.0], [2203.0, 3138.0], [2235.0, 3107.0], [2243.0, 3105.0], [2251.0, 3103.0], [2259.0, 3095.0], [2267.0, 3109.0], [2299.0, 3085.0], [2283.0, 3070.0], [2275.0, 3081.0], [2323.0, 2721.0], [2387.0, 2664.0], [2403.0, 2649.0], [2331.0, 2720.0], [2307.0, 2625.0], [2363.0, 2688.0], [2355.0, 2699.0], [2347.0, 2698.0], [2339.0, 2708.0], [2395.0, 2661.0], [2379.0, 2678.0], [2371.0, 2675.0], [2515.0, 155.5], [2683.0, 2664.5], [2675.0, 2641.0], [2667.0, 1771.0], [2659.0, 2599.5], [2699.0, 2637.0], [2803.0, 2095.0], [2691.0, 2656.0], [2707.0, 2628.0], [2715.0, 2623.0], [2747.0, 2593.0], [2739.0, 2611.0], [2731.0, 2617.0], [2723.0, 2625.0], [2755.0, 2153.0], [2763.0, 2135.0], [2771.0, 2138.0], [2779.0, 2121.0], [2811.0, 2092.0], [2795.0, 2110.0], [2787.0, 2119.5], [2931.0, 2197.5], [2891.0, 1210.5], [2843.0, 2271.0], [2835.0, 2278.0], [2827.0, 2281.0], [2819.0, 2088.0], [2907.0, 2220.0], [2899.0, 2231.0], [2883.0, 2244.0], [2875.0, 2244.0], [2867.0, 2251.0], [2859.0, 2276.0], [2851.0, 2270.0], [3187.0, 1746.0], [3179.0, 1741.0], [3131.0, 2101.0], [3171.0, 1749.0], [3155.0, 1767.0], [3163.0, 1264.0], [3139.0, 2099.0], [3147.0, 1277.0], [3267.0, 1630.0], [3323.0, 1710.0], [3291.0, 1737.0], [3283.0, 1620.0], [3275.0, 1118.0], [3227.0, 1675.0], [3219.0, 1718.0], [3211.0, 1725.0], [3203.0, 1725.5], [3259.0, 1122.0], [3243.0, 1646.0], [3235.0, 1663.5], [3307.0, 1725.0], [3315.0, 1713.0], [3339.0, 397.0], [3355.0, 578.1428571428571], [3347.0, 377.5], [3427.0, 1088.3333333333333], [3395.0, 646.0], [3331.0, 1695.0], [3387.0, 645.0], [3371.0, 1633.0], [3363.0, 455.1428571428571], [3403.0, 598.0], [3547.0, 1096.0], [3683.0, 1265.0], [3691.0, 1255.0], [3611.0, 1198.0], [3699.0, 1246.0], [3707.0, 1233.0], [3595.0, 1224.0], [3587.0, 1234.0], [3603.0, 1218.0], [3643.0, 1159.0], [3651.0, 1149.0], [3659.0, 1130.0], [3667.0, 1117.0], [3675.0, 1109.0], [3635.0, 1132.5], [3619.0, 1189.0], [3627.0, 1183.0], [3715.0, 1212.0], [3779.0, 1122.0], [3787.0, 1106.0], [3755.0, 1150.0], [3747.0, 1165.0], [3771.0, 1129.0], [3739.0, 1186.0], [3731.0, 1195.0], [3723.0, 1203.0], [3795.0, 1142.0], [3907.0, 2142.0], [3947.0, 1636.0], [3923.0, 2152.0], [3915.0, 1634.0], [4075.0, 1006.0], [4091.0, 774.0], [4035.0, 1129.0], [4051.0, 679.0], [4067.0, 762.8], [3987.0, 2020.8571428571427], [3995.0, 1638.0], [4003.0, 904.3179487179484], [4011.0, 720.0], [4019.0, 698.0], [4027.0, 1133.6666666666667], [4102.0, 1296.5], [4118.0, 815.0], [4134.0, 767.0], [4119.0, 853.0], [4103.0, 907.0], [4135.0, 749.0], [4151.0, 751.0], [4183.0, 752.0], [537.0, 4099.0], [541.0, 4097.0], [535.0, 2067.5], [539.0, 4105.0], [533.0, 4097.0], [531.0, 4095.0], [527.0, 4114.0], [525.0, 4093.0], [519.0, 4100.666666666667], [517.0, 4088.3333333333335], [513.0, 4091.6666666666665], [571.0, 3618.0], [549.0, 2696.5], [547.0, 1813.0], [545.0, 3578.0], [555.0, 3748.3333333333335], [553.0, 4091.0], [575.0, 4109.5], [569.0, 4093.2], [551.0, 4106.0], [567.0, 4105.0], [565.0, 4084.0], [563.0, 4089.0], [561.0, 4092.0], [583.0, 2424.6666666666665], [585.0, 45.0], [607.0, 3606.0], [605.0, 3602.0], [601.0, 4126.5], [597.0, 3576.0], [595.0, 4119.0], [591.0, 4114.0], [581.0, 4108.0], [577.0, 4128.0], [589.0, 4116.0], [639.0, 4110.0], [637.0, 4104.5], [635.0, 3861.0], [633.0, 4117.0], [625.0, 3937.3333333333335], [621.0, 3946.3333333333335], [617.0, 4120.0], [615.0, 3605.0], [669.0, 4105.5], [671.0, 4110.0], [667.0, 4113.0], [647.0, 4114.0], [645.0, 4108.666666666667], [641.0, 3606.0], [663.0, 4112.5], [661.0, 4113.0], [659.0, 4114.0], [657.0, 4108.333333333333], [651.0, 4117.5], [649.0, 4111.0], [701.0, 4107.0], [685.0, 2087.5], [703.0, 4099.0], [699.0, 3926.0], [693.0, 4100.0], [687.0, 4112.0], [683.0, 4103.0], [675.0, 3852.0], [673.0, 4111.0], [733.0, 4100.0], [731.0, 4092.0], [729.0, 4098.0], [727.0, 4077.0], [725.0, 4095.0], [721.0, 4105.0], [709.0, 4103.0], [705.0, 4090.0], [743.0, 4081.0], [765.0, 4091.5], [767.0, 4091.0], [761.0, 4096.0], [741.0, 3579.0], [737.0, 3576.0], [759.0, 4098.0], [755.0, 4094.0], [751.0, 3573.0], [749.0, 4092.0], [747.0, 4086.0], [745.0, 4089.0], [795.0, 81.0], [793.0, 80.0], [855.0, 92.0], [895.0, 3580.0], [893.0, 3500.44], [901.0, 3580.0], [921.0, 3588.0], [903.0, 1582.5], [919.0, 3072.0], [915.0, 3579.5], [909.0, 3583.0], [907.0, 3323.5], [905.0, 3069.0], [899.0, 3581.0], [897.0, 3580.0], [935.0, 2422.3333333333335], [931.0, 1847.5], [929.0, 3582.0], [933.0, 3581.0], [955.0, 3069.0], [953.0, 3067.0], [951.0, 3576.0], [949.0, 3585.0], [947.0, 3077.0], [943.0, 3073.0], [941.0, 3582.0], [939.0, 3070.0], [937.0, 3067.0], [987.0, 3571.0], [991.0, 3581.0], [985.0, 3578.0], [981.0, 3574.0], [975.0, 3320.0], [973.0, 3329.0], [971.0, 3062.0], [969.0, 3067.0], [967.0, 3064.0], [965.0, 3573.0], [1021.0, 3712.0], [1023.0, 3724.0], [1019.0, 3686.0], [1017.0, 3687.0], [1015.0, 3722.0], [1013.0, 3732.0], [1011.0, 3736.0], [1009.0, 3724.0], [1007.0, 3737.0], [999.0, 3729.0], [995.0, 3065.5], [1005.0, 3727.0], [1003.0, 3729.0], [1001.0, 3742.0], [1078.0, 3666.0], [1086.0, 3666.0], [1074.0, 3680.0], [1038.0, 3707.0], [1034.0, 3703.0], [1030.0, 3678.0], [1026.0, 3710.0], [1070.0, 3678.0], [1066.0, 3674.0], [1062.0, 3689.5], [1058.0, 3686.0], [1050.0, 3670.0], [1046.0, 3695.0], [1042.0, 3675.0], [1146.0, 1078.3333333333333], [1150.0, 3179.0], [1142.0, 3176.0], [1138.0, 3181.0], [1134.0, 3708.0], [1130.0, 3709.0], [1126.0, 3707.0], [1122.0, 3211.0], [1118.0, 3200.0], [1094.0, 3655.0], [1090.0, 3663.0], [1102.0, 3652.0], [1098.0, 3662.0], [1114.0, 3642.0], [1110.0, 3645.0], [1106.0, 3650.0], [1206.0, 3639.0], [1202.0, 3633.0], [1166.0, 3670.0], [1162.0, 3666.0], [1158.0, 3685.0], [1154.0, 3684.0], [1198.0, 3140.0], [1194.0, 3643.0], [1190.0, 3130.0], [1186.0, 3139.0], [1182.0, 3654.0], [1178.0, 3137.0], [1174.0, 3647.0], [1170.0, 3669.0], [1294.0, 34.5], [1378.0, 34.0], [1382.0, 32.0], [1454.0, 39.0], [1470.0, 3667.0], [1466.0, 3100.0], [1462.0, 2599.0], [1458.0, 3353.4122448979588], [1526.0, 3637.0], [1534.0, 3631.0], [1522.0, 3621.0], [1486.0, 3645.5], [1482.0, 3088.0], [1478.0, 3082.0], [1474.0, 2577.0], [1518.0, 3640.0], [1514.0, 3637.0], [1510.0, 3628.0], [1506.0, 3635.0], [1502.0, 3652.0], [1498.0, 3070.0], [1494.0, 3656.0], [1490.0, 3644.0], [1594.0, 3291.0], [1598.0, 2772.0], [1590.0, 3282.0], [1586.0, 2777.0], [1582.0, 2788.0], [1578.0, 3295.0], [1574.0, 3304.0], [1570.0, 2794.0], [1566.0, 2789.0], [1542.0, 3619.0], [1538.0, 3621.0], [1550.0, 3620.0], [1546.0, 3616.0], [1562.0, 3646.0], [1558.0, 3624.0], [1554.0, 3636.0], [1658.0, 3230.0], [1662.0, 3229.0], [1654.0, 2739.0], [1650.0, 2728.0], [1642.0, 3227.0], [1638.0, 3249.0], [1634.0, 3245.0], [1630.0, 2747.0], [1606.0, 2770.0], [1602.0, 2777.0], [1614.0, 2765.0], [1610.0, 2763.0], [1626.0, 2753.0], [1622.0, 2755.0], [1618.0, 2757.0], [1722.0, 2689.0], [1702.0, 2694.0], [1726.0, 2686.0], [1698.0, 3206.0], [1706.0, 2692.0], [1718.0, 3193.0], [1714.0, 2698.0], [1694.0, 3199.0], [1670.0, 3226.0], [1666.0, 3235.0], [1678.0, 2714.0], [1674.0, 3227.0], [1690.0, 3219.0], [1686.0, 3223.0], [1682.0, 2718.0], [1710.0, 3199.0], [1786.0, 3135.0], [1790.0, 3133.0], [1762.0, 2651.0], [1766.0, 2652.0], [1770.0, 3154.0], [1782.0, 3137.0], [1778.0, 2630.0], [1758.0, 2656.0], [1730.0, 3181.0], [1734.0, 3188.0], [1738.0, 3172.0], [1742.0, 3169.0], [1754.0, 2659.0], [1750.0, 3168.0], [1746.0, 3176.0], [1774.0, 3142.0], [1850.0, 3177.0], [1854.0, 3171.0], [1826.0, 3107.0], [1830.0, 3106.0], [1834.0, 3097.0], [1846.0, 3165.0], [1842.0, 3176.0], [1822.0, 3110.0], [1798.0, 3129.0], [1802.0, 3135.0], [1806.0, 3122.0], [1818.0, 3108.0], [1814.0, 3121.0], [1810.0, 2618.0], [1838.0, 3099.0], [1906.0, 3131.0], [1914.0, 3110.0], [1890.0, 3143.0], [1894.0, 3128.0], [1898.0, 3125.0], [1910.0, 3126.0], [1870.0, 3148.0], [1866.0, 3164.0], [1862.0, 3167.0], [1858.0, 3168.0], [1886.0, 3154.0], [1882.0, 3152.0], [1878.0, 3144.5], [1874.0, 3146.0], [1902.0, 3131.0], [2116.0, 3188.0], [2172.0, 3133.0], [2124.0, 3185.0], [2132.0, 3200.0], [2164.0, 3149.0], [2156.0, 3162.0], [2140.0, 3174.0], [2292.0, 3084.0], [2244.0, 3126.0], [2252.0, 3120.0], [2260.0, 3112.0], [2268.0, 3103.0], [2300.0, 3068.0], [2284.0, 3074.0], [2276.0, 3098.0], [2204.0, 3106.0], [2196.0, 3127.0], [2188.0, 3117.0], [2180.0, 3144.0], [2236.0, 3096.0], [2228.0, 3133.0], [2220.0, 3111.0], [2212.0, 3129.0], [2308.0, 2626.0], [2372.0, 2680.0], [2404.0, 2140.0], [2364.0, 2694.0], [2316.0, 2722.5], [2324.0, 2723.0], [2332.0, 2721.0], [2356.0, 2692.0], [2348.0, 2703.0], [2340.0, 2706.0], [2396.0, 2654.0], [2388.0, 2659.0], [2380.0, 2669.0], [2468.0, 151.0], [2524.0, 156.0], [2684.0, 2660.0], [2676.0, 2628.0], [2668.0, 2618.0], [2660.0, 2631.0], [2804.0, 2094.0], [2788.0, 2116.0], [2764.0, 2135.0], [2756.0, 2153.0], [2772.0, 2138.0], [2780.0, 2120.0], [2812.0, 2091.0], [2796.0, 2109.0], [2716.0, 2624.0], [2708.0, 2628.0], [2700.0, 2641.0], [2692.0, 2645.0], [2748.0, 2600.0], [2740.0, 2600.0], [2732.0, 2613.0], [2724.0, 2626.0], [2844.0, 2270.0], [2876.0, 1724.0], [2868.0, 2256.0], [2860.0, 2269.0], [2852.0, 2270.0], [2900.0, 1929.25], [2884.0, 2240.0], [2892.0, 2234.0], [2916.0, 2220.0], [2836.0, 2279.0], [2828.0, 2281.0], [2820.0, 2095.0], [2908.0, 2226.0], [3196.0, 1726.5], [3132.0, 2107.0], [3172.0, 1746.0], [3180.0, 1740.0], [3156.0, 1258.0], [3148.0, 1276.0], [3140.0, 2099.0], [3164.0, 1759.0], [3188.0, 1742.75], [3220.0, 1719.0], [3228.0, 1671.0], [3260.0, 1126.0], [3252.0, 1644.25], [3244.0, 1650.0], [3236.0, 1663.0], [3300.0, 1567.8], [3308.0, 1722.0], [3268.0, 1629.0], [3276.0, 1624.0], [3284.0, 1619.0], [3292.0, 1739.0], [3324.0, 1708.0], [3316.0, 1714.0], [3356.0, 1655.0], [3396.0, 646.0], [3348.0, 359.0], [3332.0, 1695.0], [3340.0, 1691.0], [3380.0, 644.0], [3364.0, 255.0], [3476.0, 1091.0], [3684.0, 1182.0], [3700.0, 1236.0], [3612.0, 1200.0], [3652.0, 1139.0], [3660.0, 1129.0], [3708.0, 1225.0], [3588.0, 1234.0], [3596.0, 1223.0], [3604.0, 1217.0], [3644.0, 1158.0], [3676.0, 1184.5], [3668.0, 875.5], [3628.0, 1139.5], [3636.0, 1168.0], [3620.0, 1182.0], [3716.0, 1223.0], [3772.0, 1128.0], [3724.0, 1212.0], [3732.0, 1186.0], [3740.0, 1179.0], [3764.0, 1152.5], [3756.0, 1160.0], [3748.0, 1158.0], [3780.0, 1123.0], [3788.0, 1105.0], [3892.0, 1131.0], [3908.0, 2173.5], [4068.0, 810.8], [4084.0, 1553.5], [4092.0, 997.5], [4076.0, 1002.0], [4012.0, 718.0], [4004.0, 756.0], [4020.0, 704.0], [3980.0, 734.0], [4052.0, 1043.0], [4104.0, 995.0], [4152.0, 744.0], [4184.0, 751.5], [4168.0, 748.0], [4105.0, 772.0], [4153.0, 745.0], [4185.0, 751.0], [4169.0, 748.0], [2173.0, 3166.0], [2085.0, 111.0], [2117.0, 3171.0], [2125.0, 3185.0], [2133.0, 3192.0], [2141.0, 3171.0], [2165.0, 3157.0], [2157.0, 3184.0], [2149.0, 3164.0], [2293.0, 3087.0], [2301.0, 3070.0], [2245.0, 3119.0], [2253.0, 3084.0], [2261.0, 3075.0], [2285.0, 3080.0], [2277.0, 3083.0], [2237.0, 3099.0], [2189.0, 3115.0], [2181.0, 3142.0], [2197.0, 3126.0], [2205.0, 3144.0], [2229.0, 3135.0], [2221.0, 3110.0], [2213.0, 3132.0], [2269.0, 3092.0], [2325.0, 2720.0], [2405.0, 2137.0], [2373.0, 2679.0], [2333.0, 2714.0], [2317.0, 2720.0], [2309.0, 2629.0], [2365.0, 2683.0], [2357.0, 2692.0], [2349.0, 2700.0], [2341.0, 2707.0], [2397.0, 2654.0], [2389.0, 2662.0], [2381.0, 2666.0], [2685.0, 2672.0], [2677.0, 2678.0], [2669.0, 2638.0], [2661.0, 2631.0], [2653.0, 2304.2946058091275], [2805.0, 2094.0], [2757.0, 2153.0], [2765.0, 2134.0], [2773.0, 2137.0], [2781.0, 2119.0], [2813.0, 2089.0], [2797.0, 2102.0], [2789.0, 2115.0], [2717.0, 2624.0], [2709.0, 2630.0], [2701.0, 2643.0], [2693.0, 2645.0], [2749.0, 2595.0], [2741.0, 2599.0], [2733.0, 2620.0], [2725.0, 2616.0], [2877.0, 2245.0], [2869.0, 1520.8], [2861.0, 2408.0], [2853.0, 2269.0], [2821.0, 2088.0], [2829.0, 2280.0], [2837.0, 2278.0], [2845.0, 2269.0], [2901.0, 1704.5], [2925.0, 2192.0], [2917.0, 2224.5], [2909.0, 2220.0], [2893.0, 2223.0], [2885.0, 2243.0], [3173.0, 1750.0], [3133.0, 2101.0], [3197.0, 1731.0], [3141.0, 2097.0], [3149.0, 1278.0], [3157.0, 1766.0], [3189.0, 1738.0], [3269.0, 1629.0], [3293.0, 1738.0], [3285.0, 1618.0], [3277.0, 1623.0], [3229.0, 1673.0], [3221.0, 1698.0], [3213.0, 1720.0], [3261.0, 1127.0], [3253.0, 1641.0], [3245.0, 1645.0], [3237.0, 1658.0], [3301.0, 1730.0], [3309.0, 1717.0], [3325.0, 1707.0], [3317.0, 1712.0], [3357.0, 1655.0], [3333.0, 1695.0], [3349.0, 582.0], [3365.0, 1149.0], [3421.0, 382.00000000000006], [3573.0, 1097.0], [3525.0, 1096.0], [3605.0, 1136.0], [3693.0, 1200.3333333333333], [3685.0, 1263.0], [3613.0, 1196.0], [3701.0, 1240.0], [3709.0, 1219.0], [3597.0, 1222.0], [3589.0, 1234.0], [3645.0, 1156.0], [3637.0, 1166.0], [3653.0, 1146.0], [3661.0, 1128.0], [3669.0, 1116.0], [3677.0, 1269.0], [3621.0, 1188.0], [3629.0, 1181.0], [3773.0, 1135.0], [3781.0, 1124.0], [3789.0, 1105.0], [3765.0, 898.0], [3757.0, 1156.0], [3749.0, 1164.0], [3717.0, 1210.0], [3741.0, 1184.0], [3733.0, 1194.0], [3797.0, 1140.0], [3909.0, 2203.0], [3925.0, 2149.0], [4077.0, 1007.3333333333334], [4085.0, 1596.0], [4093.0, 996.0], [4037.0, 1127.6666666666667], [4045.0, 695.0], [4069.0, 1017.0], [3981.0, 2141.0], [4005.0, 752.0], [4013.0, 716.0], [4021.0, 700.0], [4029.0, 1131.0], [4053.0, 851.5], [4186.0, 748.75], [4106.0, 993.5], [4138.0, 745.0], [4107.0, 997.0], [4139.0, 764.0], [4187.0, 750.0], [1083.0, 1844.0], [1087.0, 3659.0], [1079.0, 3666.0], [1075.0, 3671.0], [1071.0, 3679.0], [1067.0, 3676.0], [1063.0, 3679.0], [1059.0, 3691.0], [1055.0, 3688.0], [1031.0, 3718.0], [1027.0, 3720.0], [1039.0, 3670.0], [1035.0, 3707.0], [1051.0, 3690.0], [1047.0, 3693.0], [1043.0, 3674.0], [1147.0, 3162.0], [1143.0, 1607.0], [1151.0, 3178.0], [1139.0, 3677.0], [1135.0, 3183.0], [1131.0, 3703.0], [1127.0, 3703.0], [1123.0, 3707.0], [1119.0, 3209.0], [1095.0, 3655.0], [1091.0, 3661.0], [1103.0, 3648.0], [1099.0, 3662.0], [1115.0, 3645.0], [1111.0, 3639.0], [1107.0, 3654.0], [1207.0, 3630.0], [1203.0, 3635.0], [1167.0, 3666.0], [1163.0, 3156.0], [1159.0, 3684.0], [1155.0, 3681.0], [1199.0, 3648.0], [1195.0, 3644.0], [1191.0, 3147.0], [1187.0, 3132.0], [1183.0, 3660.0], [1179.0, 3140.0], [1175.0, 3160.0], [1171.0, 3671.0], [1327.0, 3105.0], [1471.0, 3665.0], [1467.0, 3668.0], [1463.0, 3647.0], [1459.0, 3649.0], [1527.0, 3631.0], [1531.0, 3638.5], [1523.0, 3633.0], [1487.0, 3657.0], [1483.0, 3626.0], [1479.0, 3090.0], [1475.0, 2577.0], [1519.0, 3632.0], [1515.0, 3633.0], [1511.0, 3626.0], [1507.0, 3646.0], [1503.0, 3613.0], [1499.0, 3077.0], [1495.0, 2563.0], [1491.0, 3657.0], [1595.0, 2767.0], [1599.0, 2779.0], [1591.0, 3280.0], [1587.0, 2775.0], [1583.0, 2787.0], [1579.0, 3301.0], [1571.0, 2798.0], [1567.0, 2793.0], [1539.0, 3625.0], [1551.0, 3615.0], [1543.0, 3620.0], [1563.0, 3647.0], [1559.0, 3623.0], [1555.0, 3645.0], [1659.0, 3237.0], [1627.0, 1403.5], [1623.0, 2759.0], [1619.0, 2756.0], [1631.0, 2742.0], [1607.0, 2765.0], [1603.0, 2765.0], [1615.0, 2763.0], [1611.0, 2759.0], [1663.0, 2730.0], [1655.0, 2740.0], [1651.0, 2739.0], [1647.0, 2907.3333333333335], [1643.0, 3251.0], [1639.0, 3252.0], [1635.0, 3257.0], [1727.0, 2681.0], [1715.0, 1382.5], [1679.0, 2707.0], [1675.0, 2718.0], [1671.0, 3211.0], [1667.0, 2717.0], [1695.0, 3199.0], [1691.0, 3207.0], [1687.0, 3223.0], [1683.0, 2719.0], [1703.0, 2693.0], [1699.0, 3216.0], [1707.0, 2695.0], [1723.0, 2689.0], [1719.0, 3191.0], [1711.0, 3206.0], [1787.0, 3136.0], [1791.0, 3134.0], [1763.0, 3154.0], [1767.0, 3154.0], [1771.0, 2637.0], [1783.0, 3146.0], [1779.0, 3152.0], [1759.0, 2654.0], [1731.0, 2677.0], [1735.0, 2667.0], [1739.0, 3180.0], [1743.0, 3163.0], [1755.0, 2655.0], [1751.0, 3162.0], [1747.0, 3166.0], [1775.0, 3142.0], [1851.0, 3162.0], [1855.0, 3162.0], [1827.0, 3106.0], [1831.0, 3110.0], [1835.0, 3103.0], [1847.0, 3173.0], [1843.0, 3171.0], [1823.0, 3105.0], [1799.0, 3119.0], [1803.0, 3119.0], [1807.0, 3121.0], [1819.0, 3106.0], [1815.0, 3124.0], [1811.0, 3107.0], [1839.0, 3100.0], [1911.0, 3123.0], [1915.0, 3123.0], [1891.0, 3140.0], [1895.0, 3135.0], [1907.0, 3116.0], [1887.0, 3147.0], [1859.0, 3169.0], [1863.0, 3158.0], [1867.0, 3163.0], [1871.0, 3156.0], [1883.0, 3154.0], [1879.0, 3145.0], [1875.0, 3159.0], [1903.0, 3133.0], [1899.0, 3130.0], [1963.0, 3106.0], [2027.0, 3105.0], [2023.0, 3109.0], [2118.0, 3173.0], [2174.0, 3170.0], [2126.0, 3171.0], [2134.0, 3156.0], [2166.0, 3146.0], [2158.0, 3165.0], [2150.0, 3160.0], [2142.0, 3169.0], [2182.0, 3157.0], [2238.0, 1618.5], [2190.0, 3117.0], [2198.0, 3128.0], [2206.0, 3119.0], [2230.0, 3102.0], [2222.0, 3108.0], [2214.0, 3137.0], [2302.0, 3065.0], [2246.0, 3124.0], [2254.0, 3084.0], [2262.0, 3074.0], [2270.0, 3108.0], [2294.0, 3086.0], [2286.0, 3090.0], [2278.0, 3101.0], [2318.0, 2720.0], [2406.0, 2138.0], [2334.0, 2723.0], [2326.0, 2714.0], [2310.0, 2631.0], [2366.0, 2681.0], [2358.0, 2691.0], [2350.0, 2707.0], [2342.0, 2713.0], [2398.0, 2653.0], [2390.0, 2661.0], [2382.0, 2677.0], [2374.0, 2671.0], [2686.0, 2663.0], [2678.0, 2672.0], [2670.0, 2638.0], [2662.0, 2606.0], [2654.0, 2608.0], [2798.0, 2102.0], [2814.0, 2091.0], [2758.0, 2152.0], [2766.0, 2132.0], [2774.0, 2137.0], [2806.0, 2093.0], [2790.0, 2117.0], [2718.0, 2627.0], [2710.0, 2638.0], [2702.0, 2640.0], [2694.0, 2645.0], [2750.0, 2605.0], [2742.0, 2602.0], [2734.0, 2611.0], [2726.0, 2621.0], [2782.0, 2121.0], [2822.0, 2086.0], [2886.0, 874.0], [2870.0, 1718.5], [2862.0, 2265.0], [2854.0, 2268.0], [2878.0, 2249.0], [2830.0, 2280.0], [2838.0, 2278.0], [2846.0, 2269.0], [2902.0, 1665.7], [2894.0, 2234.0], [2926.0, 2193.0], [2918.0, 2218.0], [2910.0, 2224.0], [3046.0, 1217.0], [3198.0, 1725.0], [3174.0, 1744.0], [3182.0, 1741.0], [3134.0, 2100.0], [3150.0, 1771.0], [3142.0, 2098.0], [3158.0, 1259.0], [3166.0, 1508.5], [3190.0, 1724.0], [3206.0, 1728.5], [3230.0, 1669.0], [3222.0, 1700.0], [3214.0, 1722.0], [3262.0, 1635.0], [3254.0, 1635.0], [3246.0, 1648.0], [3238.0, 1661.0], [3302.0, 1727.0], [3310.0, 1716.0], [3326.0, 1708.0], [3270.0, 1630.0], [3278.0, 1624.0], [3286.0, 1618.0], [3294.0, 1738.0], [3318.0, 1712.0], [3334.0, 1694.0], [3342.0, 396.1111111111111], [3382.0, 644.0], [3366.0, 979.6666666666667], [3422.0, 1093.0], [3486.0, 1093.0], [3686.0, 1263.0], [3702.0, 1234.0], [3614.0, 1199.0], [3694.0, 1243.0], [3710.0, 1230.0], [3654.0, 1135.0], [3662.0, 1125.0], [3590.0, 1165.0], [3598.0, 1222.0], [3606.0, 1215.0], [3646.0, 1156.0], [3670.0, 1115.0], [3678.0, 1267.0], [3638.0, 1165.0], [3630.0, 1181.0], [3622.0, 1187.0], [3726.0, 1206.0], [3782.0, 1119.0], [3790.0, 1104.0], [3814.0, 662.0], [3718.0, 1212.0], [3734.0, 1184.0], [3742.0, 1173.0], [3766.0, 1135.0], [3758.0, 1158.0], [3750.0, 1162.0], [3798.0, 900.0], [3910.0, 1439.0], [3934.0, 733.0], [3870.0, 669.0], [3966.0, 784.0], [3918.0, 1474.0], [3926.0, 2145.0], [3982.0, 1125.0], [4078.0, 1006.0], [4086.0, 1316.0], [4094.0, 1037.6666666666667], [4022.0, 933.5], [4014.0, 715.0], [4006.0, 744.0], [4030.0, 1130.6666666666667], [3990.0, 2171.0], [3998.0, 1809.0], [4062.0, 674.5], [4108.0, 913.0], [4140.0, 743.0], [4156.0, 746.0], [4125.0, 768.0], [4141.0, 743.0], [4109.0, 830.0], [2159.0, 3174.0], [2103.0, 114.0], [2175.0, 3161.0], [2119.0, 3177.0], [2127.0, 3169.0], [2135.0, 3194.0], [2151.0, 3164.0], [2143.0, 3172.0], [2183.0, 3156.0], [2215.0, 3108.0], [2231.0, 3093.0], [2239.0, 3110.0], [2191.0, 3128.0], [2199.0, 3128.0], [2207.0, 3117.0], [2303.0, 3068.0], [2247.0, 3118.0], [2255.0, 3085.0], [2263.0, 3074.0], [2271.0, 3092.0], [2295.0, 3085.0], [2287.0, 3089.0], [2279.0, 3102.0], [2311.0, 2734.0], [2407.0, 2137.0], [2335.0, 2716.0], [2327.0, 2719.0], [2367.0, 2683.0], [2359.0, 2697.0], [2351.0, 2707.0], [2343.0, 2708.0], [2399.0, 2653.0], [2391.0, 2663.0], [2383.0, 2662.0], [2375.0, 2679.0], [2679.0, 2679.0], [2671.0, 2616.0], [2663.0, 2622.0], [2583.0, 2126.0], [2695.0, 2645.0], [2751.0, 1833.75], [2703.0, 2639.0], [2711.0, 2637.0], [2719.0, 2630.0], [2743.0, 2608.0], [2735.0, 2603.0], [2727.0, 2621.0], [2815.0, 2089.0], [2759.0, 2151.0], [2767.0, 2131.0], [2775.0, 2136.0], [2807.0, 2093.0], [2799.0, 2101.0], [2791.0, 2116.0], [2831.0, 2280.0], [2847.0, 2268.0], [2919.0, 2205.0], [2839.0, 2273.0], [2823.0, 2085.0], [2895.0, 2222.0], [2887.0, 2239.0], [2871.0, 2255.0], [2863.0, 2252.0], [2855.0, 2268.0], [3047.0, 1220.0], [3095.0, 215.0], [3135.0, 2101.0], [3175.0, 1745.0], [3159.0, 1766.0], [3167.0, 1260.0], [3143.0, 2097.0], [3151.0, 1772.0], [3231.0, 1673.0], [3295.0, 1369.8], [3287.0, 1602.0], [3279.0, 1117.0], [3223.0, 1696.0], [3207.0, 1726.5], [3263.0, 1127.0], [3255.0, 1637.0], [3247.0, 1643.0], [3303.0, 1726.0], [3311.0, 1717.0], [3327.0, 1052.5], [3359.0, 774.5], [3455.0, 1088.0], [3335.0, 720.5], [3351.0, 1687.0909090909092], [3383.0, 625.6666666666666], [3375.0, 547.25], [3367.0, 1650.0], [3583.0, 1098.0], [3511.0, 1095.0], [3471.0, 1093.0], [3607.0, 943.5], [3687.0, 1261.0], [3615.0, 1198.0], [3695.0, 1243.0], [3599.0, 1159.0], [3591.0, 1233.0], [3647.0, 1146.0], [3639.0, 1165.0], [3655.0, 1134.0], [3663.0, 1123.0], [3671.0, 1113.0], [3679.0, 1267.0], [3711.0, 1216.0], [3623.0, 1186.0], [3631.0, 1172.0], [3719.0, 1212.0], [3775.0, 1125.5], [3839.0, 665.0], [3783.0, 1111.0], [3759.0, 1146.0], [3751.0, 1156.0], [3743.0, 1463.6666666666667], [3727.0, 1197.0], [3815.0, 1137.0], [3951.0, 733.0], [3887.0, 673.0], [3903.0, 1131.0], [3927.0, 794.0], [3919.0, 1639.0], [4087.0, 999.0], [4071.0, 916.5714285714286], [4047.0, 987.1666666666667], [3983.0, 2143.0], [3991.0, 1635.0], [3999.0, 1751.2], [4015.0, 707.0], [4023.0, 1132.0], [4055.0, 1039.5], [4063.0, 672.3333333333334], [4110.0, 901.25], [4158.0, 741.0], [4111.0, 874.5]], "isOverall": false, "label": "JDBC Request 1", "isController": false}, {"data": [[2061.9151999999935, 2309.9655999999995]], "isOverall": false, "label": "JDBC Request 1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4187.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.69987062E12, "maxY": 8002.533333333334, "series": [{"data": [[1.69987068E12, 8002.533333333334], [1.69987062E12, 6538.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69987068E12, 0.0], [1.69987062E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69987068E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 775.9832713754654, "minX": 1.69987062E12, "maxY": 3041.166863555824, "series": [{"data": [[1.69987068E12, 3041.166863555824], [1.69987062E12, 775.9832713754654]], "isOverall": false, "label": "JDBC Request 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69987068E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69987062E12, "maxY": 15.019826517967822, "series": [{"data": [[1.69987068E12, 0.0], [1.69987062E12, 15.019826517967822]], "isOverall": false, "label": "JDBC Request 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69987068E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 775.6710037174731, "minX": 1.69987062E12, "maxY": 3041.1553455404614, "series": [{"data": [[1.69987068E12, 3041.1553455404614], [1.69987062E12, 775.6710037174731]], "isOverall": false, "label": "JDBC Request 1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69987068E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.69987062E12, "maxY": 720.0, "series": [{"data": [[1.69987062E12, 720.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69987062E12, 254.40000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69987062E12, 714.7]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69987062E12, 263.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69987062E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69987062E12, 162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69987062E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 62.0, "minX": 72.0, "maxY": 4090.0, "series": [{"data": [[308.0, 62.0], [82.0, 213.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1181.0, 3093.0], [72.0, 4090.0], [308.0, 164.5], [1282.0, 3695.5], [782.0, 1059.0], [851.0, 2112.0], [442.0, 746.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1282.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 72.0, "maxY": 213.0, "series": [{"data": [[308.0, 62.0], [82.0, 213.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1181.0, 0.0], [72.0, 0.0], [308.0, 0.0], [1282.0, 0.0], [782.0, 0.0], [851.0, 0.0], [442.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1282.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69987062E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69987062E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69987062E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69987062E12, "maxY": 56.43333333333333, "series": [{"data": [[1.69987062E12, 2.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69987068E12, 56.43333333333333], [1.69987062E12, 24.366666666666667]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69987068E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69987062E12, "maxY": 56.43333333333333, "series": [{"data": [[1.69987068E12, 56.43333333333333], [1.69987062E12, 24.366666666666667]], "isOverall": false, "label": "JDBC Request 1-failure", "isController": false}, {"data": [[1.69987062E12, 2.533333333333333]], "isOverall": false, "label": "JDBC Request 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69987068E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69987062E12, "maxY": 56.43333333333333, "series": [{"data": [[1.69987062E12, 2.533333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69987068E12, 56.43333333333333], [1.69987062E12, 24.366666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69987068E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

