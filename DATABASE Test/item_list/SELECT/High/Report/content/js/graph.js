/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3636.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 3.0], [2.0, 3.0], [2.1, 4.0], [2.2, 4.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 6.0], [2.7, 7.0], [2.8, 7.0], [2.9, 8.0], [3.0, 8.0], [3.1, 9.0], [3.2, 9.0], [3.3, 10.0], [3.4, 10.0], [3.5, 11.0], [3.6, 11.0], [3.7, 11.0], [3.8, 11.0], [3.9, 12.0], [4.0, 12.0], [4.1, 13.0], [4.2, 16.0], [4.3, 19.0], [4.4, 25.0], [4.5, 27.0], [4.6, 30.0], [4.7, 34.0], [4.8, 38.0], [4.9, 39.0], [5.0, 41.0], [5.1, 43.0], [5.2, 45.0], [5.3, 49.0], [5.4, 53.0], [5.5, 54.0], [5.6, 55.0], [5.7, 57.0], [5.8, 58.0], [5.9, 60.0], [6.0, 65.0], [6.1, 70.0], [6.2, 72.0], [6.3, 83.0], [6.4, 87.0], [6.5, 94.0], [6.6, 100.0], [6.7, 102.0], [6.8, 103.0], [6.9, 104.0], [7.0, 107.0], [7.1, 109.0], [7.2, 111.0], [7.3, 114.0], [7.4, 115.0], [7.5, 116.0], [7.6, 117.0], [7.7, 118.0], [7.8, 119.0], [7.9, 120.0], [8.0, 121.0], [8.1, 122.0], [8.2, 124.0], [8.3, 125.0], [8.4, 126.0], [8.5, 128.0], [8.6, 130.0], [8.7, 131.0], [8.8, 134.0], [8.9, 135.0], [9.0, 135.0], [9.1, 136.0], [9.2, 139.0], [9.3, 142.0], [9.4, 144.0], [9.5, 147.0], [9.6, 148.0], [9.7, 148.0], [9.8, 149.0], [9.9, 149.0], [10.0, 149.0], [10.1, 150.0], [10.2, 150.0], [10.3, 151.0], [10.4, 151.0], [10.5, 153.0], [10.6, 156.0], [10.7, 156.0], [10.8, 160.0], [10.9, 163.0], [11.0, 166.0], [11.1, 168.0], [11.2, 170.0], [11.3, 170.0], [11.4, 171.0], [11.5, 172.0], [11.6, 174.0], [11.7, 178.0], [11.8, 184.0], [11.9, 188.0], [12.0, 195.0], [12.1, 197.0], [12.2, 203.0], [12.3, 216.0], [12.4, 234.0], [12.5, 236.0], [12.6, 244.0], [12.7, 501.0], [12.8, 502.0], [12.9, 502.0], [13.0, 503.0], [13.1, 503.0], [13.2, 510.0], [13.3, 516.0], [13.4, 518.0], [13.5, 520.0], [13.6, 520.0], [13.7, 520.0], [13.8, 521.0], [13.9, 521.0], [14.0, 522.0], [14.1, 522.0], [14.2, 523.0], [14.3, 524.0], [14.4, 525.0], [14.5, 526.0], [14.6, 526.0], [14.7, 527.0], [14.8, 527.0], [14.9, 528.0], [15.0, 530.0], [15.1, 533.0], [15.2, 534.0], [15.3, 537.0], [15.4, 539.0], [15.5, 543.0], [15.6, 546.0], [15.7, 548.0], [15.8, 549.0], [15.9, 550.0], [16.0, 550.0], [16.1, 551.0], [16.2, 552.0], [16.3, 553.0], [16.4, 553.0], [16.5, 554.0], [16.6, 555.0], [16.7, 556.0], [16.8, 557.0], [16.9, 559.0], [17.0, 559.0], [17.1, 560.0], [17.2, 560.0], [17.3, 561.0], [17.4, 561.0], [17.5, 561.0], [17.6, 562.0], [17.7, 562.0], [17.8, 562.0], [17.9, 563.0], [18.0, 563.0], [18.1, 565.0], [18.2, 566.0], [18.3, 568.0], [18.4, 570.0], [18.5, 571.0], [18.6, 573.0], [18.7, 574.0], [18.8, 575.0], [18.9, 576.0], [19.0, 576.0], [19.1, 577.0], [19.2, 578.0], [19.3, 579.0], [19.4, 579.0], [19.5, 580.0], [19.6, 580.0], [19.7, 581.0], [19.8, 582.0], [19.9, 582.0], [20.0, 583.0], [20.1, 584.0], [20.2, 585.0], [20.3, 586.0], [20.4, 587.0], [20.5, 590.0], [20.6, 592.0], [20.7, 592.0], [20.8, 593.0], [20.9, 595.0], [21.0, 596.0], [21.1, 596.0], [21.2, 597.0], [21.3, 598.0], [21.4, 599.0], [21.5, 599.0], [21.6, 600.0], [21.7, 601.0], [21.8, 602.0], [21.9, 603.0], [22.0, 604.0], [22.1, 604.0], [22.2, 605.0], [22.3, 605.0], [22.4, 605.0], [22.5, 605.0], [22.6, 606.0], [22.7, 606.0], [22.8, 606.0], [22.9, 607.0], [23.0, 608.0], [23.1, 608.0], [23.2, 610.0], [23.3, 613.0], [23.4, 616.0], [23.5, 617.0], [23.6, 619.0], [23.7, 621.0], [23.8, 623.0], [23.9, 625.0], [24.0, 627.0], [24.1, 629.0], [24.2, 631.0], [24.3, 632.0], [24.4, 634.0], [24.5, 636.0], [24.6, 638.0], [24.7, 645.0], [24.8, 648.0], [24.9, 651.0], [25.0, 653.0], [25.1, 656.0], [25.2, 658.0], [25.3, 661.0], [25.4, 661.0], [25.5, 663.0], [25.6, 664.0], [25.7, 666.0], [25.8, 669.0], [25.9, 672.0], [26.0, 674.0], [26.1, 674.0], [26.2, 676.0], [26.3, 676.0], [26.4, 677.0], [26.5, 677.0], [26.6, 677.0], [26.7, 678.0], [26.8, 678.0], [26.9, 678.0], [27.0, 680.0], [27.1, 681.0], [27.2, 681.0], [27.3, 682.0], [27.4, 682.0], [27.5, 683.0], [27.6, 686.0], [27.7, 687.0], [27.8, 688.0], [27.9, 690.0], [28.0, 691.0], [28.1, 692.0], [28.2, 692.0], [28.3, 693.0], [28.4, 694.0], [28.5, 695.0], [28.6, 702.0], [28.7, 703.0], [28.8, 703.0], [28.9, 705.0], [29.0, 712.0], [29.1, 722.0], [29.2, 728.0], [29.3, 733.0], [29.4, 742.0], [29.5, 748.0], [29.6, 752.0], [29.7, 754.0], [29.8, 756.0], [29.9, 760.0], [30.0, 768.0], [30.1, 787.0], [30.2, 793.0], [30.3, 794.0], [30.4, 796.0], [30.5, 798.0], [30.6, 799.0], [30.7, 800.0], [30.8, 801.0], [30.9, 802.0], [31.0, 804.0], [31.1, 806.0], [31.2, 807.0], [31.3, 808.0], [31.4, 810.0], [31.5, 818.0], [31.6, 822.0], [31.7, 847.0], [31.8, 849.0], [31.9, 850.0], [32.0, 853.0], [32.1, 854.0], [32.2, 858.0], [32.3, 861.0], [32.4, 882.0], [32.5, 888.0], [32.6, 892.0], [32.7, 911.0], [32.8, 913.0], [32.9, 914.0], [33.0, 915.0], [33.1, 915.0], [33.2, 917.0], [33.3, 918.0], [33.4, 919.0], [33.5, 920.0], [33.6, 921.0], [33.7, 923.0], [33.8, 925.0], [33.9, 948.0], [34.0, 951.0], [34.1, 954.0], [34.2, 956.0], [34.3, 958.0], [34.4, 962.0], [34.5, 1009.0], [34.6, 1013.0], [34.7, 1017.0], [34.8, 1019.0], [34.9, 1020.0], [35.0, 1021.0], [35.1, 1022.0], [35.2, 1022.0], [35.3, 1023.0], [35.4, 1023.0], [35.5, 1023.0], [35.6, 1024.0], [35.7, 1024.0], [35.8, 1024.0], [35.9, 1025.0], [36.0, 1025.0], [36.1, 1025.0], [36.2, 1025.0], [36.3, 1026.0], [36.4, 1026.0], [36.5, 1026.0], [36.6, 1026.0], [36.7, 1027.0], [36.8, 1027.0], [36.9, 1027.0], [37.0, 1027.0], [37.1, 1028.0], [37.2, 1028.0], [37.3, 1028.0], [37.4, 1029.0], [37.5, 1029.0], [37.6, 1029.0], [37.7, 1029.0], [37.8, 1029.0], [37.9, 1030.0], [38.0, 1030.0], [38.1, 1030.0], [38.2, 1031.0], [38.3, 1031.0], [38.4, 1031.0], [38.5, 1032.0], [38.6, 1032.0], [38.7, 1033.0], [38.8, 1034.0], [38.9, 1034.0], [39.0, 1035.0], [39.1, 1038.0], [39.2, 1039.0], [39.3, 1040.0], [39.4, 1042.0], [39.5, 1043.0], [39.6, 1043.0], [39.7, 1044.0], [39.8, 1045.0], [39.9, 1046.0], [40.0, 1047.0], [40.1, 1047.0], [40.2, 1048.0], [40.3, 1048.0], [40.4, 1048.0], [40.5, 1048.0], [40.6, 1049.0], [40.7, 1051.0], [40.8, 1052.0], [40.9, 1054.0], [41.0, 1054.0], [41.1, 1055.0], [41.2, 1055.0], [41.3, 1055.0], [41.4, 1055.0], [41.5, 1055.0], [41.6, 1056.0], [41.7, 1056.0], [41.8, 1057.0], [41.9, 1057.0], [42.0, 1058.0], [42.1, 1058.0], [42.2, 1059.0], [42.3, 1059.0], [42.4, 1060.0], [42.5, 1061.0], [42.6, 1061.0], [42.7, 1061.0], [42.8, 1062.0], [42.9, 1062.0], [43.0, 1062.0], [43.1, 1062.0], [43.2, 1063.0], [43.3, 1064.0], [43.4, 1064.0], [43.5, 1065.0], [43.6, 1065.0], [43.7, 1066.0], [43.8, 1067.0], [43.9, 1067.0], [44.0, 1067.0], [44.1, 1068.0], [44.2, 1068.0], [44.3, 1068.0], [44.4, 1068.0], [44.5, 1069.0], [44.6, 1069.0], [44.7, 1069.0], [44.8, 1070.0], [44.9, 1070.0], [45.0, 1070.0], [45.1, 1071.0], [45.2, 1071.0], [45.3, 1071.0], [45.4, 1072.0], [45.5, 1073.0], [45.6, 1073.0], [45.7, 1073.0], [45.8, 1073.0], [45.9, 1073.0], [46.0, 1073.0], [46.1, 1074.0], [46.2, 1074.0], [46.3, 1075.0], [46.4, 1075.0], [46.5, 1076.0], [46.6, 1076.0], [46.7, 1077.0], [46.8, 1077.0], [46.9, 1077.0], [47.0, 1079.0], [47.1, 1081.0], [47.2, 1081.0], [47.3, 1081.0], [47.4, 1082.0], [47.5, 1082.0], [47.6, 1083.0], [47.7, 1084.0], [47.8, 1084.0], [47.9, 1085.0], [48.0, 1085.0], [48.1, 1086.0], [48.2, 1087.0], [48.3, 1089.0], [48.4, 1089.0], [48.5, 1090.0], [48.6, 1091.0], [48.7, 1093.0], [48.8, 1095.0], [48.9, 1096.0], [49.0, 1097.0], [49.1, 1100.0], [49.2, 1106.0], [49.3, 1110.0], [49.4, 1115.0], [49.5, 1116.0], [49.6, 1117.0], [49.7, 1118.0], [49.8, 1119.0], [49.9, 1121.0], [50.0, 1123.0], [50.1, 1123.0], [50.2, 1124.0], [50.3, 1124.0], [50.4, 1126.0], [50.5, 1128.0], [50.6, 1130.0], [50.7, 1131.0], [50.8, 1132.0], [50.9, 1133.0], [51.0, 1134.0], [51.1, 1136.0], [51.2, 1140.0], [51.3, 1141.0], [51.4, 1143.0], [51.5, 1144.0], [51.6, 1148.0], [51.7, 1151.0], [51.8, 1151.0], [51.9, 1156.0], [52.0, 1175.0], [52.1, 1178.0], [52.2, 1180.0], [52.3, 1470.0], [52.4, 1519.0], [52.5, 1521.0], [52.6, 1523.0], [52.7, 1525.0], [52.8, 1526.0], [52.9, 1528.0], [53.0, 1529.0], [53.1, 1529.0], [53.2, 1530.0], [53.3, 1531.0], [53.4, 1531.0], [53.5, 1532.0], [53.6, 1532.0], [53.7, 1533.0], [53.8, 1533.0], [53.9, 1535.0], [54.0, 1541.0], [54.1, 1574.0], [54.2, 1575.0], [54.3, 1576.0], [54.4, 1576.0], [54.5, 1577.0], [54.6, 1578.0], [54.7, 1579.0], [54.8, 1580.0], [54.9, 1581.0], [55.0, 1582.0], [55.1, 1584.0], [55.2, 1587.0], [55.3, 1587.0], [55.4, 1591.0], [55.5, 1591.0], [55.6, 1592.0], [55.7, 1593.0], [55.8, 1593.0], [55.9, 1594.0], [56.0, 1595.0], [56.1, 1595.0], [56.2, 1595.0], [56.3, 1596.0], [56.4, 1596.0], [56.5, 1597.0], [56.6, 1597.0], [56.7, 1598.0], [56.8, 1599.0], [56.9, 1600.0], [57.0, 1601.0], [57.1, 1602.0], [57.2, 1602.0], [57.3, 1602.0], [57.4, 1603.0], [57.5, 1603.0], [57.6, 1603.0], [57.7, 1604.0], [57.8, 1604.0], [57.9, 1604.0], [58.0, 1605.0], [58.1, 1605.0], [58.2, 1605.0], [58.3, 1606.0], [58.4, 1607.0], [58.5, 1607.0], [58.6, 1608.0], [58.7, 1609.0], [58.8, 1610.0], [58.9, 1611.0], [59.0, 1613.0], [59.1, 1614.0], [59.2, 1615.0], [59.3, 1615.0], [59.4, 1615.0], [59.5, 1616.0], [59.6, 1618.0], [59.7, 1619.0], [59.8, 1621.0], [59.9, 1622.0], [60.0, 1624.0], [60.1, 1625.0], [60.2, 1626.0], [60.3, 1626.0], [60.4, 1627.0], [60.5, 1630.0], [60.6, 1633.0], [60.7, 1635.0], [60.8, 1636.0], [60.9, 1637.0], [61.0, 1637.0], [61.1, 1638.0], [61.2, 1640.0], [61.3, 1642.0], [61.4, 1644.0], [61.5, 1647.0], [61.6, 1650.0], [61.7, 1658.0], [61.8, 1659.0], [61.9, 1662.0], [62.0, 1669.0], [62.1, 1671.0], [62.2, 1672.0], [62.3, 1673.0], [62.4, 1675.0], [62.5, 1682.0], [62.6, 1684.0], [62.7, 1690.0], [62.8, 1702.0], [62.9, 1702.0], [63.0, 1703.0], [63.1, 1705.0], [63.2, 1706.0], [63.3, 1707.0], [63.4, 1712.0], [63.5, 1716.0], [63.6, 1718.0], [63.7, 1721.0], [63.8, 1723.0], [63.9, 1725.0], [64.0, 1727.0], [64.1, 1729.0], [64.2, 1730.0], [64.3, 1730.0], [64.4, 1731.0], [64.5, 1731.0], [64.6, 1731.0], [64.7, 1732.0], [64.8, 1732.0], [64.9, 1733.0], [65.0, 1734.0], [65.1, 1735.0], [65.2, 1737.0], [65.3, 1740.0], [65.4, 1743.0], [65.5, 1746.0], [65.6, 1748.0], [65.7, 1749.0], [65.8, 1754.0], [65.9, 1755.0], [66.0, 1763.0], [66.1, 1771.0], [66.2, 1772.0], [66.3, 1776.0], [66.4, 1777.0], [66.5, 1782.0], [66.6, 2049.0], [66.7, 2085.0], [66.8, 2092.0], [66.9, 2096.0], [67.0, 2101.0], [67.1, 2104.0], [67.2, 2105.0], [67.3, 2107.0], [67.4, 2108.0], [67.5, 2112.0], [67.6, 2113.0], [67.7, 2114.0], [67.8, 2116.0], [67.9, 2117.0], [68.0, 2121.0], [68.1, 2123.0], [68.2, 2125.0], [68.3, 2128.0], [68.4, 2130.0], [68.5, 2131.0], [68.6, 2132.0], [68.7, 2135.0], [68.8, 2139.0], [68.9, 2141.0], [69.0, 2142.0], [69.1, 2143.0], [69.2, 2144.0], [69.3, 2146.0], [69.4, 2148.0], [69.5, 2149.0], [69.6, 2152.0], [69.7, 2152.0], [69.8, 2153.0], [69.9, 2155.0], [70.0, 2155.0], [70.1, 2155.0], [70.2, 2155.0], [70.3, 2156.0], [70.4, 2156.0], [70.5, 2156.0], [70.6, 2157.0], [70.7, 2159.0], [70.8, 2160.0], [70.9, 2161.0], [71.0, 2162.0], [71.1, 2163.0], [71.2, 2165.0], [71.3, 2166.0], [71.4, 2168.0], [71.5, 2171.0], [71.6, 2173.0], [71.7, 2176.0], [71.8, 2178.0], [71.9, 2179.0], [72.0, 2179.0], [72.1, 2179.0], [72.2, 2179.0], [72.3, 2179.0], [72.4, 2180.0], [72.5, 2180.0], [72.6, 2181.0], [72.7, 2183.0], [72.8, 2184.0], [72.9, 2185.0], [73.0, 2186.0], [73.1, 2187.0], [73.2, 2187.0], [73.3, 2188.0], [73.4, 2189.0], [73.5, 2190.0], [73.6, 2191.0], [73.7, 2192.0], [73.8, 2193.0], [73.9, 2195.0], [74.0, 2197.0], [74.1, 2198.0], [74.2, 2202.0], [74.3, 2205.0], [74.4, 2207.0], [74.5, 2209.0], [74.6, 2209.0], [74.7, 2211.0], [74.8, 2212.0], [74.9, 2215.0], [75.0, 2217.0], [75.1, 2218.0], [75.2, 2220.0], [75.3, 2225.0], [75.4, 2228.0], [75.5, 2230.0], [75.6, 2232.0], [75.7, 2235.0], [75.8, 2238.0], [75.9, 2240.0], [76.0, 2241.0], [76.1, 2243.0], [76.2, 2245.0], [76.3, 2246.0], [76.4, 2250.0], [76.5, 2256.0], [76.6, 2259.0], [76.7, 2267.0], [76.8, 2274.0], [76.9, 2279.0], [77.0, 2285.0], [77.1, 2301.0], [77.2, 2312.0], [77.3, 2313.0], [77.4, 2314.0], [77.5, 2317.0], [77.6, 2318.0], [77.7, 2584.0], [77.8, 2586.0], [77.9, 2588.0], [78.0, 2588.0], [78.1, 2590.0], [78.2, 2591.0], [78.3, 2593.0], [78.4, 2594.0], [78.5, 2595.0], [78.6, 2597.0], [78.7, 2598.0], [78.8, 2599.0], [78.9, 2600.0], [79.0, 2600.0], [79.1, 2602.0], [79.2, 2602.0], [79.3, 2603.0], [79.4, 2603.0], [79.5, 2604.0], [79.6, 2605.0], [79.7, 2605.0], [79.8, 2606.0], [79.9, 2607.0], [80.0, 2608.0], [80.1, 2609.0], [80.2, 2609.0], [80.3, 2611.0], [80.4, 2612.0], [80.5, 2615.0], [80.6, 2617.0], [80.7, 2622.0], [80.8, 2623.0], [80.9, 2624.0], [81.0, 2625.0], [81.1, 2625.0], [81.2, 2626.0], [81.3, 2627.0], [81.4, 2627.0], [81.5, 2628.0], [81.6, 2629.0], [81.7, 2629.0], [81.8, 2629.0], [81.9, 2630.0], [82.0, 2630.0], [82.1, 2631.0], [82.2, 2631.0], [82.3, 2632.0], [82.4, 2632.0], [82.5, 2632.0], [82.6, 2633.0], [82.7, 2634.0], [82.8, 2634.0], [82.9, 2634.0], [83.0, 2635.0], [83.1, 2635.0], [83.2, 2636.0], [83.3, 2637.0], [83.4, 2638.0], [83.5, 2638.0], [83.6, 2639.0], [83.7, 2639.0], [83.8, 2641.0], [83.9, 2641.0], [84.0, 2642.0], [84.1, 2643.0], [84.2, 2643.0], [84.3, 2644.0], [84.4, 2644.0], [84.5, 2645.0], [84.6, 2646.0], [84.7, 2648.0], [84.8, 2649.0], [84.9, 2651.0], [85.0, 2652.0], [85.1, 2653.0], [85.2, 2656.0], [85.3, 2658.0], [85.4, 2659.0], [85.5, 2662.0], [85.6, 2664.0], [85.7, 2665.0], [85.8, 2667.0], [85.9, 2668.0], [86.0, 2672.0], [86.1, 2672.0], [86.2, 2673.0], [86.3, 2674.0], [86.4, 2675.0], [86.5, 2675.0], [86.6, 2676.0], [86.7, 2676.0], [86.8, 2677.0], [86.9, 2678.0], [87.0, 2678.0], [87.1, 2679.0], [87.2, 2681.0], [87.3, 2682.0], [87.4, 2683.0], [87.5, 2684.0], [87.6, 2686.0], [87.7, 2688.0], [87.8, 2691.0], [87.9, 2693.0], [88.0, 2695.0], [88.1, 2697.0], [88.2, 2698.0], [88.3, 2700.0], [88.4, 2701.0], [88.5, 2704.0], [88.6, 2707.0], [88.7, 2709.0], [88.8, 2715.0], [88.9, 2719.0], [89.0, 2721.0], [89.1, 2724.0], [89.2, 2726.0], [89.3, 2730.0], [89.4, 2733.0], [89.5, 2735.0], [89.6, 2736.0], [89.7, 2737.0], [89.8, 2741.0], [89.9, 2742.0], [90.0, 2744.0], [90.1, 2749.0], [90.2, 2750.0], [90.3, 2754.0], [90.4, 2757.0], [90.5, 2764.0], [90.6, 3057.0], [90.7, 3061.0], [90.8, 3066.0], [90.9, 3069.0], [91.0, 3070.0], [91.1, 3071.0], [91.2, 3072.0], [91.3, 3073.0], [91.4, 3073.0], [91.5, 3074.0], [91.6, 3074.0], [91.7, 3075.0], [91.8, 3075.0], [91.9, 3075.0], [92.0, 3076.0], [92.1, 3077.0], [92.2, 3078.0], [92.3, 3079.0], [92.4, 3079.0], [92.5, 3080.0], [92.6, 3080.0], [92.7, 3081.0], [92.8, 3082.0], [92.9, 3082.0], [93.0, 3083.0], [93.1, 3084.0], [93.2, 3084.0], [93.3, 3085.0], [93.4, 3085.0], [93.5, 3086.0], [93.6, 3086.0], [93.7, 3087.0], [93.8, 3088.0], [93.9, 3089.0], [94.0, 3090.0], [94.1, 3090.0], [94.2, 3091.0], [94.3, 3092.0], [94.4, 3092.0], [94.5, 3094.0], [94.6, 3095.0], [94.7, 3096.0], [94.8, 3097.0], [94.9, 3097.0], [95.0, 3098.0], [95.1, 3100.0], [95.2, 3101.0], [95.3, 3102.0], [95.4, 3102.0], [95.5, 3103.0], [95.6, 3104.0], [95.7, 3105.0], [95.8, 3106.0], [95.9, 3106.0], [96.0, 3107.0], [96.1, 3109.0], [96.2, 3109.0], [96.3, 3111.0], [96.4, 3111.0], [96.5, 3112.0], [96.6, 3113.0], [96.7, 3114.0], [96.8, 3116.0], [96.9, 3117.0], [97.0, 3118.0], [97.1, 3118.0], [97.2, 3120.0], [97.3, 3121.0], [97.4, 3122.0], [97.5, 3123.0], [97.6, 3125.0], [97.7, 3126.0], [97.8, 3127.0], [97.9, 3128.0], [98.0, 3129.0], [98.1, 3131.0], [98.2, 3132.0], [98.3, 3134.0], [98.4, 3135.0], [98.5, 3136.0], [98.6, 3140.0], [98.7, 3145.0], [98.8, 3587.0], [98.9, 3623.0], [99.0, 3627.0], [99.1, 3628.0], [99.2, 3629.0], [99.3, 3630.0], [99.4, 3630.0], [99.5, 3631.0], [99.6, 3632.0], [99.7, 3632.0], [99.8, 3633.0], [99.9, 3634.0], [100.0, 3636.0]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 731.0, "series": [{"data": [[0.0, 330.0], [600.0, 351.0], [700.0, 105.0], [800.0, 99.0], [900.0, 92.0], [1000.0, 731.0], [1100.0, 157.0], [1300.0, 3.0], [1400.0, 5.0], [1500.0, 222.0], [100.0, 278.0], [1600.0, 294.0], [1700.0, 191.0], [2000.0, 20.0], [2100.0, 361.0], [2200.0, 146.0], [2300.0, 27.0], [2500.0, 63.0], [2600.0, 470.0], [2700.0, 115.0], [3000.0, 225.0], [3100.0, 185.0], [200.0, 24.0], [3500.0, 4.0], [3600.0, 57.0], [300.0, 1.0], [500.0, 444.0]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 152.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4848.0, "series": [{"data": [[0.0, 152.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4848.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1992.9890000000023, "minX": 1.69988502E12, "maxY": 1992.9890000000023, "series": [{"data": [[1.69988502E12, 1992.9890000000023]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988502E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.5, "minX": 27.0, "maxY": 3632.0, "series": [{"data": [[27.0, 39.0], [55.0, 3630.0], [58.0, 3632.0], [61.0, 3627.406779661017], [63.0, 3129.0], [62.0, 3129.0], [67.0, 3131.0], [66.0, 3130.0], [65.0, 3131.0], [64.0, 3132.0], [71.0, 3134.0], [70.0, 3132.0], [69.0, 3132.0], [68.0, 3129.0], [75.0, 3128.0], [74.0, 3127.0], [73.0, 3125.0], [72.0, 3125.0], [79.0, 3123.0], [78.0, 3129.0], [77.0, 3126.0], [76.0, 3122.0], [83.0, 3126.0], [82.0, 3126.0], [81.0, 3125.0], [80.0, 3127.0], [87.0, 3121.0], [86.0, 3121.0], [85.0, 3123.0], [84.0, 3122.0], [91.0, 3118.0], [90.0, 3118.0], [89.0, 3119.0], [88.0, 3117.0], [95.0, 3122.0], [94.0, 3116.0], [93.0, 3117.0], [92.0, 3119.0], [99.0, 3113.0], [98.0, 3115.0], [97.0, 3121.0], [96.0, 3118.0], [103.0, 3116.0], [102.0, 3114.0], [101.0, 3116.0], [100.0, 3118.0], [107.0, 3111.0], [106.0, 3111.0], [105.0, 3117.0], [104.0, 3116.0], [111.0, 3110.0], [110.0, 3106.0], [109.0, 3106.0], [108.0, 3114.0], [115.0, 3108.0], [114.0, 3105.0], [113.0, 3108.0], [112.0, 3105.0], [119.0, 3106.0], [118.0, 3109.0], [117.0, 3105.0], [116.0, 3109.0], [123.0, 3105.0], [122.0, 3102.0], [121.0, 3111.0], [120.0, 3105.0], [127.0, 3103.0], [126.0, 3109.0], [125.0, 3107.0], [124.0, 3103.0], [135.0, 3104.0], [134.0, 3103.0], [133.0, 3104.0], [132.0, 3104.0], [131.0, 3104.0], [130.0, 3103.0], [129.0, 3107.0], [128.0, 3107.0], [143.0, 3145.0], [142.0, 3135.0], [141.0, 3144.0], [140.0, 3134.0], [139.0, 3133.0], [138.0, 3135.0], [137.0, 3142.0], [136.0, 3135.0], [151.0, 3143.0], [150.0, 3145.0], [149.0, 3140.0], [148.0, 3140.0], [147.0, 3146.0], [146.0, 3135.0], [145.0, 3135.0], [144.0, 3139.0], [159.0, 3134.0], [158.0, 3133.0], [157.0, 3132.0], [156.0, 3128.0], [155.0, 3149.0], [154.0, 3147.0], [153.0, 3120.0], [152.0, 3120.0], [167.0, 3130.0], [166.0, 3126.0], [165.0, 3147.0], [164.0, 3128.0], [163.0, 3124.0], [162.0, 3126.0], [161.0, 3136.0], [160.0, 3136.0], [175.0, 3134.0], [174.0, 3126.0], [173.0, 3126.0], [172.0, 3133.0], [171.0, 3132.0], [170.0, 3123.0], [169.0, 3122.0], [168.0, 3129.0], [183.0, 3123.0], [182.0, 3137.0], [181.0, 3134.0], [180.0, 3133.0], [179.0, 3127.0], [178.0, 3128.0], [177.0, 3119.0], [176.0, 3126.0], [191.0, 3118.0], [190.0, 3112.0], [189.0, 3112.0], [188.0, 3117.0], [187.0, 3123.0], [186.0, 3113.0], [185.0, 3111.0], [184.0, 3121.0], [199.0, 3112.0], [198.0, 3111.0], [197.0, 3122.0], [196.0, 3112.0], [195.0, 3118.0], [194.0, 3119.0], [193.0, 3112.0], [192.0, 3117.0], [207.0, 3108.0], [206.0, 3120.0], [205.0, 3113.0], [204.0, 3106.0], [203.0, 3121.0], [202.0, 3108.0], [201.0, 3117.0], [200.0, 3111.0], [215.0, 3115.0], [214.0, 3109.0], [213.0, 3102.0], [212.0, 3117.0], [211.0, 3106.0], [210.0, 3113.0], [209.0, 3112.0], [208.0, 3113.0], [223.0, 3101.0], [222.0, 3102.0], [221.0, 3109.0], [220.0, 3109.0], [219.0, 3106.0], [218.0, 3104.0], [217.0, 3100.0], [216.0, 3109.0], [231.0, 3100.0], [230.0, 3106.0], [229.0, 3111.0], [228.0, 3107.0], [227.0, 3111.0], [226.0, 3102.0], [225.0, 3097.0], [224.0, 3111.0], [239.0, 3090.0], [238.0, 3088.0], [237.0, 3089.0], [236.0, 3102.0], [235.0, 3111.0], [234.0, 3102.0], [233.0, 3105.0], [232.0, 3114.0], [247.0, 3098.0], [246.0, 3099.0], [245.0, 3096.0], [244.0, 3100.0], [243.0, 3097.0], [242.0, 3101.0], [241.0, 3089.0], [240.0, 3090.0], [255.0, 150.28571428571428], [254.0, 3086.0], [253.0, 3098.0], [252.0, 3089.0], [251.0, 3097.0], [250.0, 3075.0], [249.0, 3087.0], [248.0, 3073.0], [259.0, 212.38888888888889], [269.0, 1506.8], [268.0, 187.25], [267.0, 1290.6666666666665], [266.0, 1421.2], [264.0, 642.625], [265.0, 284.25], [270.0, 203.72727272727272], [271.0, 1695.25], [261.0, 781.0], [260.0, 394.0], [256.0, 104.06818181818181], [263.0, 705.6666666666666], [262.0, 845.0], [258.0, 84.91304347826086], [257.0, 97.13888888888889], [286.0, 1618.0], [287.0, 1634.0], [284.0, 1297.4], [285.0, 8.5], [282.0, 1589.0], [283.0, 32.0], [281.0, 134.0], [280.0, 1607.8333333333335], [278.0, 107.0], [277.0, 1101.7777777777778], [276.0, 108.375], [275.0, 151.75], [273.0, 634.8333333333333], [274.0, 749.0], [272.0, 365.66666666666663], [279.0, 38.0], [302.0, 1623.0], [303.0, 1622.5], [301.0, 825.75], [300.0, 1353.0], [299.0, 44.25], [298.0, 83.5], [297.0, 1586.5], [296.0, 1078.3333333333335], [295.0, 32.166666666666664], [289.0, 1629.75], [291.0, 37.12499999999999], [290.0, 1634.0], [294.0, 1647.5], [293.0, 2133.6666666666665], [292.0, 545.3333333333334], [318.0, 102.0], [319.0, 2507.8], [317.0, 192.0], [316.0, 101.0], [315.0, 2121.6666666666665], [314.0, 197.0], [313.0, 1640.5], [312.0, 1094.0], [311.0, 2122.3333333333335], [305.0, 2130.3333333333335], [304.0, 158.0], [307.0, 203.0], [306.0, 1097.3333333333335], [310.0, 157.0], [309.0, 1642.5], [308.0, 2111.6666666666665], [334.0, 170.0], [332.0, 1319.0], [335.0, 2116.3333333333335], [333.0, 65.33333333333333], [330.0, 822.5], [331.0, 11.5], [329.0, 1634.5], [328.0, 1093.3333333333335], [327.0, 2121.3333333333335], [323.0, 1125.5], [322.0, 9.0], [321.0, 3077.0], [320.0, 1096.0], [326.0, 60.42857142857143], [324.0, 821.25], [325.0, 1038.6666666666667], [349.0, 885.25], [351.0, 149.0], [347.0, 919.25], [350.0, 1648.5], [348.0, 2105.6666666666665], [339.0, 1141.3333333333335], [337.0, 1140.6666666666665], [336.0, 3098.0], [338.0, 3103.0], [345.0, 2106.6666666666665], [344.0, 164.0], [343.0, 1623.0], [342.0, 1624.0], [340.0, 168.0], [341.0, 3085.0], [355.0, 1129.3333333333335], [360.0, 142.0], [367.0, 3090.0], [366.0, 3068.0], [365.0, 3088.0], [364.0, 3086.0], [362.0, 1904.6], [363.0, 3062.0], [361.0, 149.0], [359.0, 1615.5], [358.0, 152.33333333333334], [356.0, 883.75], [354.0, 1130.1666666666665], [352.0, 1130.0], [357.0, 1614.5], [353.0, 1617.0], [377.0, 3094.5], [371.0, 3091.0], [370.0, 3067.0], [369.0, 3066.0], [368.0, 3087.0], [399.0, 3072.0], [397.0, 3079.0], [394.0, 3078.0], [392.0, 3072.0], [386.0, 3071.0], [384.0, 3097.0], [404.0, 3078.0], [403.0, 3071.0], [402.0, 3082.0], [417.0, 3074.0], [441.0, 3079.0], [439.0, 3079.0], [445.0, 3084.0], [462.0, 2744.0], [463.0, 2758.0], [461.0, 2754.0], [460.0, 2736.0], [459.0, 2736.0], [458.0, 2782.0], [457.0, 2764.0], [456.0, 2733.0], [455.0, 2736.0], [449.0, 3077.984126984125], [451.0, 2736.0], [450.0, 2735.0], [454.0, 2757.0], [453.0, 2763.0], [452.0, 2736.0], [478.0, 2757.0], [479.0, 2719.0], [477.0, 2744.0], [476.0, 2742.0], [475.0, 2749.0], [474.0, 2741.0], [473.0, 2750.0], [472.0, 2751.0], [471.0, 2750.0], [465.0, 2754.0], [464.0, 2750.0], [467.0, 2774.0], [466.0, 2750.0], [470.0, 2755.0], [469.0, 2755.0], [468.0, 2750.0], [494.0, 2792.0], [495.0, 2742.0], [493.0, 2742.0], [492.0, 2732.0], [491.0, 2733.0], [490.0, 2761.0], [489.0, 2763.0], [488.0, 2721.0], [487.0, 2721.0], [481.0, 2753.0], [480.0, 2721.0], [483.0, 2714.0], [482.0, 2728.0], [486.0, 2749.0], [485.0, 2709.0], [484.0, 2743.0], [510.0, 2741.0], [511.0, 2723.0], [509.0, 2746.0], [508.0, 2728.0], [507.0, 2725.0], [506.0, 2733.0], [505.0, 2737.0], [504.0, 2734.0], [503.0, 2724.0], [497.0, 2769.0], [496.0, 2746.0], [499.0, 2743.0], [498.0, 2742.0], [502.0, 2732.0], [501.0, 2731.0], [500.0, 2730.0], [542.0, 1354.3333333333335], [532.0, 955.5714285714286], [536.0, 854.75], [518.0, 2737.0], [516.0, 2740.0], [514.0, 2735.0], [512.0, 2724.0], [526.0, 2725.0], [524.0, 2701.0], [522.0, 2701.0], [520.0, 2745.0], [538.0, 1683.5], [534.0, 971.0], [530.0, 1687.5], [528.0, 1707.5], [540.0, 1685.0], [574.0, 2709.0], [562.0, 1358.0], [558.0, 1682.0], [556.0, 2690.0], [554.0, 2684.0], [552.0, 2686.0], [572.0, 2707.0], [570.0, 2699.0], [568.0, 2709.0], [550.0, 2739.0], [548.0, 2698.0], [546.0, 2696.0], [544.0, 2720.0], [566.0, 2698.0], [564.0, 2722.0], [560.0, 2690.0], [604.0, 2711.0], [606.0, 2707.0], [602.0, 2687.0], [600.0, 2679.0], [598.0, 2680.0], [596.0, 2706.0], [594.0, 2684.0], [592.0, 2704.0], [590.0, 2683.0], [578.0, 2676.0], [576.0, 2747.0], [582.0, 2691.0], [580.0, 2676.0], [588.0, 2692.0], [586.0, 2701.0], [584.0, 2696.0], [636.0, 2643.0], [638.0, 2642.0], [634.0, 2674.0], [632.0, 2679.0], [630.0, 2676.0], [628.0, 2699.0], [626.0, 2702.0], [624.0, 2652.0], [622.0, 2651.0], [614.0, 2686.75], [608.0, 2675.0], [620.0, 2673.0], [618.0, 2681.0], [616.0, 2672.0], [668.0, 2675.0], [658.0, 2639.0], [660.0, 2657.0], [670.0, 2658.0], [656.0, 2660.0], [666.0, 2678.0], [664.0, 2649.0], [654.0, 2665.0], [642.0, 2651.0], [640.0, 2649.0], [646.0, 2643.0], [644.0, 2697.0], [652.0, 2672.0], [650.0, 2642.0], [648.0, 2682.0], [662.0, 2658.0], [700.0, 2637.0], [688.0, 2673.0], [690.0, 2636.0], [692.0, 2643.0], [702.0, 2643.0], [698.0, 2634.0], [696.0, 2637.0], [672.0, 2646.0], [674.0, 2652.0], [676.0, 2652.0], [678.0, 2663.0], [686.0, 2641.0], [684.0, 2653.0], [682.0, 2678.0], [680.0, 2665.0], [694.0, 2644.0], [710.0, 2653.0], [708.0, 2636.0], [706.0, 2648.0], [704.0, 2629.0], [788.0, 755.0], [792.0, 757.0], [790.0, 762.0], [786.0, 770.0], [796.0, 791.6], [798.0, 797.0], [812.0, 818.0], [810.0, 822.0], [826.0, 2624.0], [820.0, 2640.0], [860.0, 2638.0], [842.0, 2639.0], [988.0, 882.0], [986.0, 887.0], [990.0, 2325.0], [1020.0, 2312.0], [1008.0, 2267.0], [1010.0, 2313.0], [1012.0, 2314.0], [1022.0, 2311.0], [1018.0, 2312.0], [1016.0, 2313.0], [992.0, 2318.0], [994.0, 2281.0], [996.0, 2301.0], [998.0, 2280.0], [1006.0, 2314.0], [1004.0, 2315.0], [1002.0, 2316.0], [1000.0, 2317.0], [1014.0, 2314.0], [1036.0, 1578.0], [1080.0, 137.5], [1068.0, 148.33333333333334], [1072.0, 142.0], [1032.0, 1358.0], [1028.0, 2263.0], [1024.0, 2246.0], [1048.0, 962.0], [1044.0, 1577.0], [1040.0, 1356.0], [1120.0, 56.0], [1124.0, 58.0], [1092.0, 136.0], [1116.0, 1145.0], [1112.0, 135.0], [1104.0, 135.5], [1468.0, 556.0], [1464.0, 554.4285714285714], [1500.0, 19.0], [1484.0, 338.0], [1596.0, 1763.0], [1568.0, 2285.0], [1592.0, 2276.0], [1564.0, 1773.0], [1560.0, 1781.0], [1556.0, 1776.0], [1552.0, 1778.0], [1580.0, 1770.0], [1576.0, 1772.0], [1572.0, 1776.0], [1624.0, 1732.0], [1628.0, 879.0], [1616.0, 890.5], [1620.0, 1731.0], [1612.0, 1733.0], [1608.0, 1740.0], [1604.0, 1738.0], [1600.0, 1742.0], [1720.0, 31.0], [1704.0, 30.0], [1712.0, 1746.0], [1740.0, 32.0], [1736.0, 1746.0], [1816.0, 597.6666666666666], [1920.0, 42.0], [2168.0, 656.0], [2160.0, 648.0], [2288.0, 571.0], [2208.0, 63.0], [2216.0, 1712.625], [2232.0, 1860.5], [2248.0, 1601.0], [2240.0, 1807.6], [2256.0, 1086.0], [2264.0, 1084.0], [2296.0, 1073.0], [2280.0, 1074.0], [2272.0, 1084.0], [2312.0, 1081.5], [2416.0, 1072.0], [2400.0, 1089.0], [2408.0, 793.0], [2304.0, 1064.0], [2320.0, 1070.0], [2328.0, 1068.0], [2360.0, 1054.0], [2352.0, 1055.0], [2344.0, 1059.0], [2336.0, 1070.0], [2368.0, 1053.0], [2376.0, 1048.0], [2384.0, 1048.0], [2392.0, 1048.0], [2424.0, 1078.0], [2448.0, 1057.0], [2480.0, 1090.0], [2432.0, 1077.0], [2472.0, 1054.0], [2464.0, 1055.0], [2456.0, 1056.0], [2584.0, 722.0], [2648.0, 94.0], [2808.0, 1069.5], [2768.0, 1078.0], [2760.0, 1078.5], [2752.0, 1065.0], [2744.0, 1075.0], [2736.0, 1086.0], [2728.0, 1084.0], [2720.0, 1094.0], [2800.0, 1063.0], [2784.0, 1062.0], [2776.0, 1068.0], [2840.0, 1061.0], [2888.0, 1044.0], [2872.0, 901.0], [2904.0, 1035.0], [2896.0, 1052.0], [2880.0, 1051.0], [2832.0, 1062.0], [2824.0, 1071.0], [2864.0, 1062.0], [2856.0, 1062.0], [2848.0, 1062.0], [3040.0, 604.3333333333334], [3056.0, 580.0], [2944.0, 114.0], [2992.0, 492.6666666666667], [2984.0, 671.0], [3008.0, 674.0], [3016.0, 669.0], [3024.0, 605.0], [3032.0, 604.0], [3064.0, 581.0], [3048.0, 583.0], [3080.0, 339.5], [3184.0, 613.0], [3072.0, 582.0], [3088.0, 578.0], [3096.0, 575.0], [3128.0, 561.0], [3120.0, 562.0], [3168.0, 631.0], [3112.0, 777.4545454545455], [3104.0, 573.0], [3136.0, 636.0], [3144.0, 633.0], [3152.0, 634.0], [3160.0, 629.0], [3192.0, 609.0], [3176.0, 623.0], [3200.0, 606.0], [3304.0, 563.0], [3320.0, 555.0], [3256.0, 574.0], [3248.0, 588.0], [3240.0, 592.0], [3232.0, 597.0], [3208.0, 600.0], [3216.0, 593.0], [3264.0, 577.0], [3272.0, 566.0], [3280.0, 561.0], [3288.0, 558.0], [3312.0, 559.0], [3296.0, 562.0], [3224.0, 599.0], [3392.0, 522.0], [3448.0, 315.0], [3416.0, 520.0], [3408.0, 859.5757575757577], [3400.0, 522.0], [3440.0, 526.0], [3432.0, 523.0], [3424.0, 520.0], [3328.0, 546.0], [3336.0, 534.0], [3344.0, 530.0], [3352.0, 530.0], [3384.0, 524.0], [3368.0, 525.0], [3360.0, 527.0], [3568.0, 567.5], [3496.0, 717.3333333333334], [3488.0, 1024.0], [3504.0, 1030.0], [3520.0, 1026.0], [3528.0, 1024.0], [3536.0, 1026.0], [3576.0, 1031.0], [3560.0, 1028.0], [3552.0, 1029.0], [3480.0, 1027.0], [3472.0, 502.0], [3464.0, 502.0], [3456.0, 502.0], [3512.0, 1024.0], [3592.0, 1024.0], [3584.0, 108.0], [3608.0, 1029.5], [3616.0, 1040.0], [3760.0, 106.0], [3992.0, 1245.0], [3984.0, 1257.142857142857], [4240.0, 556.0], [4288.0, 1529.0], [4352.0, 592.0], [4400.0, 608.0], [4464.0, 617.5], [4401.0, 608.0], [4433.0, 613.0], [4417.0, 611.0], [2161.0, 650.0], [2169.0, 657.0], [2297.0, 1073.0], [2241.0, 65.0], [2249.0, 1601.0], [2257.0, 1086.0], [2265.0, 1085.0], [2289.0, 1073.0], [2281.0, 1074.0], [2273.0, 1084.0], [2233.0, 1856.5], [2225.0, 1850.0], [2321.0, 1070.0], [2417.0, 1072.0], [2401.0, 582.0], [2329.0, 1069.0], [2313.0, 1072.0], [2305.0, 1065.0], [2361.0, 1061.0], [2353.0, 1061.0], [2345.0, 1063.0], [2337.0, 1069.0], [2369.0, 1054.0], [2377.0, 1049.0], [2385.0, 1048.0], [2425.0, 1076.0], [2409.0, 1075.0], [2393.0, 2047.0], [2457.0, 1055.0], [2537.0, 711.0], [2433.0, 1067.0], [2441.0, 1067.0], [2473.0, 1055.0], [2465.0, 1055.0], [2449.0, 1057.0], [2689.0, 731.0], [2769.0, 746.0], [2745.0, 1077.0], [2737.0, 1078.0], [2729.0, 1089.0], [2721.0, 1093.0], [2753.0, 1078.0], [2809.0, 1058.0], [2793.0, 1072.5], [2817.0, 1064.0], [2873.0, 1047.0], [2825.0, 1063.5], [2833.0, 1070.0], [2905.0, 1034.0], [2889.0, 1044.0], [2865.0, 1061.0], [2857.0, 1065.0], [2849.0, 1063.0], [3057.0, 586.0], [3025.0, 606.0], [3017.0, 667.0], [2993.0, 680.5], [3001.0, 678.0], [3041.0, 591.0], [3065.0, 580.0], [3049.0, 589.0], [3185.0, 610.0], [3193.0, 357.5], [3113.0, 791.6999999999999], [3105.0, 564.0], [3137.0, 636.0], [3145.0, 632.0], [3153.0, 628.0], [3161.0, 629.0], [3177.0, 617.0], [3169.0, 621.0], [3073.0, 582.0], [3081.0, 566.0], [3089.0, 577.0], [3097.0, 576.0], [3129.0, 561.0], [3121.0, 561.0], [3217.0, 597.0], [3305.0, 557.0], [3297.0, 565.0], [3225.0, 596.0], [3209.0, 608.0], [3201.0, 607.0], [3257.0, 580.0], [3249.0, 577.0], [3241.0, 592.0], [3233.0, 584.0], [3313.0, 559.0], [3281.0, 572.0], [3273.0, 576.0], [3265.0, 579.0], [3289.0, 569.0], [3321.0, 550.0], [3385.0, 522.0], [3329.0, 540.0], [3409.0, 861.0], [3417.0, 516.0], [3361.0, 531.0], [3369.0, 530.0], [3377.0, 523.0], [3337.0, 537.0], [3353.0, 533.0], [3345.0, 533.0], [3393.0, 527.0], [3401.0, 517.0], [3473.0, 1021.0], [3577.0, 1019.0], [3529.0, 104.0], [3537.0, 1026.0], [3545.0, 1027.5], [3465.0, 501.0], [3457.0, 503.0], [3481.0, 1022.0], [3513.0, 1023.0], [3497.0, 1023.0], [3569.0, 1029.0], [3561.0, 1030.0], [3609.0, 1042.0], [3593.0, 565.5], [3585.0, 1028.5], [3601.0, 1029.5], [3625.0, 1047.5], [3617.0, 1041.0], [3825.0, 111.0], [3865.0, 116.0], [3921.0, 1038.5], [3985.0, 954.2105263157896], [3993.0, 1036.0], [4306.0, 583.0], [4290.0, 1532.0000000000002], [4482.0, 620.0], [4498.0, 643.0], [4370.0, 595.0], [4291.0, 1053.0], [4483.0, 621.0], [4499.0, 644.0], [4403.0, 608.0], [4419.0, 611.0], [1029.0, 2265.0], [1057.0, 1193.5], [1065.0, 150.0], [1081.0, 135.0], [1025.0, 2247.0], [1033.0, 2244.0], [1037.0, 2241.0], [1053.0, 150.0], [1049.0, 919.0], [1045.0, 961.0], [1041.0, 1356.3333333333333], [1069.0, 145.5], [1089.0, 135.0], [1101.0, 136.0], [1097.0, 136.0], [1117.0, 54.0], [1469.0, 557.0], [1521.0, 21.0], [1473.0, 554.0], [1529.0, 2237.0], [1497.0, 2239.0], [1593.0, 1745.0], [1597.0, 1763.0], [1569.0, 1755.0], [1573.0, 2279.0], [1549.0, 2297.104838709676], [1565.0, 1776.0], [1561.0, 1775.0], [1557.0, 1777.0], [1553.0, 1778.0], [1581.0, 1770.0], [1577.0, 1771.0], [1609.0, 1758.0], [1605.0, 883.0], [1613.0, 1734.0], [1629.0, 1731.0], [1601.0, 1742.0], [1625.0, 1731.0], [1617.0, 1755.0], [1685.0, 30.0], [1681.0, 1747.0], [1745.0, 1745.0], [1821.0, 607.0], [1817.0, 603.6315789473684], [1813.0, 592.0], [1849.0, 1749.0], [1829.0, 1749.0], [1877.0, 1747.0], [2170.0, 359.0], [2162.0, 651.0], [2130.0, 57.0], [2154.0, 650.5], [2242.0, 1598.0], [2298.0, 1068.0], [2266.0, 1085.0], [2258.0, 1085.0], [2226.0, 825.5], [2218.0, 2122.0], [2250.0, 1580.0], [2290.0, 1073.0], [2282.0, 1074.0], [2274.0, 1077.0], [2322.0, 1070.0], [2418.0, 1071.0], [2402.0, 582.5], [2330.0, 1069.0], [2346.0, 565.0], [2306.0, 1064.0], [2314.0, 1073.0], [2362.0, 1054.0], [2354.0, 1062.0], [2338.0, 1071.0], [2370.0, 1054.0], [2378.0, 1048.0], [2386.0, 1048.0], [2394.0, 2049.0], [2426.0, 1076.0], [2410.0, 1074.0], [2450.0, 1065.0], [2498.0, 83.0], [2522.0, 1089.0], [2474.0, 1054.0], [2466.0, 1055.0], [2458.0, 1055.0], [2442.0, 1068.0], [2434.0, 1066.0], [2586.0, 723.0], [2578.0, 716.3333333333334], [2570.0, 587.0], [2610.0, 1086.0], [2690.0, 729.0], [2794.0, 1060.0], [2762.0, 1073.0], [2778.0, 1068.0], [2770.0, 1082.0], [2746.0, 1082.0], [2730.0, 593.5], [2722.0, 1087.0], [2738.0, 1093.0], [2802.0, 1067.5], [2786.0, 1067.5], [2818.0, 1072.0], [2874.0, 756.0], [2826.0, 1064.0], [2842.0, 1062.0], [2906.0, 1038.0], [2898.0, 1046.5], [2882.0, 1046.0], [2858.0, 1062.0], [2850.0, 1063.0], [3042.0, 352.5], [3050.0, 340.0], [2994.0, 117.0], [3002.0, 678.3333333333334], [3018.0, 666.0], [3026.0, 605.0], [3034.0, 604.5], [3066.0, 581.0], [3058.0, 579.0], [3074.0, 581.0], [3186.0, 616.0], [3122.0, 562.0], [3082.0, 566.0], [3090.0, 577.0], [3098.0, 558.0], [3130.0, 560.0], [3170.0, 626.0], [3114.0, 701.888888888889], [3106.0, 563.0], [3138.0, 635.0], [3146.0, 637.0], [3154.0, 634.0], [3162.0, 630.0], [3194.0, 608.0], [3178.0, 615.0], [3226.0, 356.0], [3306.0, 561.0], [3258.0, 270.33333333333337], [3250.0, 583.0], [3242.0, 591.0], [3234.0, 596.0], [3218.0, 604.0], [3210.0, 599.0], [3202.0, 603.0], [3266.0, 569.0], [3274.0, 575.0], [3282.0, 571.0], [3290.0, 564.0], [3322.0, 552.0], [3298.0, 553.0], [3450.0, 503.5], [3410.0, 1049.8], [3402.0, 526.0], [3394.0, 521.0], [3434.0, 525.0], [3426.0, 520.0], [3330.0, 547.0], [3338.0, 534.0], [3346.0, 540.0], [3354.0, 530.0], [3378.0, 521.0], [3370.0, 524.0], [3362.0, 526.0], [3578.0, 1023.0], [3530.0, 1024.5], [3490.0, 1026.0], [3498.0, 1025.0], [3522.0, 1023.5], [3538.0, 1026.0], [3562.0, 1031.0], [3554.0, 1033.5], [3474.0, 1021.0], [3458.0, 502.0], [3682.0, 118.0], [3610.0, 1042.0], [3594.0, 1022.0], [3586.0, 1031.0], [3618.0, 1041.0], [3746.0, 104.0], [3802.0, 1037.0], [3890.0, 118.0], [3866.0, 116.0], [4308.0, 585.0], [4292.0, 1288.3636363636363], [4261.0, 564.0], [4293.0, 1522.3333333333333], [4453.0, 616.0], [2123.0, 56.0], [2091.0, 54.0], [2163.0, 1737.0], [2291.0, 1073.0], [2243.0, 1611.0], [2251.0, 1578.0], [2259.0, 1086.0], [2299.0, 1066.0], [2283.0, 1074.0], [2275.0, 1077.0], [2235.0, 1604.0], [2227.0, 1595.0], [2219.0, 1602.0], [2211.0, 1705.786764705882], [2267.0, 1085.0], [2323.0, 1070.0], [2419.0, 1071.0], [2403.0, 1090.0], [2331.0, 1069.0], [2315.0, 571.0], [2307.0, 566.5], [2363.0, 1061.0], [2355.0, 1055.0], [2347.0, 1059.0], [2339.0, 1071.0], [2371.0, 1061.0], [2379.0, 1047.0], [2387.0, 1048.0], [2395.0, 2051.0], [2427.0, 1077.0], [2411.0, 1073.0], [2451.0, 1057.0], [2475.0, 1059.0], [2435.0, 1067.0], [2467.0, 1055.0], [2459.0, 1055.0], [2443.0, 1068.0], [2755.0, 749.6666666666666], [2771.0, 909.5], [2779.0, 1069.0], [2763.0, 1078.0], [2811.0, 1069.5], [2795.0, 1075.0], [2787.0, 1064.0], [2747.0, 1076.0], [2739.0, 1085.0], [2731.0, 1090.0], [2723.0, 1095.0], [2835.0, 1061.0], [2883.0, 1048.0], [2867.0, 755.75], [2899.0, 1042.0], [2859.0, 1062.0], [2843.0, 1062.0], [2827.0, 1071.0], [2819.0, 1057.0], [3003.0, 670.0], [3059.0, 584.0], [2979.0, 1086.648648648648], [2987.0, 681.5], [2995.0, 681.0], [3011.0, 675.0], [3027.0, 606.0], [3067.0, 580.0], [3051.0, 588.0], [3043.0, 584.0], [3187.0, 610.0], [3107.0, 563.0], [3115.0, 561.0], [3139.0, 640.0], [3147.0, 632.0], [3155.0, 628.0], [3163.0, 628.0], [3195.0, 608.0], [3179.0, 615.0], [3171.0, 620.0], [3075.0, 581.0], [3083.0, 566.0], [3091.0, 576.0], [3099.0, 575.0], [3131.0, 560.0], [3123.0, 561.0], [3219.0, 596.0], [3323.0, 554.0], [3299.0, 564.0], [3227.0, 595.0], [3211.0, 599.0], [3203.0, 607.0], [3259.0, 571.0], [3251.0, 575.0], [3243.0, 587.0], [3235.0, 583.0], [3307.0, 560.0], [3283.0, 343.0], [3275.0, 575.0], [3267.0, 578.0], [3291.0, 568.0], [3315.0, 549.5], [3331.0, 539.0], [3355.0, 533.0], [3451.0, 503.0], [3419.0, 525.0], [3363.0, 321.5], [3371.0, 526.0], [3387.0, 524.0], [3347.0, 532.0], [3435.0, 525.0], [3339.0, 327.5], [3395.0, 518.5], [3403.0, 522.0], [3467.0, 501.0], [3483.0, 717.6666666666666], [3523.0, 1020.0], [3539.0, 1026.0], [3547.0, 1028.0], [3459.0, 502.0], [3515.0, 1023.5], [3499.0, 1029.0], [3491.0, 1026.0], [3579.0, 1023.0], [3571.0, 1031.0], [3563.0, 1025.0], [3611.0, 1044.0], [3707.0, 120.0], [3587.0, 1029.0], [3595.0, 1024.0], [3619.0, 1044.0], [3723.0, 102.0], [3803.0, 111.0], [3875.0, 117.0], [3859.0, 115.0], [3987.0, 961.0], [4230.0, 547.6666666666666], [4294.0, 1528.0], [4486.0, 621.0], [4374.0, 596.0], [4422.0, 612.0], [4295.0, 1532.7272727272727], [4503.0, 645.0], [4391.0, 602.6666666666666], [529.0, 1697.5], [537.0, 1687.0], [519.0, 2738.0], [517.0, 2732.0], [515.0, 2740.0], [513.0, 2735.0], [535.0, 1688.0], [533.0, 1685.0], [531.0, 1697.5], [539.0, 1696.0], [543.0, 2709.0], [541.0, 2721.0], [527.0, 2716.0], [525.0, 2700.0], [523.0, 2697.0], [521.0, 2744.0], [575.0, 2682.0], [559.0, 1683.0], [561.0, 1182.25], [563.0, 2727.0], [557.0, 1681.5], [555.0, 2687.0], [553.0, 2718.0], [573.0, 2711.0], [571.0, 2707.0], [569.0, 2698.0], [551.0, 2692.0], [549.0, 2726.0], [547.0, 2715.0], [545.0, 2734.0], [567.0, 2702.0], [565.0, 2708.0], [605.0, 2684.0], [607.0, 2683.0], [603.0, 2680.0], [601.0, 2679.0], [599.0, 2680.0], [597.0, 2704.0], [595.0, 2689.0], [593.0, 2685.0], [591.0, 2683.0], [579.0, 2675.0], [577.0, 2691.0], [583.0, 2701.0], [581.0, 2701.0], [589.0, 2715.0], [587.0, 2701.0], [585.0, 2698.0], [637.0, 2673.0], [639.0, 2660.0], [635.0, 2687.0], [633.0, 2682.0], [631.0, 2676.0], [629.0, 2677.0], [627.0, 2669.0], [625.0, 2664.0], [623.0, 2675.0], [609.0, 2676.0], [615.0, 2656.0], [611.0, 2695.0], [621.0, 2665.0], [619.0, 2675.0], [617.0, 2655.0], [669.0, 2666.0], [657.0, 2648.0], [671.0, 2646.0], [659.0, 2657.0], [661.0, 2650.0], [667.0, 2670.0], [665.0, 2661.0], [655.0, 2659.0], [643.0, 2666.0], [641.0, 2695.0], [647.0, 2688.0], [645.0, 2643.0], [653.0, 2661.0], [651.0, 2667.0], [649.0, 2655.0], [663.0, 2653.0], [701.0, 2644.0], [703.0, 2638.0], [689.0, 2664.0], [691.0, 2635.0], [693.0, 2638.0], [699.0, 2635.0], [697.0, 2634.0], [687.0, 2668.0], [673.0, 2646.0], [675.0, 2649.0], [677.0, 2649.0], [679.0, 2654.0], [685.0, 2642.0], [683.0, 2644.0], [681.0, 2653.0], [695.0, 2635.0], [711.0, 2640.0], [709.0, 2637.0], [707.0, 2634.0], [705.0, 2633.0], [741.0, 2640.0], [793.0, 786.0], [781.0, 2638.0], [791.0, 787.6666666666666], [789.0, 763.0], [787.0, 768.0], [797.0, 790.6], [799.0, 787.5], [811.0, 821.0], [987.0, 889.0], [985.0, 1326.75], [991.0, 2318.0], [989.0, 2657.70479704797], [1019.0, 2312.0], [1017.0, 1611.0], [1023.0, 2247.0], [1009.0, 2314.0], [1011.0, 2314.0], [1013.0, 2313.0], [1021.0, 2311.0], [1007.0, 2315.0], [993.0, 2318.0], [995.0, 2317.0], [997.0, 2317.0], [999.0, 2316.0], [1005.0, 2299.0], [1003.0, 2278.0], [1001.0, 2299.0], [1015.0, 2273.0], [1034.0, 1378.3333333333333], [1086.0, 134.0], [1062.0, 150.0], [1038.0, 1578.0], [1030.0, 2246.0], [1026.0, 2246.0], [1050.0, 919.0], [1046.0, 962.0], [1042.0, 1363.6666666666667], [1070.0, 144.0], [1122.0, 57.71428571428571], [1094.0, 135.0], [1126.0, 2237.0], [1118.0, 54.0], [1114.0, 55.0], [1110.0, 135.0], [1106.0, 135.0], [1174.0, 2235.0], [1342.0, 2268.0], [1466.0, 554.5], [1490.0, 19.0], [1550.0, 1762.0], [1574.0, 1771.0], [1598.0, 1743.0], [1594.0, 1745.0], [1566.0, 2283.0], [1562.0, 1780.0], [1558.0, 1782.0], [1554.0, 1777.0], [1578.0, 1771.0], [1570.0, 2286.0], [1626.0, 1732.0], [1662.0, 1748.0], [1622.0, 1742.5], [1618.0, 1754.0], [1614.0, 1733.0], [1610.0, 1758.0], [1606.0, 1741.0], [1602.0, 1739.0], [1678.0, 29.0], [1758.0, 33.0], [1818.0, 607.0], [1814.0, 593.3333333333334], [1830.0, 1750.0], [1938.0, 44.0], [2172.0, 661.25], [2164.0, 652.0], [2156.0, 1193.5], [2284.0, 1075.0], [2228.0, 1587.0], [2220.0, 1602.0], [2236.0, 1599.5], [2300.0, 1065.0], [2260.0, 1085.0], [2268.0, 1085.0], [2292.0, 1073.0], [2276.0, 1077.0], [2316.0, 1073.0], [2332.0, 570.0], [2404.0, 681.0000000000001], [2308.0, 2093.0], [2324.0, 1070.0], [2364.0, 1053.0], [2356.0, 1061.0], [2348.0, 1062.0], [2340.0, 1071.0], [2428.0, 1077.0], [2372.0, 1054.0], [2380.0, 1047.0], [2388.0, 1050.0], [2396.0, 1047.0], [2420.0, 1072.0], [2412.0, 1073.0], [2476.0, 1091.0], [2444.0, 1067.0], [2436.0, 1067.0], [2468.0, 1056.0], [2460.0, 1055.0], [2452.0, 1056.0], [2564.0, 87.5], [2804.0, 1070.0], [2772.0, 425.0], [2764.0, 1073.0], [2756.0, 1077.0], [2692.0, 738.0], [2748.0, 1067.0], [2740.0, 1092.0], [2732.0, 1087.0], [2724.0, 1091.0], [2812.0, 1073.0], [2788.0, 1072.0], [2716.0, 1132.8893617021286], [2780.0, 1061.0], [2836.0, 1054.0], [2876.0, 758.0], [2892.0, 1049.0], [2884.0, 1043.5], [2844.0, 1061.0], [2828.0, 1055.0], [2820.0, 1061.5], [2852.0, 1065.5], [3068.0, 575.0], [3004.0, 669.0], [2996.0, 681.0], [2980.0, 395.5], [2988.0, 682.0], [3012.0, 675.0], [3020.0, 661.0], [3028.0, 605.0], [3036.0, 605.0], [3060.0, 578.0], [3052.0, 581.0], [3084.0, 576.0], [3076.0, 580.0], [3092.0, 577.0], [3100.0, 556.0], [3132.0, 559.0], [3124.0, 561.0], [3172.0, 625.0], [3116.0, 726.3333333333334], [3108.0, 562.0], [3196.0, 605.0], [3140.0, 634.0], [3148.0, 636.0], [3156.0, 633.0], [3164.0, 628.0], [3188.0, 618.0], [3180.0, 621.0], [3260.0, 572.0], [3252.0, 586.0], [3244.0, 580.0], [3236.0, 595.0], [3204.0, 604.0], [3212.0, 603.0], [3220.0, 591.0], [3268.0, 568.0], [3276.0, 570.0], [3284.0, 570.0], [3292.0, 567.0], [3324.0, 541.0], [3316.0, 557.0], [3308.0, 561.0], [3300.0, 559.0], [3228.0, 598.0], [3452.0, 504.0], [3436.0, 521.0], [3412.0, 521.0], [3420.0, 526.0], [3404.0, 527.0], [3444.0, 518.5], [3332.0, 543.0], [3340.0, 539.0], [3348.0, 536.0], [3356.0, 529.0], [3380.0, 527.0], [3372.0, 521.0], [3364.0, 525.0], [3564.0, 1032.0], [3492.0, 1027.0], [3500.0, 1027.0], [3532.0, 1026.5], [3548.0, 1028.5], [3580.0, 1025.0], [3556.0, 1035.5], [3484.0, 1021.0], [3476.0, 1022.5], [3468.0, 501.5], [3460.0, 502.0], [3516.0, 1026.0], [3604.0, 1028.6666666666667], [3684.0, 118.0], [3612.0, 1048.0], [3596.0, 1025.0], [3588.0, 1032.0], [3620.0, 1039.0], [3772.0, 917.3703703703706], [3868.0, 116.0], [3924.0, 1026.0], [3900.0, 1035.0], [3988.0, 1476.0], [4472.0, 619.0], [4345.0, 592.0], [4297.0, 1216.9], [4377.0, 596.0], [2165.0, 654.0], [2157.0, 657.6666666666666], [2085.0, 54.0], [2293.0, 1073.0], [2245.0, 1860.0], [2253.0, 1534.0], [2261.0, 1085.0], [2269.0, 1085.0], [2301.0, 1065.0], [2285.0, 1074.0], [2277.0, 1077.0], [2229.0, 1598.5], [2221.0, 1595.0], [2325.0, 1070.0], [2405.0, 824.6666666666666], [2413.0, 884.5], [2333.0, 1069.0], [2317.0, 1072.0], [2309.0, 2089.0], [2365.0, 1061.0], [2357.0, 1054.0], [2349.0, 1058.0], [2341.0, 1060.0], [2429.0, 1076.0], [2373.0, 1048.0], [2381.0, 1047.0], [2389.0, 1046.0], [2421.0, 1071.0], [2397.0, 2049.0], [2437.0, 1066.0], [2533.0, 703.5], [2477.0, 1090.0], [2445.0, 1068.0], [2469.0, 1055.0], [2461.0, 1055.0], [2453.0, 1056.0], [2685.0, 729.0], [2581.0, 712.0], [2757.0, 1064.0], [2773.0, 861.3333333333334], [2717.0, 1099.0], [2749.0, 1067.0], [2741.0, 1077.0], [2733.0, 1096.0], [2725.0, 1092.0], [2813.0, 1058.0], [2797.0, 1063.0], [2781.0, 1069.0], [2765.0, 1083.0], [2877.0, 759.0], [2821.0, 1064.0], [2837.0, 1065.5], [2869.0, 1054.75], [2853.0, 1062.0], [3013.0, 674.0], [3061.0, 583.0], [3037.0, 362.5], [3029.0, 605.0], [3021.0, 645.0], [2981.0, 394.5], [2997.0, 680.6666666666666], [3005.0, 674.0], [3069.0, 579.0], [3053.0, 587.0], [3045.0, 584.5], [3189.0, 608.0], [3117.0, 686.0], [3109.0, 691.7777777777778], [3197.0, 605.0], [3141.0, 639.0], [3149.0, 631.0], [3157.0, 626.0], [3165.0, 627.0], [3181.0, 616.0], [3173.0, 619.0], [3133.0, 559.0], [3077.0, 580.0], [3085.0, 577.0], [3093.0, 576.0], [3101.0, 560.0], [3125.0, 560.0], [3205.0, 606.0], [3301.0, 563.0], [3229.0, 587.0], [3221.0, 590.0], [3261.0, 581.0], [3253.0, 574.0], [3245.0, 579.0], [3237.0, 583.0], [3309.0, 559.0], [3277.0, 574.0], [3269.0, 574.0], [3285.0, 570.0], [3293.0, 566.0], [3325.0, 554.0], [3317.0, 545.0], [3333.0, 538.0], [3357.0, 323.0], [3421.0, 524.5], [3365.0, 532.0], [3373.0, 522.0], [3389.0, 524.5], [3349.0, 528.0], [3341.0, 535.0], [3429.0, 521.6666666666666], [3453.0, 503.0], [3397.0, 519.0], [3445.0, 510.0], [3565.0, 1026.0], [3573.0, 1032.0], [3525.0, 1024.0], [3533.0, 1026.0], [3541.0, 1026.0], [3549.0, 1030.0], [3477.0, 1025.0], [3517.0, 1025.0], [3509.0, 1029.4], [3493.0, 1019.0], [3557.0, 1027.0], [3485.0, 1024.0], [3605.0, 110.0], [3693.0, 119.0], [3613.0, 1047.0], [3589.0, 1033.0], [3645.0, 114.0], [3621.0, 1044.0], [3773.0, 920.842105263158], [3901.0, 1038.0], [4013.0, 1034.0], [4298.0, 1503.25], [4283.0, 571.0], [4363.0, 594.0], [4427.0, 613.0], [1075.0, 141.0], [1083.0, 135.0], [1059.0, 149.0], [1063.0, 149.0], [1067.0, 149.0], [1079.0, 139.5], [1055.0, 149.5], [1027.0, 2246.0], [1031.0, 2245.0], [1035.0, 2241.0], [1039.0, 2258.0], [1051.0, 152.0], [1047.0, 962.0], [1043.0, 1578.5], [1123.0, 57.5], [1119.0, 56.0], [1115.0, 53.666666666666664], [1107.0, 135.0], [1223.0, 2233.0], [1315.0, 2229.0], [1471.0, 559.0], [1595.0, 1764.0], [1575.0, 1772.0], [1599.0, 1745.0], [1571.0, 1754.0], [1591.0, 1911.7], [1551.0, 1782.0], [1567.0, 2285.0], [1563.0, 1774.0], [1559.0, 1776.0], [1555.0, 1784.0], [1579.0, 1771.0], [1607.0, 1740.0], [1603.0, 881.5], [1651.0, 28.0], [1647.0, 27.0], [1611.0, 1735.0], [1615.0, 1734.0], [1627.0, 1731.0], [1623.0, 1732.0], [1619.0, 1731.0], [1707.0, 1747.0], [1819.0, 1175.0], [1815.0, 595.0], [1919.0, 42.0], [1971.0, 47.0], [1963.0, 46.0], [2174.0, 577.1428571428572], [2158.0, 647.0], [2102.0, 55.0], [2190.0, 62.0], [2270.0, 575.5], [2262.0, 1085.0], [2254.0, 65.0], [2222.0, 1596.0], [2214.0, 1611.0], [2238.0, 2112.0], [2302.0, 1066.0], [2294.0, 1073.0], [2286.0, 1073.0], [2278.0, 1076.0], [2318.0, 571.5], [2334.0, 1069.0], [2326.0, 1070.0], [2406.0, 1089.0], [2366.0, 1052.0], [2310.0, 2085.0], [2358.0, 1061.0], [2350.0, 1062.0], [2342.0, 565.5], [2430.0, 1077.0], [2374.0, 1048.0], [2382.0, 1048.0], [2390.0, 1046.0], [2398.0, 2053.0], [2422.0, 1071.0], [2414.0, 1081.0], [2558.0, 86.0], [2462.0, 1054.0], [2510.0, 83.0], [2470.0, 1055.0], [2454.0, 1055.0], [2446.0, 1067.0], [2438.0, 1067.0], [2686.0, 733.0], [2582.0, 722.0], [2798.0, 1074.0], [2806.0, 104.0], [2758.0, 1077.0], [2766.0, 1083.0], [2742.0, 595.0], [2750.0, 1080.0], [2726.0, 1085.0], [2734.0, 1087.0], [2694.0, 738.0], [2718.0, 1095.0], [2822.0, 1063.0], [2878.0, 760.0], [2838.0, 1068.0], [2846.0, 1061.0], [2870.0, 430.5], [2886.0, 1042.6666666666667], [2862.0, 1058.5], [2854.0, 1062.0], [3054.0, 339.0], [3006.0, 674.0], [2998.0, 679.0], [3046.0, 584.0], [2990.0, 116.0], [3070.0, 579.0], [3014.0, 670.0], [3022.0, 606.0], [3030.0, 604.0], [3062.0, 582.0], [3078.0, 580.0], [3118.0, 685.5], [3126.0, 561.0], [3134.0, 637.0], [3086.0, 578.0], [3094.0, 576.0], [3102.0, 573.0], [3174.0, 625.0], [3110.0, 719.0], [3198.0, 606.0], [3142.0, 633.0], [3150.0, 635.0], [3158.0, 632.0], [3166.0, 632.0], [3190.0, 609.0], [3182.0, 625.0], [3262.0, 581.0], [3254.0, 582.0], [3246.0, 586.0], [3238.0, 593.0], [3222.0, 598.0], [3214.0, 602.0], [3206.0, 603.0], [3326.0, 550.0], [3270.0, 577.0], [3278.0, 562.0], [3286.0, 565.0], [3294.0, 562.0], [3318.0, 556.0], [3310.0, 560.0], [3302.0, 552.0], [3230.0, 597.0], [3454.0, 503.0], [3414.0, 526.0], [3406.0, 324.5], [3398.0, 520.0], [3446.0, 503.0], [3438.0, 521.0], [3390.0, 518.0], [3334.0, 545.0], [3342.0, 538.0], [3350.0, 531.0], [3358.0, 528.0], [3382.0, 519.6666666666666], [3374.0, 525.0], [3366.0, 524.0], [3582.0, 1026.0], [3566.0, 106.0], [3558.0, 1028.0], [3510.0, 563.0], [3502.0, 1026.0], [3526.0, 1022.5], [3534.0, 1028.0], [3542.0, 1025.5], [3550.0, 1029.0], [3462.0, 502.0], [3518.0, 1027.0], [3606.0, 1030.5], [3614.0, 580.0], [3598.0, 1025.5], [3590.0, 1018.0], [3630.0, 112.0], [3622.0, 581.0], [3822.0, 111.0], [3750.0, 104.0], [3902.0, 1035.0], [3990.0, 965.0], [4038.0, 1033.0], [3974.0, 1030.0], [4236.0, 553.0], [4332.0, 589.0], [4508.0, 675.4556962025316], [4396.0, 605.0], [4493.0, 622.5], [4413.0, 610.0], [2095.0, 54.0], [2295.0, 1073.0], [2303.0, 1065.0], [2247.0, 1610.0], [2255.0, 1534.0], [2263.0, 1085.0], [2287.0, 1073.0], [2279.0, 1077.0], [2239.0, 1605.0], [2223.0, 1591.5], [2271.0, 1084.0], [2319.0, 1070.0], [2407.0, 825.3333333333334], [2335.0, 1069.0], [2327.0, 1070.0], [2311.0, 2089.0], [2367.0, 1053.0], [2359.0, 1055.0], [2351.0, 1056.0], [2343.0, 1064.0], [2431.0, 1078.0], [2375.0, 1049.0], [2383.0, 1047.0], [2391.0, 1048.0], [2399.0, 1046.0], [2423.0, 1071.0], [2415.0, 1081.0], [2439.0, 1067.0], [2471.0, 1055.0], [2463.0, 1055.0], [2455.0, 1056.0], [2447.0, 1058.0], [2679.0, 94.0], [2687.0, 727.0], [2583.0, 404.0], [2575.0, 88.0], [2567.0, 87.0], [2791.0, 831.5], [2815.0, 1061.0], [2775.0, 1074.5], [2783.0, 1072.5], [2767.0, 744.5], [2807.0, 1062.5], [2719.0, 1094.0], [2751.0, 1073.0], [2743.0, 1083.0], [2735.0, 1088.0], [2727.0, 1091.0], [2895.0, 1046.0], [2879.0, 974.25], [2903.0, 1040.0], [2871.0, 1048.0], [2847.0, 1062.0], [2839.0, 1053.0], [2831.0, 1058.3333333333333], [3071.0, 579.0], [2983.0, 680.0], [3023.0, 606.0], [3015.0, 669.0], [3031.0, 605.0], [3063.0, 581.0], [3055.0, 586.0], [3047.0, 584.0], [3191.0, 607.0], [3119.0, 748.0], [3111.0, 678.5], [3199.0, 604.0], [3143.0, 638.0], [3151.0, 630.0], [3159.0, 626.0], [3167.0, 627.0], [3183.0, 613.0], [3175.0, 617.0], [3135.0, 637.0], [3079.0, 579.0], [3087.0, 578.0], [3095.0, 576.0], [3103.0, 572.0], [3127.0, 561.0], [3223.0, 601.0], [3311.0, 560.0], [3303.0, 339.5], [3231.0, 597.0], [3215.0, 597.0], [3207.0, 597.0], [3263.0, 582.0], [3255.0, 584.0], [3247.0, 578.0], [3239.0, 593.0], [3279.0, 573.0], [3271.0, 566.0], [3287.0, 569.0], [3295.0, 566.0], [3327.0, 552.0], [3319.0, 551.0], [3351.0, 537.0], [3407.0, 767.0], [3415.0, 523.5], [3423.0, 520.0], [3367.0, 521.0], [3375.0, 518.0], [3335.0, 537.0], [3343.0, 534.0], [3359.0, 535.0], [3431.0, 520.0], [3439.0, 521.0], [3399.0, 523.0], [3447.0, 503.0], [3463.0, 503.0], [3543.0, 1028.0], [3551.0, 1030.0], [3479.0, 725.6666666666666], [3519.0, 1022.0], [3511.0, 1022.0], [3503.0, 1026.0], [3495.0, 1019.0], [3583.0, 1028.0], [3575.0, 1031.0], [3567.0, 1027.0], [3711.0, 101.0], [3615.0, 1049.0], [3591.0, 1021.0], [3599.0, 1028.0], [3679.0, 117.0], [3623.0, 1044.0], [3783.0, 108.0], [3767.0, 106.0], [3951.0, 1027.0], [3975.0, 1034.5], [4318.0, 587.0], [4494.0, 623.0], [4398.0, 605.0], [4287.0, 1528.5], [4495.0, 624.0], [4383.0, 599.0], [4399.0, 607.5], [4463.0, 617.0]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}, {"data": [[1992.989199999994, 1462.3779999999983]], "isOverall": false, "label": "JDBC Request item_list-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4508.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.69988502E12, "maxY": 17941.466666666667, "series": [{"data": [[1.69988502E12, 17941.466666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69988502E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988502E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1462.3779999999983, "minX": 1.69988502E12, "maxY": 1462.3779999999983, "series": [{"data": [[1.69988502E12, 1462.3779999999983]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988502E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4.416799999999999, "minX": 1.69988502E12, "maxY": 4.416799999999999, "series": [{"data": [[1.69988502E12, 4.416799999999999]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988502E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1462.2615999999987, "minX": 1.69988502E12, "maxY": 1462.2615999999987, "series": [{"data": [[1.69988502E12, 1462.2615999999987]], "isOverall": false, "label": "JDBC Request item_list", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988502E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69988502E12, "maxY": 245.0, "series": [{"data": [[1.69988502E12, 245.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69988502E12, 219.10000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69988502E12, 244.47]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69988502E12, 236.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69988502E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69988502E12, 157.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988502E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.5, "minX": 148.0, "maxY": 3103.0, "series": [{"data": [[148.0, 157.5], [428.0, 7.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1100.0, 2608.0], [1357.0, 1581.0], [1518.0, 639.5], [428.0, 42.0], [449.0, 3103.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1518.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 148.0, "maxY": 157.0, "series": [{"data": [[148.0, 157.0], [428.0, 7.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1100.0, 0.0], [1357.0, 0.0], [1518.0, 0.0], [428.0, 0.0], [449.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1518.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69988502E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69988502E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988502E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988502E12, "maxY": 80.8, "series": [{"data": [[1.69988502E12, 2.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69988502E12, 80.8]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988502E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988502E12, "maxY": 80.8, "series": [{"data": [[1.69988502E12, 2.533333333333333]], "isOverall": false, "label": "JDBC Request item_list-success", "isController": false}, {"data": [[1.69988502E12, 80.8]], "isOverall": false, "label": "JDBC Request item_list-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988502E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988502E12, "maxY": 80.8, "series": [{"data": [[1.69988502E12, 2.533333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69988502E12, 80.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988502E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

