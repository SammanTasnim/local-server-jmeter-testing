/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3086.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 3.0], [8.1, 3.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 3.0], [8.8, 3.0], [8.9, 3.0], [9.0, 3.0], [9.1, 3.0], [9.2, 3.0], [9.3, 3.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 4.0], [10.4, 4.0], [10.5, 4.0], [10.6, 4.0], [10.7, 4.0], [10.8, 4.0], [10.9, 4.0], [11.0, 4.0], [11.1, 4.0], [11.2, 4.0], [11.3, 4.0], [11.4, 4.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 5.0], [12.8, 5.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 5.0], [13.3, 5.0], [13.4, 5.0], [13.5, 5.0], [13.6, 5.0], [13.7, 5.0], [13.8, 5.0], [13.9, 5.0], [14.0, 5.0], [14.1, 5.0], [14.2, 5.0], [14.3, 5.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 9.0], [15.7, 10.0], [15.8, 11.0], [15.9, 12.0], [16.0, 13.0], [16.1, 13.0], [16.2, 15.0], [16.3, 16.0], [16.4, 16.0], [16.5, 17.0], [16.6, 18.0], [16.7, 19.0], [16.8, 21.0], [16.9, 25.0], [17.0, 26.0], [17.1, 28.0], [17.2, 28.0], [17.3, 29.0], [17.4, 29.0], [17.5, 30.0], [17.6, 32.0], [17.7, 35.0], [17.8, 37.0], [17.9, 38.0], [18.0, 38.0], [18.1, 39.0], [18.2, 40.0], [18.3, 40.0], [18.4, 41.0], [18.5, 41.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 43.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 44.0], [19.5, 44.0], [19.6, 44.0], [19.7, 45.0], [19.8, 45.0], [19.9, 45.0], [20.0, 45.0], [20.1, 46.0], [20.2, 46.0], [20.3, 46.0], [20.4, 46.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 47.0], [20.9, 47.0], [21.0, 47.0], [21.1, 48.0], [21.2, 48.0], [21.3, 48.0], [21.4, 48.0], [21.5, 49.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 50.0], [22.2, 50.0], [22.3, 50.0], [22.4, 50.0], [22.5, 51.0], [22.6, 51.0], [22.7, 51.0], [22.8, 51.0], [22.9, 51.0], [23.0, 51.0], [23.1, 51.0], [23.2, 52.0], [23.3, 52.0], [23.4, 52.0], [23.5, 52.0], [23.6, 52.0], [23.7, 53.0], [23.8, 53.0], [23.9, 53.0], [24.0, 53.0], [24.1, 53.0], [24.2, 53.0], [24.3, 53.0], [24.4, 54.0], [24.5, 54.0], [24.6, 54.0], [24.7, 54.0], [24.8, 54.0], [24.9, 54.0], [25.0, 55.0], [25.1, 55.0], [25.2, 55.0], [25.3, 55.0], [25.4, 55.0], [25.5, 55.0], [25.6, 55.0], [25.7, 55.0], [25.8, 56.0], [25.9, 56.0], [26.0, 56.0], [26.1, 56.0], [26.2, 56.0], [26.3, 56.0], [26.4, 57.0], [26.5, 57.0], [26.6, 57.0], [26.7, 57.0], [26.8, 57.0], [26.9, 57.0], [27.0, 57.0], [27.1, 57.0], [27.2, 58.0], [27.3, 58.0], [27.4, 58.0], [27.5, 58.0], [27.6, 58.0], [27.7, 59.0], [27.8, 59.0], [27.9, 59.0], [28.0, 59.0], [28.1, 59.0], [28.2, 59.0], [28.3, 59.0], [28.4, 59.0], [28.5, 60.0], [28.6, 60.0], [28.7, 60.0], [28.8, 60.0], [28.9, 60.0], [29.0, 61.0], [29.1, 61.0], [29.2, 61.0], [29.3, 61.0], [29.4, 62.0], [29.5, 62.0], [29.6, 62.0], [29.7, 62.0], [29.8, 62.0], [29.9, 63.0], [30.0, 63.0], [30.1, 63.0], [30.2, 64.0], [30.3, 64.0], [30.4, 64.0], [30.5, 65.0], [30.6, 65.0], [30.7, 65.0], [30.8, 66.0], [30.9, 67.0], [31.0, 67.0], [31.1, 69.0], [31.2, 70.0], [31.3, 71.0], [31.4, 73.0], [31.5, 77.0], [31.6, 139.0], [31.7, 144.0], [31.8, 148.0], [31.9, 153.0], [32.0, 157.0], [32.1, 171.0], [32.2, 174.0], [32.3, 178.0], [32.4, 195.0], [32.5, 198.0], [32.6, 202.0], [32.7, 207.0], [32.8, 223.0], [32.9, 229.0], [33.0, 232.0], [33.1, 236.0], [33.2, 251.0], [33.3, 503.0], [33.4, 504.0], [33.5, 505.0], [33.6, 513.0], [33.7, 514.0], [33.8, 515.0], [33.9, 516.0], [34.0, 516.0], [34.1, 516.0], [34.2, 516.0], [34.3, 517.0], [34.4, 517.0], [34.5, 517.0], [34.6, 518.0], [34.7, 518.0], [34.8, 518.0], [34.9, 519.0], [35.0, 519.0], [35.1, 519.0], [35.2, 519.0], [35.3, 519.0], [35.4, 520.0], [35.5, 520.0], [35.6, 520.0], [35.7, 520.0], [35.8, 521.0], [35.9, 521.0], [36.0, 521.0], [36.1, 521.0], [36.2, 521.0], [36.3, 522.0], [36.4, 522.0], [36.5, 523.0], [36.6, 523.0], [36.7, 524.0], [36.8, 524.0], [36.9, 525.0], [37.0, 526.0], [37.1, 526.0], [37.2, 526.0], [37.3, 527.0], [37.4, 527.0], [37.5, 528.0], [37.6, 529.0], [37.7, 529.0], [37.8, 529.0], [37.9, 530.0], [38.0, 530.0], [38.1, 531.0], [38.2, 531.0], [38.3, 531.0], [38.4, 531.0], [38.5, 531.0], [38.6, 531.0], [38.7, 532.0], [38.8, 532.0], [38.9, 532.0], [39.0, 533.0], [39.1, 533.0], [39.2, 533.0], [39.3, 534.0], [39.4, 534.0], [39.5, 534.0], [39.6, 535.0], [39.7, 535.0], [39.8, 535.0], [39.9, 536.0], [40.0, 536.0], [40.1, 536.0], [40.2, 536.0], [40.3, 536.0], [40.4, 536.0], [40.5, 537.0], [40.6, 537.0], [40.7, 537.0], [40.8, 537.0], [40.9, 537.0], [41.0, 538.0], [41.1, 538.0], [41.2, 538.0], [41.3, 538.0], [41.4, 538.0], [41.5, 538.0], [41.6, 539.0], [41.7, 539.0], [41.8, 539.0], [41.9, 539.0], [42.0, 539.0], [42.1, 539.0], [42.2, 540.0], [42.3, 540.0], [42.4, 540.0], [42.5, 540.0], [42.6, 540.0], [42.7, 540.0], [42.8, 540.0], [42.9, 541.0], [43.0, 541.0], [43.1, 541.0], [43.2, 541.0], [43.3, 541.0], [43.4, 541.0], [43.5, 541.0], [43.6, 542.0], [43.7, 542.0], [43.8, 542.0], [43.9, 542.0], [44.0, 542.0], [44.1, 543.0], [44.2, 543.0], [44.3, 543.0], [44.4, 543.0], [44.5, 543.0], [44.6, 543.0], [44.7, 543.0], [44.8, 543.0], [44.9, 543.0], [45.0, 544.0], [45.1, 544.0], [45.2, 544.0], [45.3, 544.0], [45.4, 544.0], [45.5, 544.0], [45.6, 544.0], [45.7, 545.0], [45.8, 545.0], [45.9, 545.0], [46.0, 545.0], [46.1, 545.0], [46.2, 545.0], [46.3, 545.0], [46.4, 546.0], [46.5, 546.0], [46.6, 546.0], [46.7, 546.0], [46.8, 547.0], [46.9, 547.0], [47.0, 547.0], [47.1, 547.0], [47.2, 547.0], [47.3, 547.0], [47.4, 548.0], [47.5, 548.0], [47.6, 548.0], [47.7, 548.0], [47.8, 548.0], [47.9, 548.0], [48.0, 549.0], [48.1, 549.0], [48.2, 549.0], [48.3, 549.0], [48.4, 550.0], [48.5, 550.0], [48.6, 551.0], [48.7, 551.0], [48.8, 551.0], [48.9, 551.0], [49.0, 552.0], [49.1, 552.0], [49.2, 552.0], [49.3, 553.0], [49.4, 553.0], [49.5, 553.0], [49.6, 553.0], [49.7, 554.0], [49.8, 554.0], [49.9, 554.0], [50.0, 554.0], [50.1, 555.0], [50.2, 555.0], [50.3, 555.0], [50.4, 555.0], [50.5, 555.0], [50.6, 555.0], [50.7, 556.0], [50.8, 556.0], [50.9, 557.0], [51.0, 557.0], [51.1, 558.0], [51.2, 558.0], [51.3, 558.0], [51.4, 559.0], [51.5, 559.0], [51.6, 559.0], [51.7, 560.0], [51.8, 560.0], [51.9, 560.0], [52.0, 561.0], [52.1, 561.0], [52.2, 562.0], [52.3, 563.0], [52.4, 563.0], [52.5, 565.0], [52.6, 567.0], [52.7, 567.0], [52.8, 567.0], [52.9, 568.0], [53.0, 568.0], [53.1, 569.0], [53.2, 569.0], [53.3, 569.0], [53.4, 569.0], [53.5, 569.0], [53.6, 570.0], [53.7, 570.0], [53.8, 570.0], [53.9, 571.0], [54.0, 571.0], [54.1, 571.0], [54.2, 572.0], [54.3, 572.0], [54.4, 572.0], [54.5, 573.0], [54.6, 573.0], [54.7, 573.0], [54.8, 574.0], [54.9, 575.0], [55.0, 578.0], [55.1, 579.0], [55.2, 579.0], [55.3, 580.0], [55.4, 581.0], [55.5, 582.0], [55.6, 582.0], [55.7, 582.0], [55.8, 582.0], [55.9, 585.0], [56.0, 588.0], [56.1, 590.0], [56.2, 594.0], [56.3, 596.0], [56.4, 598.0], [56.5, 601.0], [56.6, 602.0], [56.7, 604.0], [56.8, 605.0], [56.9, 605.0], [57.0, 606.0], [57.1, 606.0], [57.2, 607.0], [57.3, 607.0], [57.4, 608.0], [57.5, 609.0], [57.6, 610.0], [57.7, 610.0], [57.8, 611.0], [57.9, 612.0], [58.0, 613.0], [58.1, 616.0], [58.2, 617.0], [58.3, 618.0], [58.4, 620.0], [58.5, 620.0], [58.6, 621.0], [58.7, 621.0], [58.8, 623.0], [58.9, 623.0], [59.0, 624.0], [59.1, 625.0], [59.2, 627.0], [59.3, 629.0], [59.4, 631.0], [59.5, 632.0], [59.6, 633.0], [59.7, 634.0], [59.8, 636.0], [59.9, 637.0], [60.0, 639.0], [60.1, 640.0], [60.2, 646.0], [60.3, 719.0], [60.4, 1004.0], [60.5, 1004.0], [60.6, 1005.0], [60.7, 1006.0], [60.8, 1007.0], [60.9, 1014.0], [61.0, 1014.0], [61.1, 1015.0], [61.2, 1015.0], [61.3, 1016.0], [61.4, 1016.0], [61.5, 1016.0], [61.6, 1016.0], [61.7, 1016.0], [61.8, 1017.0], [61.9, 1017.0], [62.0, 1017.0], [62.1, 1018.0], [62.2, 1019.0], [62.3, 1019.0], [62.4, 1023.0], [62.5, 1024.0], [62.6, 1024.0], [62.7, 1025.0], [62.8, 1026.0], [62.9, 1026.0], [63.0, 1026.0], [63.1, 1027.0], [63.2, 1028.0], [63.3, 1028.0], [63.4, 1029.0], [63.5, 1029.0], [63.6, 1029.0], [63.7, 1030.0], [63.8, 1030.0], [63.9, 1030.0], [64.0, 1031.0], [64.1, 1031.0], [64.2, 1032.0], [64.3, 1032.0], [64.4, 1033.0], [64.5, 1033.0], [64.6, 1034.0], [64.7, 1034.0], [64.8, 1034.0], [64.9, 1035.0], [65.0, 1035.0], [65.1, 1035.0], [65.2, 1036.0], [65.3, 1036.0], [65.4, 1036.0], [65.5, 1037.0], [65.6, 1037.0], [65.7, 1037.0], [65.8, 1038.0], [65.9, 1038.0], [66.0, 1038.0], [66.1, 1038.0], [66.2, 1039.0], [66.3, 1039.0], [66.4, 1039.0], [66.5, 1039.0], [66.6, 1040.0], [66.7, 1040.0], [66.8, 1040.0], [66.9, 1041.0], [67.0, 1041.0], [67.1, 1042.0], [67.2, 1042.0], [67.3, 1042.0], [67.4, 1042.0], [67.5, 1042.0], [67.6, 1043.0], [67.7, 1043.0], [67.8, 1044.0], [67.9, 1044.0], [68.0, 1044.0], [68.1, 1045.0], [68.2, 1045.0], [68.3, 1045.0], [68.4, 1045.0], [68.5, 1046.0], [68.6, 1046.0], [68.7, 1046.0], [68.8, 1047.0], [68.9, 1047.0], [69.0, 1047.0], [69.1, 1047.0], [69.2, 1048.0], [69.3, 1048.0], [69.4, 1048.0], [69.5, 1048.0], [69.6, 1048.0], [69.7, 1049.0], [69.8, 1050.0], [69.9, 1052.0], [70.0, 1053.0], [70.1, 1053.0], [70.2, 1054.0], [70.3, 1054.0], [70.4, 1055.0], [70.5, 1055.0], [70.6, 1055.0], [70.7, 1055.0], [70.8, 1056.0], [70.9, 1056.0], [71.0, 1056.0], [71.1, 1056.0], [71.2, 1057.0], [71.3, 1057.0], [71.4, 1058.0], [71.5, 1058.0], [71.6, 1058.0], [71.7, 1058.0], [71.8, 1059.0], [71.9, 1059.0], [72.0, 1059.0], [72.1, 1059.0], [72.2, 1059.0], [72.3, 1060.0], [72.4, 1060.0], [72.5, 1061.0], [72.6, 1061.0], [72.7, 1062.0], [72.8, 1062.0], [72.9, 1062.0], [73.0, 1062.0], [73.1, 1063.0], [73.2, 1063.0], [73.3, 1063.0], [73.4, 1063.0], [73.5, 1064.0], [73.6, 1064.0], [73.7, 1064.0], [73.8, 1064.0], [73.9, 1065.0], [74.0, 1065.0], [74.1, 1066.0], [74.2, 1067.0], [74.3, 1067.0], [74.4, 1068.0], [74.5, 1068.0], [74.6, 1068.0], [74.7, 1068.0], [74.8, 1069.0], [74.9, 1070.0], [75.0, 1071.0], [75.1, 1071.0], [75.2, 1072.0], [75.3, 1072.0], [75.4, 1072.0], [75.5, 1073.0], [75.6, 1073.0], [75.7, 1074.0], [75.8, 1074.0], [75.9, 1074.0], [76.0, 1075.0], [76.1, 1075.0], [76.2, 1075.0], [76.3, 1075.0], [76.4, 1076.0], [76.5, 1076.0], [76.6, 1076.0], [76.7, 1077.0], [76.8, 1078.0], [76.9, 1079.0], [77.0, 1082.0], [77.1, 1083.0], [77.2, 1084.0], [77.3, 1084.0], [77.4, 1084.0], [77.5, 1085.0], [77.6, 1086.0], [77.7, 1086.0], [77.8, 1088.0], [77.9, 1089.0], [78.0, 1093.0], [78.1, 1111.0], [78.2, 1124.0], [78.3, 1137.0], [78.4, 1146.0], [78.5, 1524.0], [78.6, 1525.0], [78.7, 1526.0], [78.8, 1527.0], [78.9, 1527.0], [79.0, 1529.0], [79.1, 1529.0], [79.2, 1529.0], [79.3, 1530.0], [79.4, 1530.0], [79.5, 1530.0], [79.6, 1530.0], [79.7, 1531.0], [79.8, 1531.0], [79.9, 1531.0], [80.0, 1531.0], [80.1, 1532.0], [80.2, 1532.0], [80.3, 1532.0], [80.4, 1532.0], [80.5, 1532.0], [80.6, 1532.0], [80.7, 1533.0], [80.8, 1533.0], [80.9, 1533.0], [81.0, 1533.0], [81.1, 1533.0], [81.2, 1533.0], [81.3, 1534.0], [81.4, 1534.0], [81.5, 1534.0], [81.6, 1534.0], [81.7, 1534.0], [81.8, 1534.0], [81.9, 1535.0], [82.0, 1535.0], [82.1, 1535.0], [82.2, 1535.0], [82.3, 1536.0], [82.4, 1536.0], [82.5, 1537.0], [82.6, 1537.0], [82.7, 1537.0], [82.8, 1537.0], [82.9, 1538.0], [83.0, 1538.0], [83.1, 1538.0], [83.2, 1538.0], [83.3, 1538.0], [83.4, 1538.0], [83.5, 1539.0], [83.6, 1539.0], [83.7, 1539.0], [83.8, 1539.0], [83.9, 1539.0], [84.0, 1539.0], [84.1, 1540.0], [84.2, 1540.0], [84.3, 1540.0], [84.4, 1540.0], [84.5, 1540.0], [84.6, 1541.0], [84.7, 1541.0], [84.8, 1541.0], [84.9, 1542.0], [85.0, 1542.0], [85.1, 1542.0], [85.2, 1543.0], [85.3, 1543.0], [85.4, 1544.0], [85.5, 1544.0], [85.6, 1545.0], [85.7, 1545.0], [85.8, 1545.0], [85.9, 1546.0], [86.0, 1546.0], [86.1, 1546.0], [86.2, 1546.0], [86.3, 1547.0], [86.4, 1547.0], [86.5, 1547.0], [86.6, 1547.0], [86.7, 1547.0], [86.8, 1548.0], [86.9, 1548.0], [87.0, 1548.0], [87.1, 1548.0], [87.2, 1549.0], [87.3, 1549.0], [87.4, 1549.0], [87.5, 1550.0], [87.6, 1550.0], [87.7, 1550.0], [87.8, 1550.0], [87.9, 1551.0], [88.0, 1551.0], [88.1, 1551.0], [88.2, 1551.0], [88.3, 1551.0], [88.4, 1552.0], [88.5, 1552.0], [88.6, 1552.0], [88.7, 1553.0], [88.8, 1553.0], [88.9, 1554.0], [89.0, 1554.0], [89.1, 1554.0], [89.2, 1554.0], [89.3, 1554.0], [89.4, 1554.0], [89.5, 1554.0], [89.6, 1554.0], [89.7, 1555.0], [89.8, 1555.0], [89.9, 1555.0], [90.0, 1555.0], [90.1, 1556.0], [90.2, 1557.0], [90.3, 1558.0], [90.4, 1559.0], [90.5, 1561.0], [90.6, 1561.0], [90.7, 1561.0], [90.8, 1562.0], [90.9, 1564.0], [91.0, 1565.0], [91.1, 1566.0], [91.2, 1566.0], [91.3, 1567.0], [91.4, 1568.0], [91.5, 1568.0], [91.6, 1569.0], [91.7, 1571.0], [91.8, 1572.0], [91.9, 1573.0], [92.0, 1573.0], [92.1, 1573.0], [92.2, 1574.0], [92.3, 1574.0], [92.4, 1575.0], [92.5, 1575.0], [92.6, 1576.0], [92.7, 1576.0], [92.8, 1577.0], [92.9, 1577.0], [93.0, 1578.0], [93.1, 1579.0], [93.2, 1580.0], [93.3, 2043.0], [93.4, 2044.0], [93.5, 2044.0], [93.6, 2044.0], [93.7, 2045.0], [93.8, 2045.0], [93.9, 2045.0], [94.0, 2045.0], [94.1, 2046.0], [94.2, 2046.0], [94.3, 2046.0], [94.4, 2046.0], [94.5, 2046.0], [94.6, 2047.0], [94.7, 2047.0], [94.8, 2047.0], [94.9, 2047.0], [95.0, 2047.0], [95.1, 2048.0], [95.2, 2048.0], [95.3, 2048.0], [95.4, 2053.0], [95.5, 2055.0], [95.6, 2055.0], [95.7, 2056.0], [95.8, 2056.0], [95.9, 2056.0], [96.0, 2057.0], [96.1, 2057.0], [96.2, 2057.0], [96.3, 2057.0], [96.4, 2058.0], [96.5, 2058.0], [96.6, 2058.0], [96.7, 2059.0], [96.8, 2059.0], [96.9, 2060.0], [97.0, 2060.0], [97.1, 2061.0], [97.2, 2080.0], [97.3, 2081.0], [97.4, 2085.0], [97.5, 2087.0], [97.6, 2235.0], [97.7, 2548.0], [97.8, 2552.0], [97.9, 2554.0], [98.0, 2556.0], [98.1, 2557.0], [98.2, 3062.0], [98.3, 3065.0], [98.4, 3066.0], [98.5, 3067.0], [98.6, 3068.0], [98.7, 3068.0], [98.8, 3069.0], [98.9, 3069.0], [99.0, 3070.0], [99.1, 3071.0], [99.2, 3072.0], [99.3, 3073.0], [99.4, 3074.0], [99.5, 3074.0], [99.6, 3075.0], [99.7, 3077.0], [99.8, 3078.0], [99.9, 3082.0]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1578.0, "series": [{"data": [[0.0, 1578.0], [2200.0, 2.0], [600.0, 192.0], [2500.0, 27.0], [700.0, 1.0], [3000.0, 91.0], [200.0, 32.0], [1000.0, 888.0], [1100.0, 17.0], [1500.0, 743.0], [100.0, 50.0], [500.0, 1162.0], [2000.0, 217.0]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 152.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4848.0, "series": [{"data": [[0.0, 152.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4848.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1280.947200000001, "minX": 1.6998855E12, "maxY": 1280.947200000001, "series": [{"data": [[1.6998855E12, 1280.947200000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6998855E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3078.5, "series": [{"data": [[3.0, 3070.0], [4.0, 3069.0], [5.0, 3077.0], [7.0, 3078.5], [8.0, 3069.0], [9.0, 3073.0], [10.0, 3072.0], [12.0, 3071.0], [15.0, 3071.75], [16.0, 3069.0], [18.0, 3072.0], [19.0, 3074.0], [21.0, 11.0], [22.0, 2311.75], [23.0, 3072.0], [24.0, 3077.0], [26.0, 3074.0], [27.0, 3067.0], [28.0, 3070.0], [29.0, 3072.0], [30.0, 3074.0], [33.0, 2.556962025316456], [32.0, 281.0], [35.0, 116.3170731707317], [34.0, 2.2474226804123707], [37.0, 58.37500000000001], [36.0, 3.7719298245614037], [38.0, 61.05660377358491], [39.0, 100.5873015873016], [40.0, 61.05357142857143], [41.0, 82.46153846153847], [43.0, 83.07317073170732], [42.0, 4.264705882352941], [45.0, 14.416666666666668], [44.0, 328.2631578947368], [47.0, 672.6428571428571], [46.0, 16.333333333333332], [49.0, 803.25], [48.0, 1036.6666666666665], [51.0, 888.8571428571429], [50.0, 13.0], [53.0, 46.75], [52.0, 1026.3333333333335], [55.0, 1533.75], [54.0, 3071.0], [57.0, 1551.25], [56.0, 43.25], [58.0, 390.5], [59.0, 1358.6666666666667], [61.0, 810.5], [60.0, 1783.5], [63.0, 55.0], [62.0, 857.3333333333333], [67.0, 1044.3333333333335], [66.0, 1955.2], [65.0, 781.5], [64.0, 504.0], [71.0, 1043.6666666666665], [70.0, 1258.8], [68.0, 1537.0], [75.0, 793.25], [73.0, 454.85714285714283], [74.0, 3068.0], [79.0, 1056.6666666666665], [77.0, 1040.3333333333335], [76.0, 1565.5], [78.0, 1025.6666666666665], [83.0, 1039.0], [82.0, 797.0], [80.0, 51.0], [81.0, 1536.25], [87.0, 16.25], [86.0, 34.0], [84.0, 1041.6666666666665], [85.0, 3070.0], [90.0, 2065.3333333333335], [89.0, 26.0], [88.0, 48.0], [91.0, 2048.8333333333335], [95.0, 1051.75], [93.0, 834.2], [92.0, 32.666666666666664], [94.0, 6.0], [98.0, 538.25], [96.0, 424.2], [99.0, 1374.0], [97.0, 6.0], [103.0, 715.0], [101.0, 850.0], [102.0, 533.3333333333334], [100.0, 4.25], [107.0, 445.4], [106.0, 1299.0], [104.0, 1553.6666666666667], [110.0, 1042.0], [109.0, 295.33333333333337], [111.0, 21.833333333333332], [108.0, 724.125], [115.0, 704.0], [113.0, 20.5], [112.0, 11.600000000000001], [114.0, 2056.0], [119.0, 467.1111111111111], [116.0, 1043.0], [118.0, 1029.0], [123.0, 686.3333333333334], [120.0, 1.0], [122.0, 1372.0], [121.0, 2057.0], [127.0, 686.3333333333334], [125.0, 1.0], [126.0, 2058.0], [124.0, 2058.0], [134.0, 1674.25], [132.0, 515.0], [131.0, 858.6666666666666], [130.0, 1027.5], [129.0, 1029.0], [128.0, 2058.0], [143.0, 1370.6666666666667], [142.0, 1.0], [140.0, 770.5], [138.0, 2.5], [137.0, 271.5], [136.0, 1547.3333333333333], [141.0, 2055.0], [139.0, 2047.0], [149.0, 1.0], [145.0, 1372.0], [150.0, 2056.5], [148.0, 2047.0], [147.0, 2057.5], [159.0, 1024.5], [153.0, 1586.5], [157.0, 2046.0], [156.0, 2052.0], [155.0, 2047.0], [165.0, 1025.0], [163.0, 1025.0], [167.0, 2046.0], [166.0, 2045.0], [164.0, 2047.0], [162.0, 2047.0], [160.0, 2046.0], [172.0, 1366.0], [169.0, 1025.0], [175.0, 2048.0], [174.0, 2047.0], [173.0, 2047.0], [170.0, 2046.0], [168.0, 2046.0], [183.0, 1026.5], [179.0, 516.25], [182.0, 2235.0], [181.0, 2045.0], [180.0, 2047.0], [177.0, 2048.0], [190.0, 7.0], [191.0, 2045.5], [189.0, 2047.0], [187.0, 2046.0], [185.0, 2046.0], [195.0, 1027.5], [193.0, 1026.5], [199.0, 2047.0], [198.0, 2045.5], [194.0, 2047.0], [192.0, 2045.0], [206.0, 1028.5], [200.0, 1367.6666666666667], [205.0, 2046.0], [203.0, 2047.0], [202.0, 2047.0], [215.0, 1028.5], [212.0, 1029.5], [208.0, 1026.5], [214.0, 2048.0], [213.0, 2044.0], [211.0, 2044.0], [210.0, 2047.0], [209.0, 2045.5], [222.0, 13.5], [217.0, 1368.3333333333333], [223.0, 2045.5], [221.0, 2044.0], [220.0, 2045.0], [219.0, 2044.5], [230.0, 1369.0], [227.0, 14.0], [226.0, 1368.0], [225.0, 13.0], [231.0, 2044.0], [228.0, 2045.0], [224.0, 2046.0], [239.0, 1369.6666666666667], [236.0, 692.6666666666666], [233.0, 1368.0], [238.0, 2045.0], [235.0, 2044.0], [234.0, 2044.0], [241.0, 1031.5], [247.0, 2044.0], [246.0, 2043.0], [243.0, 2043.0], [242.0, 2043.0], [240.0, 2044.0], [255.0, 1288.0], [253.0, 19.5], [254.0, 1373.6666666666667], [250.0, 1032.0], [249.0, 1031.0], [248.0, 1031.0], [252.0, 2045.0], [251.0, 2045.0], [269.0, 1291.5], [267.0, 1711.0], [266.0, 25.5], [264.0, 1036.8], [265.0, 2558.0], [263.0, 1288.5], [262.0, 2553.0], [261.0, 2556.0], [257.0, 1288.75], [258.0, 2553.0], [256.0, 19.0], [271.0, 2555.0], [268.0, 2557.0], [259.0, 2556.0], [286.0, 30.0], [284.0, 29.0], [283.0, 801.0], [282.0, 338.2], [281.0, 1707.3333333333333], [280.0, 28.0], [278.0, 867.3333333333334], [275.0, 2553.5], [273.0, 2552.0], [272.0, 2548.0], [276.0, 2550.0], [287.0, 1574.5], [285.0, 1574.5], [301.0, 805.0], [297.0, 1062.0], [299.0, 32.0], [298.0, 1577.0], [292.0, 804.5], [291.0, 1061.0], [293.0, 804.5], [289.0, 803.5], [294.0, 1577.0], [288.0, 1576.0], [303.0, 1577.0], [296.0, 1576.0], [300.0, 1577.5], [318.0, 1573.0], [314.0, 803.5], [315.0, 548.3333333333333], [312.0, 1187.0], [313.0, 1572.0], [309.0, 1059.3333333333333], [307.0, 806.0], [305.0, 33.0], [306.0, 1577.0], [304.0, 805.5], [317.0, 1573.0], [333.0, 1575.0], [335.0, 805.5], [334.0, 1062.5], [331.0, 1403.3333333333333], [325.0, 806.0], [324.0, 959.2], [332.0, 2087.0], [321.0, 1573.0], [320.0, 1573.0], [327.0, 1575.0], [326.0, 1574.0], [329.0, 2087.0], [328.0, 2085.0], [351.0, 1580.0], [346.0, 806.0], [342.0, 806.5], [336.0, 1576.0], [339.0, 1575.0], [338.0, 1830.5], [350.0, 1579.5], [348.0, 2089.0], [347.0, 1576.0], [345.0, 1577.0], [344.0, 1830.5], [341.0, 1576.0], [340.0, 2088.0], [365.0, 1579.0], [367.0, 2081.0], [360.0, 1064.3333333333333], [358.0, 808.5], [366.0, 1579.0], [363.0, 1576.5], [361.0, 1574.0], [356.0, 1575.0], [355.0, 2082.0], [354.0, 2082.0], [353.0, 1575.0], [352.0, 1580.0], [383.0, 1568.0], [373.0, 1061.3333333333333], [377.0, 1062.0], [376.0, 1568.5], [372.0, 42.0], [370.0, 43.0], [371.0, 1826.0], [374.0, 1568.0], [369.0, 2082.0], [368.0, 2081.0], [382.0, 2080.0], [380.0, 2081.0], [379.0, 1568.0], [378.0, 1568.0], [398.0, 45.0], [395.0, 809.5], [386.0, 805.5], [385.0, 2081.0], [384.0, 1568.0], [399.0, 1567.0], [397.0, 1566.0], [396.0, 1567.0], [394.0, 1571.0], [392.0, 1575.0], [391.0, 1569.0], [390.0, 1568.0], [389.0, 1570.6666666666667], [403.0, 1566.0], [407.0, 806.0], [411.0, 803.5], [404.0, 808.0], [401.0, 1061.0], [400.0, 1569.0], [414.0, 1563.0], [413.0, 1561.5], [410.0, 1566.0], [408.0, 1566.0], [406.0, 1564.5], [405.0, 1566.0], [428.0, 48.0], [425.0, 802.5], [418.0, 47.0], [417.0, 1563.0], [416.0, 1564.5], [430.0, 1558.0], [429.0, 1559.5], [427.0, 1565.0], [424.0, 1561.3333333333333], [421.0, 1567.0], [420.0, 1563.3333333333333], [446.0, 50.0], [441.0, 803.5], [438.0, 554.0], [437.0, 1561.0], [436.0, 1561.0], [439.0, 1560.0], [434.0, 1561.0], [433.0, 1561.5], [447.0, 1561.5], [445.0, 1558.0], [444.0, 1563.0], [443.0, 1564.0], [442.0, 1561.0], [440.0, 1561.0], [461.0, 1555.0], [455.0, 1180.5], [462.0, 1554.0], [460.0, 1554.0], [451.0, 1555.0], [450.0, 1557.0], [459.0, 2060.0], [458.0, 1560.0], [457.0, 2059.0], [456.0, 1555.0], [452.0, 1555.0], [467.0, 52.0], [479.0, 1058.0], [476.0, 804.0], [475.0, 53.0], [470.0, 52.0], [469.0, 1554.0], [468.0, 2061.0], [471.0, 1807.5], [466.0, 1809.5], [464.0, 1554.0], [478.0, 1557.0], [477.0, 1554.0], [474.0, 1554.0], [473.0, 1554.5], [483.0, 55.0], [495.0, 55.0], [492.0, 1055.0], [488.0, 55.0], [486.0, 805.0], [484.0, 1810.5], [481.0, 1392.6666666666667], [482.0, 2062.0], [487.0, 1554.0], [494.0, 1554.0], [493.0, 1555.0], [491.0, 1554.0], [489.0, 1554.0], [511.0, 1552.0], [504.0, 55.0], [498.0, 805.0], [497.0, 1555.0], [496.0, 1554.5], [499.0, 2057.0], [510.0, 1555.0], [509.0, 1807.0], [507.0, 2060.0], [506.0, 2059.0], [505.0, 2058.0], [503.0, 2057.5], [501.0, 2056.0], [500.0, 2055.0], [542.0, 52.0], [534.0, 1051.6666666666667], [530.0, 58.0], [528.0, 803.5], [516.0, 1053.0], [512.0, 57.0], [526.0, 1549.0], [522.0, 1550.5], [520.0, 1553.0], [540.0, 1545.0], [536.0, 1551.0], [518.0, 1554.0], [532.0, 1554.0], [572.0, 1546.5], [562.0, 801.5], [560.0, 553.0], [574.0, 1546.5], [570.0, 1544.0], [550.0, 1551.0], [548.0, 1550.0], [546.0, 1551.0], [564.0, 1545.0], [558.0, 1548.0], [556.0, 1552.5], [554.0, 1549.0], [552.0, 1551.0], [602.0, 1050.3333333333333], [606.0, 57.0], [600.0, 1174.0], [582.0, 1547.0], [588.0, 802.5], [584.0, 56.0], [580.0, 802.5], [590.0, 1547.0], [578.0, 1546.0], [576.0, 1549.0], [604.0, 1548.0], [598.0, 1548.0], [596.0, 1547.0], [594.0, 1547.0], [636.0, 1529.0], [632.0, 1389.0], [622.0, 1802.0], [608.0, 1546.0], [614.0, 2058.0], [620.0, 554.0], [618.0, 929.5], [616.0, 559.25], [638.0, 2056.0], [630.0, 1798.5], [628.0, 1529.0], [626.0, 1546.0], [696.0, 57.0], [682.0, 55.0], [678.0, 54.0], [732.0, 54.5], [730.0, 61.0], [734.0, 48.0], [718.0, 59.0], [712.0, 60.0], [708.0, 59.0], [704.0, 58.0], [742.0, 47.0], [738.0, 47.0], [758.0, 48.0], [754.0, 47.0], [752.0, 47.0], [746.0, 47.0], [744.0, 47.0], [792.0, 68.0], [796.0, 40.0], [798.0, 70.0], [794.0, 69.0], [790.0, 67.0], [784.0, 65.5], [782.0, 38.0], [776.0, 38.0], [774.0, 51.0], [770.0, 49.0], [828.0, 1036.3333333333333], [806.0, 800.5], [826.0, 1531.0], [818.0, 1034.3333333333333], [822.0, 1531.5], [820.0, 1530.0], [816.0, 786.0], [804.0, 1225.2], [800.0, 1530.7592592592587], [814.0, 1531.0], [810.0, 1532.0], [802.0, 71.0], [858.0, 1538.0], [862.0, 804.0], [860.0, 793.0], [850.0, 1046.0], [854.0, 1537.5], [848.0, 55.0], [832.0, 804.5], [846.0, 1532.6666666666667], [844.0, 1530.0], [842.0, 1530.0], [840.0, 1530.5], [834.0, 808.5], [838.0, 801.0], [836.0, 1527.0], [856.0, 1539.0], [890.0, 785.5], [868.0, 53.5], [894.0, 1042.0], [872.0, 795.75], [864.0, 793.0], [874.0, 805.5], [876.0, 1538.0], [892.0, 1532.5], [888.0, 1533.0], [870.0, 1538.5], [886.0, 1533.0], [900.0, 551.3333333333333], [924.0, 794.5], [926.0, 1042.0], [922.0, 45.0], [920.0, 1533.0], [902.0, 1533.0], [898.0, 41.0], [896.0, 60.0], [910.0, 550.5], [906.0, 797.5], [904.0, 1533.0], [908.0, 1535.0], [916.0, 1042.0], [918.0, 1532.0], [914.0, 791.5], [912.0, 62.5], [954.0, 794.75], [958.0, 1040.0], [956.0, 1527.0], [952.0, 542.6666666666667], [932.0, 1538.0], [930.0, 1533.0], [928.0, 1532.5], [948.0, 542.6666666666667], [946.0, 44.0], [942.0, 416.25], [938.0, 41.5], [936.0, 1539.0], [940.0, 1539.0], [966.0, 47.0], [990.0, 550.3333333333333], [986.0, 801.5], [984.0, 1551.0], [988.0, 1554.0], [976.0, 806.5], [978.0, 1546.0], [982.0, 797.0], [980.0, 802.0], [974.0, 554.0], [970.0, 48.0], [968.0, 1532.0], [972.0, 1548.0], [962.0, 1041.3333333333333], [960.0, 1524.0], [1020.0, 391.6666666666667], [998.0, 793.5], [1022.0, 560.0], [1010.0, 1532.0], [1008.0, 1542.0], [1016.0, 566.0], [1002.0, 547.0], [1000.0, 1546.0], [1004.0, 1534.0], [994.0, 542.3333333333333], [992.0, 1542.0], [996.0, 1537.0], [1006.0, 1533.0], [1018.0, 1077.0], [1014.0, 1532.0], [1012.0, 1542.0], [1080.0, 384.6666666666667], [1056.0, 556.5], [1064.0, 551.5], [1084.0, 1043.0], [1076.0, 1055.0], [1072.0, 1055.0], [1068.0, 1056.0], [1060.0, 1067.0], [1052.0, 1058.0], [1028.0, 1076.0], [1024.0, 1076.0], [1036.0, 1064.0], [1032.0, 1065.0], [1048.0, 1060.0], [1044.0, 1062.0], [1040.0, 1063.0], [1148.0, 372.3333333333333], [1140.0, 291.0], [1128.0, 540.5], [1108.0, 548.5], [1104.0, 1037.0], [1116.0, 1029.0], [1112.0, 1033.0], [1088.0, 551.0], [1144.0, 1026.0], [1136.0, 1019.0], [1100.0, 1037.0], [1096.0, 1040.0], [1092.0, 1050.0], [1132.0, 1035.0], [1124.0, 1027.0], [1120.0, 1028.0], [1164.0, 51.0], [1208.0, 552.5], [1204.0, 1547.0], [1200.0, 1039.0], [1156.0, 51.0], [1160.0, 1017.0], [1152.0, 51.0], [1196.0, 712.6666666666666], [1192.0, 1039.0], [1184.0, 1540.0], [1212.0, 1044.0], [1172.0, 552.3333333333333], [1168.0, 1550.0], [1176.0, 808.5], [1268.0, 794.0], [1220.0, 1051.0], [1272.0, 55.0], [1260.0, 65.0], [1248.0, 1034.0], [1276.0, 1042.0], [1224.0, 804.5], [1264.0, 1044.0], [1216.0, 553.5], [1244.0, 1041.0], [1232.0, 879.3333333333334], [1236.0, 1035.0], [1240.0, 794.75], [1336.0, 1037.0], [1320.0, 63.0], [1332.0, 548.0], [1324.0, 547.0], [1340.0, 1037.0], [1328.0, 1031.0], [1316.0, 1029.0], [1312.0, 1530.6666666666667], [1304.0, 1043.0], [1280.0, 1043.0], [1296.0, 1043.0], [1396.0, 545.5], [1400.0, 1033.0], [1392.0, 1032.0], [1356.0, 1279.5], [1348.0, 1526.0], [1344.0, 1038.0], [1384.0, 1029.0], [1380.0, 1030.0], [1376.0, 1025.5], [1372.0, 1024.5], [1368.0, 1027.0], [1364.0, 1036.0], [1360.0, 1037.0], [1424.0, 63.0], [1428.0, 533.5], [1436.0, 65.0], [1440.0, 53.0], [1420.0, 1006.0], [1416.0, 1005.0], [1412.0, 1004.0], [1408.0, 1535.0], [1532.0, 64.0], [1476.0, 57.0], [1504.0, 61.0], [1524.0, 64.0], [1528.0, 63.0], [1508.0, 61.0], [1516.0, 63.0], [1540.0, 52.0], [1536.0, 65.0], [1552.0, 53.0], [1556.0, 54.0], [1560.0, 54.0], [1572.0, 56.0], [1596.0, 1029.0], [1592.0, 1031.0], [1656.0, 1054.0], [1640.0, 389.0], [1608.0, 544.0], [1604.0, 1033.0], [1600.0, 1028.0], [1612.0, 1036.0], [1628.0, 1062.0], [1624.0, 1063.0], [1620.0, 1069.0], [1616.0, 1068.0], [1644.0, 556.5], [1660.0, 1057.0], [1652.0, 1056.0], [1648.0, 1058.0], [1636.0, 1058.0], [1632.0, 1060.0], [1720.0, 1085.0], [1676.0, 554.0], [1716.0, 1085.0], [1684.0, 553.5], [1680.0, 1048.0], [1692.0, 554.5], [1664.0, 1055.0], [1672.0, 1047.0], [1668.0, 1054.0], [1688.0, 1046.0], [1724.0, 1084.0], [1700.0, 1043.0], [1696.0, 1042.0], [1712.0, 1086.0], [1708.0, 1086.0], [1704.0, 1025.0], [1756.0, 567.0], [1784.0, 553.0], [1736.0, 570.5], [1740.0, 1084.0], [1776.0, 1068.0], [1744.0, 1082.0], [1748.0, 1083.0], [1752.0, 562.5], [1728.0, 1083.0], [1732.0, 1084.0], [1760.0, 1076.0], [1764.0, 1062.0], [1788.0, 1055.0], [1780.0, 1068.0], [1772.0, 562.5], [1768.0, 1062.0], [1848.0, 1063.0], [1812.0, 563.0], [1808.0, 1075.0], [1816.0, 1069.0], [1824.0, 565.0], [1828.0, 1072.0], [1832.0, 1073.0], [1836.0, 1072.0], [1852.0, 1061.0], [1844.0, 1065.0], [1840.0, 1071.0], [1804.0, 1075.0], [1800.0, 1075.0], [1796.0, 1078.0], [1792.0, 1054.0], [1820.0, 1074.0], [1892.0, 1059.0], [1896.0, 960.4000000000001], [1888.0, 1055.0], [1900.0, 640.0], [1916.0, 1145.0], [1912.0, 637.0], [1908.0, 638.0], [1904.0, 639.0], [1920.0, 1146.0], [1924.0, 342.0], [1936.0, 339.5], [1940.0, 622.0], [1944.0, 620.0], [1948.0, 620.0], [1952.0, 620.0], [1956.0, 619.0], [1960.0, 617.0], [1964.0, 617.0], [1980.0, 612.0], [1976.0, 613.0], [1972.0, 612.5], [1968.0, 616.0], [1932.0, 626.0], [1928.0, 628.0], [1988.0, 607.0], [1984.0, 609.0], [1992.0, 607.0], [2012.0, 590.0], [2008.0, 597.0], [2040.0, 572.5], [2036.0, 584.0], [2032.0, 581.0], [1996.0, 1113.0], [2044.0, 582.0], [2000.0, 600.0], [2004.0, 1109.0], [2024.0, 589.0], [2020.0, 1095.0], [2016.0, 594.0], [2028.0, 1092.0], [2072.0, 313.0], [2168.0, 531.0], [2056.0, 1078.0], [2048.0, 581.0], [2064.0, 572.0], [2104.0, 552.0], [2160.0, 294.5], [2152.0, 538.0], [2112.0, 554.0], [2080.0, 563.0], [2088.0, 560.0], [2096.0, 555.0], [2120.0, 297.5], [2136.0, 542.0], [2128.0, 543.0], [2280.0, 519.5], [2192.0, 532.7272727272727], [2184.0, 214.33333333333334], [2176.0, 527.0], [2264.0, 521.0], [2240.0, 545.0], [2272.0, 536.0], [2288.0, 562.25], [2296.0, 1009.0], [2200.0, 558.6666666666666], [2232.0, 533.0], [2216.0, 541.4], [2208.0, 517.5], [2368.0, 895.0], [2360.0, 1016.0], [2336.0, 517.0], [2320.0, 1015.0], [2312.0, 1014.0], [2552.0, 542.0], [2544.0, 540.0], [2512.0, 526.1666666666667], [2504.0, 596.6666666666666], [2560.0, 539.0], [2576.0, 359.5], [2592.0, 567.5], [2600.0, 560.0], [2608.0, 561.0], [2568.0, 571.0], [2616.0, 557.0], [2632.0, 351.0], [2648.0, 352.5], [2640.0, 547.0], [2656.0, 357.0], [2584.0, 569.0], [2664.0, 539.0], [2680.0, 554.0], [2624.0, 547.0], [2672.0, 537.0], [2728.0, 176.0], [2704.0, 551.0], [2848.0, 197.0], [2872.0, 199.0], [2880.0, 548.0], [2960.0, 526.0], [3048.0, 542.0], [3064.0, 634.0], [2992.0, 532.0], [2984.0, 531.0], [2976.0, 522.0], [2968.0, 520.0], [3000.0, 532.0], [3040.0, 543.0], [3016.0, 460.6666666666667], [3032.0, 385.0], [3024.0, 547.0], [3056.0, 536.0], [3128.0, 429.0], [3120.0, 610.0], [3136.0, 607.0], [3072.0, 623.0], [3080.0, 632.0], [3088.0, 625.0], [3096.0, 621.0], [3112.0, 602.0], [3104.0, 613.0], [2105.0, 307.0], [2089.0, 1062.0], [2081.0, 564.0], [2097.0, 557.0], [2049.0, 579.0], [2057.0, 576.0], [2065.0, 1074.0], [2073.0, 1071.0], [2145.0, 540.0], [2153.0, 536.0], [2113.0, 549.0], [2121.0, 550.0], [2129.0, 543.0], [2137.0, 543.0], [2169.0, 531.0], [2161.0, 534.0], [2297.0, 561.1666666666666], [2201.0, 517.0], [2193.0, 513.0], [2273.0, 520.0], [2177.0, 292.0], [2249.0, 518.75], [2257.0, 514.0], [2265.0, 519.0], [2241.0, 531.0], [2289.0, 519.5], [2281.0, 519.0], [2233.0, 535.6666666666666], [2225.0, 533.5], [2209.0, 520.0], [2417.0, 558.0], [2361.0, 1016.0], [2369.0, 514.0], [2305.0, 518.0], [2313.0, 1015.0], [2345.0, 766.5], [2337.0, 1015.0], [2329.0, 1014.0], [2449.0, 559.0], [2545.0, 540.0], [2553.0, 542.0], [2505.0, 139.0], [2569.0, 572.0], [2673.0, 524.0], [2585.0, 360.0], [2561.0, 539.0], [2577.0, 568.0], [2617.0, 557.0], [2609.0, 556.0], [2601.0, 558.0], [2593.0, 561.0], [2641.0, 548.0], [2633.0, 553.0], [2625.0, 555.0], [2649.0, 545.0], [2681.0, 360.5], [2665.0, 541.0], [2657.0, 544.0], [2777.0, 363.0], [2825.0, 579.0], [3001.0, 552.0], [2985.0, 377.5], [2977.0, 16.0], [2993.0, 529.0], [3041.0, 539.0], [2969.0, 521.0], [2961.0, 525.0], [3049.0, 540.0], [3017.0, 546.0], [3009.0, 551.5], [3025.0, 545.0], [3033.0, 542.0], [3065.0, 365.66666666666663], [3057.0, 538.0], [3081.0, 625.0], [3129.0, 423.0], [3137.0, 607.0], [3097.0, 620.0], [3089.0, 623.0], [3073.0, 633.0], [3121.0, 611.0], [3113.0, 611.0], [3105.0, 620.0], [1077.0, 1055.0], [1057.0, 384.0], [1061.0, 1056.0], [1053.0, 559.0], [1041.0, 557.5], [1049.0, 1069.0], [1045.0, 1071.0], [1037.0, 564.5], [1033.0, 1075.0], [1029.0, 1076.0], [1025.0, 1076.0], [1085.0, 1053.0], [1081.0, 1053.0], [1073.0, 1055.0], [1069.0, 1055.0], [1065.0, 1056.0], [1149.0, 1017.0], [1137.0, 533.5], [1121.0, 536.0], [1125.0, 1026.0], [1113.0, 380.6666666666667], [1109.0, 385.3333333333333], [1105.0, 1046.0], [1101.0, 549.0], [1117.0, 1028.0], [1093.0, 1039.0], [1089.0, 1041.0], [1097.0, 1049.0], [1145.0, 1019.0], [1141.0, 1019.0], [1133.0, 1020.0], [1129.0, 1025.0], [1205.0, 1049.6666666666667], [1213.0, 547.0], [1201.0, 797.5], [1165.0, 869.6666666666666], [1181.0, 1038.0], [1153.0, 1016.6666666666666], [1161.0, 1016.0], [1157.0, 1016.0], [1177.0, 1556.0], [1169.0, 1551.0], [1197.0, 546.0], [1193.0, 551.5], [1189.0, 797.25], [1185.0, 1540.0], [1229.0, 58.0], [1273.0, 1037.5], [1257.0, 883.0], [1265.0, 1040.0], [1261.0, 1033.0], [1253.0, 1535.0], [1245.0, 1046.0], [1225.0, 1034.0], [1221.0, 1549.0], [1241.0, 1040.0], [1237.0, 1034.0], [1233.0, 1041.0], [1337.0, 545.0], [1309.0, 1039.6666666666667], [1301.0, 712.3333333333334], [1297.0, 1043.0], [1341.0, 1039.0], [1329.0, 1031.0], [1289.0, 1042.0], [1285.0, 1038.0], [1281.0, 1035.0], [1325.0, 1032.0], [1321.0, 1032.0], [1317.0, 1029.0], [1313.0, 1532.0], [1349.0, 54.0], [1345.0, 54.0], [1405.0, 1041.0], [1393.0, 1032.0], [1385.0, 1029.0], [1377.0, 1026.0], [1369.0, 1024.0], [1365.0, 1030.0], [1357.0, 1024.0], [1417.0, 534.0], [1465.0, 56.0], [1433.0, 769.75], [1445.0, 54.0], [1429.0, 1005.0], [1421.0, 1004.0], [1413.0, 1004.0], [1409.0, 1533.0], [1473.0, 57.0], [1493.0, 60.0], [1513.0, 62.0], [1593.0, 548.5], [1597.0, 544.5], [1661.0, 1057.0], [1649.0, 556.0], [1621.0, 564.0], [1617.0, 1068.0], [1629.0, 1062.0], [1605.0, 1026.0], [1601.0, 1030.0], [1613.0, 1068.0], [1609.0, 1026.0], [1625.0, 1063.0], [1645.0, 556.0], [1657.0, 1058.0], [1653.0, 1055.0], [1641.0, 1056.0], [1637.0, 1061.0], [1633.0, 1061.0], [1725.0, 569.0], [1685.0, 554.0], [1681.0, 1043.0], [1689.0, 1045.0], [1701.0, 545.5], [1717.0, 568.5], [1721.0, 1083.0], [1713.0, 1085.0], [1677.0, 1051.0], [1673.0, 1050.0], [1669.0, 1048.0], [1665.0, 1056.0], [1693.0, 1044.0], [1709.0, 1086.0], [1705.0, 1024.0], [1697.0, 1042.0], [1733.0, 1088.0], [1729.0, 55.0], [1737.0, 1085.0], [1757.0, 1076.0], [1753.0, 1066.0], [1749.0, 1083.0], [1745.0, 1084.0], [1761.0, 568.0], [1777.0, 394.0], [1741.0, 1085.0], [1773.0, 1067.0], [1769.0, 1062.0], [1765.0, 1076.0], [1789.0, 1054.0], [1785.0, 1055.0], [1781.0, 1054.0], [1801.0, 1075.0], [1841.0, 559.5], [1793.0, 556.0], [1797.0, 1078.0], [1805.0, 1075.0], [1845.0, 1059.0], [1849.0, 1057.0], [1853.0, 559.5], [1809.0, 566.0], [1813.0, 1072.0], [1817.0, 1073.0], [1821.0, 1066.0], [1829.0, 1064.0], [1825.0, 1065.0], [1833.0, 1063.0], [1837.0, 1064.0], [1905.0, 639.0], [1865.0, 49.0], [1909.0, 637.0], [1877.0, 51.0], [1889.0, 932.625], [1901.0, 640.0], [1897.0, 766.4545454545454], [1893.0, 1056.0], [1913.0, 344.5], [1917.0, 599.5], [1925.0, 631.0], [1973.0, 610.0], [1981.0, 608.0], [1929.0, 340.5], [1921.0, 634.0], [1969.0, 616.0], [1933.0, 629.0], [1941.0, 596.0], [1937.0, 1136.0], [1945.0, 621.0], [1949.0, 338.5], [1961.0, 338.0], [1965.0, 1124.0], [1953.0, 619.0], [1957.0, 617.0], [1977.0, 609.0], [1997.0, 605.0], [2037.0, 578.0], [2045.0, 580.0], [1985.0, 334.0], [2033.0, 1091.0], [1993.0, 605.0], [1989.0, 1114.0], [2009.0, 597.0], [2005.0, 598.0], [2001.0, 603.0], [2013.0, 596.0], [2029.0, 1093.0], [2025.0, 1087.0], [2021.0, 586.0], [2017.0, 588.0], [2041.0, 582.0], [2050.0, 579.0], [2162.0, 533.0], [2066.0, 566.0], [2058.0, 574.0], [2106.0, 556.0], [2098.0, 555.0], [2090.0, 560.0], [2082.0, 563.0], [2074.0, 567.0], [2146.0, 540.0], [2154.0, 536.0], [2170.0, 293.5], [2114.0, 550.0], [2122.0, 544.0], [2130.0, 543.0], [2138.0, 542.0], [2274.0, 546.0], [2250.0, 521.0], [2258.0, 517.5], [2242.0, 528.75], [2194.0, 521.0], [2186.0, 524.0], [2178.0, 526.0], [2282.0, 552.25], [2298.0, 519.0], [2234.0, 545.0], [2226.0, 544.5], [2218.0, 519.5], [2210.0, 515.0], [2322.0, 1007.0], [2306.0, 519.0], [2554.0, 453.25], [2546.0, 539.0], [2674.0, 552.0], [2602.0, 356.0], [2594.0, 560.0], [2610.0, 426.0], [2650.0, 351.0], [2642.0, 548.0], [2634.0, 548.0], [2626.0, 547.0], [2666.0, 354.5], [2682.0, 553.0], [2658.0, 539.0], [2562.0, 538.0], [2570.0, 573.0], [2578.0, 569.0], [2586.0, 571.0], [2618.0, 558.0], [2738.0, 177.0], [2922.0, 205.0], [2842.0, 389.0], [2834.0, 548.0], [2866.0, 199.0], [2858.0, 547.0], [2962.0, 373.0], [3042.0, 384.0], [2954.0, 209.0], [2970.0, 521.0], [3002.0, 389.0], [2994.0, 524.0], [2986.0, 529.0], [2978.0, 16.0], [3034.0, 542.0], [3026.0, 544.0], [3018.0, 544.0], [3010.0, 548.0], [3066.0, 634.0], [3058.0, 536.0], [3050.0, 534.0], [3082.0, 632.0], [3138.0, 607.0], [3098.0, 621.0], [3090.0, 625.0], [3074.0, 623.0], [3130.0, 608.0], [3122.0, 610.0], [3114.0, 602.0], [3106.0, 606.0], [2059.0, 574.0], [2147.0, 297.0], [2171.0, 529.0], [2155.0, 295.5], [2051.0, 1083.0], [2067.0, 1072.0], [2075.0, 1070.0], [2107.0, 552.0], [2099.0, 556.0], [2091.0, 1062.0], [2083.0, 563.0], [2115.0, 549.0], [2123.0, 549.0], [2131.0, 544.0], [2163.0, 533.0], [2139.0, 543.0], [2291.0, 569.5], [2283.0, 544.0], [2187.0, 59.0], [2179.0, 526.0], [2243.0, 539.2857142857143], [2259.0, 515.0], [2267.0, 519.5], [2299.0, 521.0], [2275.0, 561.5], [2203.0, 517.0], [2235.0, 533.0], [2219.0, 550.1111111111111], [2227.0, 515.0], [2211.0, 516.0], [2323.0, 517.0], [2363.0, 1017.0], [2347.0, 765.0], [2339.0, 1015.0], [2331.0, 765.5], [2451.0, 559.0], [2555.0, 552.0], [2547.0, 539.0], [2571.0, 572.0], [2675.0, 553.0], [2587.0, 571.0], [2579.0, 569.0], [2659.0, 538.0], [2611.0, 555.0], [2603.0, 560.0], [2595.0, 562.0], [2563.0, 539.0], [2619.0, 556.0], [2627.0, 354.5], [2635.0, 553.0], [2643.0, 548.0], [2651.0, 544.0], [2667.0, 538.0], [2819.0, 195.0], [2827.0, 195.0], [2931.0, 464.33333333333337], [2939.0, 376.0], [2971.0, 521.0], [3059.0, 536.0], [2995.0, 525.0], [2987.0, 529.0], [2979.0, 520.0], [2963.0, 527.0], [3003.0, 553.0], [3011.0, 546.0], [3019.0, 545.0], [3027.0, 546.0], [3035.0, 547.0], [3067.0, 633.0], [3051.0, 534.0], [3043.0, 538.0], [3075.0, 433.0], [3131.0, 609.0], [3099.0, 427.5], [3091.0, 623.0], [3083.0, 626.0], [3107.0, 428.0], [3115.0, 430.5], [3123.0, 431.0], [541.0, 1551.0], [519.0, 802.0], [517.0, 1550.0], [515.0, 1554.0], [513.0, 1549.5], [543.0, 1550.5], [539.0, 1548.5], [537.0, 1550.0], [535.0, 1554.0], [531.0, 1548.5], [529.0, 1553.0], [527.0, 1548.0], [525.0, 1554.0], [523.0, 1554.0], [569.0, 1248.0], [559.0, 803.0], [567.0, 1544.0], [563.0, 1545.0], [561.0, 1552.0], [555.0, 1545.0], [551.0, 1551.0], [549.0, 1544.0], [547.0, 1544.0], [603.0, 803.0], [589.0, 798.5], [607.0, 1547.0], [605.0, 1548.0], [595.0, 1547.0], [593.0, 1546.5], [591.0, 1546.0], [579.0, 1550.0], [577.0, 1542.5], [583.0, 1547.0], [581.0, 1547.0], [587.0, 1545.5], [585.0, 1545.0], [637.0, 61.0], [629.0, 59.0], [615.0, 725.3333333333334], [613.0, 1800.5], [611.0, 1545.0], [609.0, 1546.0], [639.0, 1539.0], [635.0, 2056.0], [633.0, 2056.0], [627.0, 1546.0], [625.0, 1545.0], [623.0, 1545.0], [619.0, 1545.0], [671.0, 53.0], [669.0, 53.0], [667.0, 52.0], [663.0, 52.0], [661.0, 57.0], [659.0, 63.0], [653.0, 62.0], [697.0, 57.0], [691.0, 56.0], [675.0, 54.0], [735.0, 47.0], [727.0, 61.0], [725.0, 60.0], [761.0, 49.0], [743.0, 46.0], [765.0, 49.0], [739.0, 47.0], [737.0, 47.0], [749.0, 47.0], [745.0, 47.0], [799.0, 70.5], [773.0, 51.0], [785.0, 67.0], [791.0, 67.0], [789.0, 67.0], [793.0, 39.333333333333336], [781.0, 68.0], [777.0, 38.0], [771.0, 50.333333333333336], [831.0, 1049.0], [829.0, 432.0], [823.0, 788.0], [819.0, 802.5], [817.0, 74.0], [811.0, 1035.6666666666667], [825.0, 1532.5], [815.0, 1533.0], [807.0, 1530.0], [805.0, 1530.0], [839.0, 787.0], [855.0, 46.0], [853.0, 1538.0], [851.0, 1538.0], [849.0, 432.5], [843.0, 45.0], [841.0, 1537.0], [847.0, 431.25], [833.0, 791.0], [859.0, 803.5], [863.0, 1539.0], [861.0, 1538.0], [857.0, 802.0], [835.0, 800.5], [893.0, 53.0], [887.0, 429.5], [885.0, 1045.3333333333333], [875.0, 548.6666666666667], [873.0, 1540.0], [877.0, 1538.0], [879.0, 805.0], [895.0, 1532.0], [889.0, 1533.0], [869.0, 1538.0], [867.0, 1538.5], [865.0, 1539.0], [883.0, 1538.5], [881.0, 1539.0], [921.0, 793.5], [927.0, 47.0], [923.0, 1537.5], [901.0, 547.6666666666667], [903.0, 1534.0], [899.0, 1042.6666666666667], [911.0, 178.25], [897.0, 1535.0], [905.0, 424.5], [919.0, 793.5], [917.0, 417.25], [915.0, 42.0], [913.0, 1041.3333333333333], [953.0, 45.0], [943.0, 784.5], [955.0, 792.5], [933.0, 419.5], [931.0, 1539.0], [935.0, 1537.5], [929.0, 802.0], [951.0, 1036.6666666666667], [949.0, 1539.0], [947.0, 1540.5], [945.0, 1533.5], [959.0, 1538.0], [941.0, 784.5], [937.0, 43.5], [939.0, 1539.6666666666667], [967.0, 792.5], [989.0, 550.0], [991.0, 545.6666666666667], [977.0, 1546.0], [987.0, 801.0], [985.0, 1553.0], [979.0, 802.0], [983.0, 1552.0], [981.0, 1555.0], [975.0, 423.25], [971.0, 1162.75], [969.0, 1525.0], [973.0, 1549.0], [965.0, 539.0], [963.0, 1525.0], [1021.0, 1076.0], [1017.0, 565.5], [999.0, 1537.0], [997.0, 1548.0], [1003.0, 798.5], [1001.0, 1538.0], [1007.0, 1542.0], [993.0, 1547.0], [1005.0, 1543.0], [995.0, 799.5], [1009.0, 797.5], [1011.0, 797.5], [1013.0, 797.5], [1015.0, 1578.0], [1023.0, 1076.0], [1019.0, 1077.0], [1082.0, 1053.0], [1086.0, 380.3333333333333], [1058.0, 1068.0], [1070.0, 553.5], [1062.0, 388.0], [1050.0, 383.6666666666667], [1046.0, 552.0], [1042.0, 1062.0], [1078.0, 1049.0], [1074.0, 1054.0], [1054.0, 1058.0], [1030.0, 1075.0], [1026.0, 1075.0], [1038.0, 1074.0], [1034.0, 1064.0], [1066.0, 1056.0], [1146.0, 50.0], [1102.0, 543.5], [1098.0, 1048.0], [1130.0, 536.0], [1110.0, 543.0], [1106.0, 1046.0], [1118.0, 1028.0], [1090.0, 1051.0], [1114.0, 1029.0], [1094.0, 552.0], [1150.0, 1017.0], [1126.0, 1026.0], [1122.0, 1027.0], [1142.0, 1019.0], [1138.0, 1018.0], [1134.0, 1019.0], [1158.0, 532.5], [1162.0, 532.5], [1166.0, 1545.0], [1206.0, 1048.0], [1202.0, 1547.0], [1214.0, 1040.0], [1210.0, 1043.5], [1154.0, 48.0], [1198.0, 385.3333333333333], [1186.0, 550.3333333333333], [1182.0, 709.3333333333334], [1178.0, 50.0], [1170.0, 554.0], [1174.0, 803.0], [1270.0, 53.0], [1230.0, 58.0], [1278.0, 710.6666666666666], [1246.0, 63.0], [1218.0, 1044.5], [1222.0, 59.0], [1262.0, 1037.0], [1258.0, 1042.0], [1250.0, 1533.5], [1242.0, 1041.0], [1234.0, 1048.0], [1286.0, 56.0], [1282.0, 55.0], [1314.0, 62.0], [1306.0, 706.0], [1342.0, 1038.0], [1338.0, 1038.0], [1322.0, 1029.0], [1294.0, 1038.3333333333333], [1290.0, 1035.0], [1398.0, 1534.0], [1378.0, 542.0], [1362.0, 703.6666666666666], [1366.0, 1030.0], [1386.0, 543.5], [1402.0, 1033.0], [1390.0, 1031.25], [1382.0, 1533.5], [1374.0, 1024.0], [1346.0, 1038.0], [1354.0, 1279.5], [1350.0, 1526.0], [1370.0, 1024.0], [1414.0, 533.0], [1410.0, 545.5], [1458.0, 55.0], [1470.0, 57.0], [1450.0, 54.0], [1434.0, 1005.0], [1430.0, 1005.0], [1422.0, 1004.0], [1482.0, 58.0], [1498.0, 61.0], [1546.0, 53.0], [1578.0, 57.0], [1582.0, 57.0], [1598.0, 1027.0], [1594.0, 1029.0], [1590.0, 1053.134615384615], [1654.0, 557.5], [1610.0, 546.0], [1614.0, 565.5], [1650.0, 1057.0], [1606.0, 550.0], [1602.0, 1027.0], [1662.0, 557.0], [1658.0, 1056.0], [1626.0, 563.5], [1622.0, 1064.0], [1618.0, 1069.0], [1630.0, 562.5], [1646.0, 389.6666666666667], [1642.0, 1059.0], [1638.0, 1059.0], [1634.0, 1059.0], [1722.0, 1084.0], [1678.0, 554.5], [1674.0, 554.0], [1670.0, 1054.0], [1666.0, 1049.0], [1718.0, 1086.0], [1694.0, 553.5], [1690.0, 1045.0], [1686.0, 1045.0], [1682.0, 1048.0], [1726.0, 1088.0], [1702.0, 1026.0], [1698.0, 1042.0], [1714.0, 1085.0], [1710.0, 1086.0], [1706.0, 1024.0], [1758.0, 1076.0], [1734.0, 570.0], [1738.0, 1084.0], [1742.0, 1083.0], [1746.0, 570.5], [1750.0, 1067.0], [1754.0, 1075.0], [1730.0, 1085.5], [1786.0, 553.5], [1790.0, 1065.0], [1762.0, 1062.0], [1778.0, 390.3333333333333], [1782.0, 1054.0], [1766.0, 561.5], [1770.0, 1063.0], [1774.0, 1068.0], [1846.0, 1063.0], [1810.0, 1075.0], [1814.0, 1069.0], [1818.0, 562.5], [1826.0, 1073.0], [1830.0, 1073.0], [1834.0, 1073.0], [1838.0, 1072.0], [1850.0, 1063.0], [1842.0, 1072.0], [1822.0, 1073.0], [1806.0, 1076.0], [1802.0, 1075.0], [1798.0, 1078.0], [1794.0, 1078.0], [1890.0, 1058.5], [1914.0, 637.0], [1894.0, 1061.0], [1898.0, 641.0], [1902.0, 639.0], [1918.0, 1146.0], [1910.0, 638.0], [1906.0, 638.0], [1870.0, 1058.0], [1974.0, 337.0], [1978.0, 613.0], [1938.0, 623.0], [1942.0, 621.0], [1946.0, 621.0], [1950.0, 622.0], [1922.0, 630.0], [1954.0, 339.5], [1958.0, 618.0], [1962.0, 617.0], [1966.0, 615.0], [1982.0, 611.0], [1970.0, 611.0], [1934.0, 624.0], [1930.0, 629.0], [1926.0, 629.0], [1994.0, 582.5], [2042.0, 1088.0], [1990.0, 329.0], [1986.0, 609.0], [2014.0, 595.0], [2010.0, 592.0], [2038.0, 1089.0], [2034.0, 580.0], [1998.0, 601.0], [2046.0, 318.5], [2002.0, 581.5], [2006.0, 325.5], [2026.0, 321.5], [2022.0, 1096.0], [2018.0, 593.0], [2030.0, 586.0], [2148.0, 539.0], [2060.0, 315.5], [2052.0, 578.0], [2068.0, 571.0], [2108.0, 555.0], [2156.0, 536.0], [2076.0, 567.0], [2164.0, 532.0], [2172.0, 529.0], [2116.0, 547.0], [2084.0, 311.0], [2092.0, 559.0], [2100.0, 307.5], [2140.0, 297.0], [2132.0, 544.0], [2124.0, 545.0], [2276.0, 547.0], [2284.0, 557.75], [2180.0, 526.0], [2188.0, 524.0], [2244.0, 535.3333333333334], [2252.0, 520.0], [2268.0, 521.0], [2300.0, 1009.0], [2292.0, 519.0], [2204.0, 516.5], [2236.0, 535.0], [2212.0, 521.0], [2220.0, 516.0], [2228.0, 517.0], [2356.0, 1016.0], [2364.0, 1017.0], [2348.0, 516.0], [2340.0, 517.0], [2324.0, 517.0], [2316.0, 1015.6666666666666], [2308.0, 519.0], [2556.0, 556.5], [2532.0, 145.0], [2508.0, 416.33333333333337], [2492.0, 138.0], [2548.0, 538.0], [2540.0, 560.2690058479532], [2516.0, 143.0], [2524.0, 561.5], [2620.0, 556.0], [2676.0, 362.5], [2596.0, 559.0], [2604.0, 556.0], [2612.0, 554.0], [2564.0, 543.0], [2572.0, 569.0], [2644.0, 547.0], [2636.0, 548.0], [2652.0, 545.0], [2588.0, 572.0], [2580.0, 569.0], [2660.0, 539.0], [2628.0, 548.0], [2668.0, 538.0], [2796.0, 549.0], [2860.0, 198.0], [2868.0, 546.0], [3004.0, 551.0], [2996.0, 451.3333333333333], [2988.0, 530.0], [2980.0, 15.0], [2964.0, 521.0], [2972.0, 522.0], [3044.0, 543.0], [3028.0, 546.0], [3020.0, 546.0], [3036.0, 539.0], [3068.0, 433.0], [3012.0, 547.0], [3060.0, 537.0], [3052.0, 534.0], [3132.0, 598.0], [3108.0, 608.5], [3076.0, 633.0], [3084.0, 633.0], [3092.0, 623.0], [3100.0, 609.0], [3124.0, 608.0], [3116.0, 606.0], [2109.0, 300.5], [2165.0, 533.0], [2093.0, 394.3333333333333], [2085.0, 563.0], [2101.0, 555.0], [2053.0, 1082.0], [2061.0, 573.0], [2069.0, 1072.0], [2077.0, 1069.0], [2149.0, 540.0], [2117.0, 301.0], [2125.0, 548.0], [2133.0, 544.0], [2141.0, 541.0], [2173.0, 292.5], [2157.0, 536.0], [2293.0, 519.0], [2285.0, 543.0], [2205.0, 556.8333333333334], [2197.0, 521.0], [2181.0, 526.0], [2237.0, 544.8], [2245.0, 541.5], [2261.0, 515.0], [2269.0, 519.0], [2301.0, 1015.0], [2277.0, 560.5], [2229.0, 549.0], [2221.0, 523.0], [2213.0, 516.0], [2365.0, 1017.0], [2325.0, 1014.0], [2349.0, 1015.0], [2341.0, 1016.5], [2333.0, 1014.5], [2557.0, 420.0], [2541.0, 349.0], [2549.0, 537.0], [2445.0, 560.0], [2509.0, 603.0], [2501.0, 347.5], [2565.0, 540.0], [2661.0, 355.0], [2621.0, 548.0], [2573.0, 572.0], [2581.0, 569.0], [2613.0, 555.0], [2605.0, 562.0], [2597.0, 561.0], [2645.0, 352.5], [2637.0, 553.0], [2629.0, 554.0], [2653.0, 544.0], [2677.0, 553.0], [2669.0, 538.0], [2589.0, 572.0], [2701.0, 173.0], [2709.0, 174.0], [2749.0, 177.0], [2805.0, 180.0], [2757.0, 550.0], [2885.0, 200.0], [2893.0, 202.0], [2917.0, 394.5], [3005.0, 588.0], [3053.0, 384.0], [2981.0, 15.0], [2989.0, 374.5], [2997.0, 524.0], [2973.0, 522.0], [2965.0, 521.0], [3045.0, 541.0], [3021.0, 387.0], [3013.0, 548.0], [3029.0, 545.0], [3037.0, 540.0], [3069.0, 634.0], [3061.0, 536.0], [3077.0, 629.0], [3125.0, 609.0], [3101.0, 621.0], [3093.0, 624.0], [3085.0, 624.0], [3133.0, 598.0], [3117.0, 610.0], [3109.0, 620.0], [1039.0, 557.5], [1027.0, 565.0], [1087.0, 546.0], [1063.0, 1056.0], [1059.0, 1057.0], [1083.0, 1053.0], [1079.0, 1055.0], [1075.0, 1055.0], [1071.0, 549.0], [1067.0, 553.0], [1043.0, 559.5], [1051.0, 1068.0], [1047.0, 1072.0], [1055.0, 566.0], [1035.0, 558.0], [1031.0, 1076.0], [1151.0, 47.0], [1143.0, 532.5], [1139.0, 1019.0], [1147.0, 1024.5], [1123.0, 540.0], [1127.0, 1026.0], [1135.0, 534.0], [1131.0, 1025.0], [1103.0, 551.0], [1099.0, 381.0], [1095.0, 553.0], [1091.0, 545.0], [1119.0, 1028.0], [1115.0, 1028.0], [1111.0, 1044.0], [1107.0, 1035.0], [1211.0, 58.0], [1167.0, 799.5], [1163.0, 1016.0], [1159.0, 1018.0], [1155.0, 1016.0], [1183.0, 1539.0], [1179.0, 1038.0], [1175.0, 1554.0], [1171.0, 1552.0], [1191.0, 877.6666666666667], [1203.0, 57.0], [1195.0, 552.0], [1187.0, 797.5], [1215.0, 1041.0], [1207.0, 1039.0], [1199.0, 1040.0], [1271.0, 1036.3333333333333], [1251.0, 799.0], [1263.0, 66.0], [1235.0, 712.3333333333334], [1239.0, 62.0], [1275.0, 1038.0], [1259.0, 1033.0], [1255.0, 1536.0], [1247.0, 1040.0], [1223.0, 1550.5], [1243.0, 1047.0], [1343.0, 1038.0], [1295.0, 547.0], [1291.0, 549.5], [1287.0, 1038.5], [1283.0, 1037.5], [1327.0, 64.0], [1299.0, 712.0], [1307.0, 1529.0], [1303.0, 1032.5], [1311.0, 61.0], [1339.0, 1037.0], [1335.0, 1036.4285714285713], [1323.0, 1030.0], [1319.0, 1029.0], [1315.0, 1029.0], [1403.0, 1032.0], [1355.0, 55.0], [1371.0, 57.0], [1347.0, 1274.5], [1363.0, 1037.0], [1399.0, 546.0], [1407.0, 1531.0], [1395.0, 1032.0], [1391.0, 1032.0], [1383.0, 1534.0], [1379.0, 1026.0], [1463.0, 55.0], [1427.0, 1004.0], [1423.0, 1004.0], [1419.0, 1006.0], [1415.0, 1005.0], [1411.0, 1021.0], [1487.0, 59.0], [1567.0, 55.0], [1599.0, 1030.0], [1595.0, 1029.0], [1591.0, 1030.0], [1659.0, 557.5], [1603.0, 544.5], [1607.0, 1026.0], [1615.0, 1068.0], [1611.0, 1029.0], [1631.0, 1060.0], [1627.0, 1062.0], [1623.0, 1063.0], [1619.0, 1068.0], [1635.0, 562.5], [1643.0, 555.5], [1647.0, 555.5], [1663.0, 1050.0], [1655.0, 1054.0], [1651.0, 1055.0], [1639.0, 1056.0], [1723.0, 1083.0], [1715.0, 1084.0], [1667.0, 556.0], [1671.0, 1047.0], [1679.0, 1044.0], [1675.0, 1045.0], [1695.0, 1045.0], [1691.0, 1044.0], [1687.0, 1046.0], [1683.0, 1046.0], [1727.0, 1089.0], [1703.0, 1025.0], [1699.0, 1042.0], [1719.0, 568.5], [1707.0, 538.5], [1711.0, 570.0], [1735.0, 1084.0], [1779.0, 559.5], [1759.0, 1076.0], [1755.0, 1075.0], [1751.0, 1066.0], [1747.0, 1084.0], [1739.0, 570.5], [1743.0, 1084.0], [1775.0, 564.5], [1771.0, 1063.0], [1767.0, 1062.0], [1763.0, 1075.0], [1791.0, 1054.0], [1787.0, 1055.0], [1783.0, 1054.0], [1799.0, 1079.0], [1795.0, 395.6666666666667], [1803.0, 565.0], [1807.0, 1076.0], [1847.0, 559.0], [1843.0, 1058.0], [1851.0, 1059.0], [1811.0, 1078.0], [1815.0, 1072.0], [1819.0, 1071.0], [1823.0, 1066.0], [1831.0, 561.0], [1827.0, 1065.0], [1835.0, 1064.0], [1839.0, 559.5], [1891.0, 1062.0], [1907.0, 345.5], [1911.0, 637.0], [1859.0, 48.0], [1875.0, 51.0], [1883.0, 52.0], [1903.0, 346.0], [1899.0, 640.0], [1895.0, 1058.6666666666667], [1915.0, 636.0], [1919.0, 1145.0], [1923.0, 632.0], [1951.0, 620.0], [1927.0, 630.0], [1935.0, 1137.0], [1931.0, 629.0], [1975.0, 610.0], [1939.0, 1135.0], [1943.0, 624.0], [1947.0, 620.0], [1963.0, 337.0], [1967.0, 591.5], [1983.0, 607.0], [1955.0, 618.0], [1959.0, 617.0], [1979.0, 608.0], [1991.0, 1114.0], [2035.0, 572.5], [1999.0, 604.0], [1995.0, 604.0], [1987.0, 606.0], [2039.0, 583.0], [2011.0, 321.5], [2007.0, 598.0], [2003.0, 602.0], [2015.0, 589.0], [2019.0, 323.5], [2031.0, 572.5], [2027.0, 588.0], [2023.0, 1095.0], [2047.0, 580.0], [2043.0, 581.0], [2054.0, 317.0], [2062.0, 573.0], [2110.0, 554.0], [2102.0, 553.0], [2094.0, 556.0], [2086.0, 561.0], [2078.0, 564.0], [2070.0, 570.0], [2150.0, 538.0], [2158.0, 535.0], [2166.0, 531.0], [2174.0, 213.66666666666666], [2118.0, 546.0], [2126.0, 297.5], [2134.0, 298.5], [2142.0, 542.0], [2286.0, 545.5], [2246.0, 541.625], [2254.0, 521.0], [2262.0, 517.5], [2206.0, 530.0], [2198.0, 518.0], [2182.0, 525.0], [2278.0, 519.0], [2294.0, 558.8], [2302.0, 1015.0], [2238.0, 528.0], [2230.0, 529.0], [2222.0, 516.0], [2366.0, 555.0], [2358.0, 1016.0], [2350.0, 1015.0], [2326.0, 1015.0], [2318.0, 1016.5], [2310.0, 681.6666666666666], [2550.0, 342.0], [2558.0, 557.6666666666666], [2510.0, 604.3333333333334], [2502.0, 606.0], [2526.0, 355.5], [2542.0, 538.0], [2678.0, 553.0], [2598.0, 557.0], [2606.0, 555.0], [2646.0, 548.0], [2638.0, 548.0], [2630.0, 547.0], [2654.0, 544.0], [2670.0, 538.0], [2662.0, 538.0], [2622.0, 555.0], [2566.0, 571.0], [2574.0, 569.0], [2582.0, 569.0], [2590.0, 571.0], [2614.0, 555.0], [2766.0, 178.0], [2830.0, 196.0], [2862.0, 582.0], [2902.0, 393.5], [2910.0, 204.0], [2942.0, 208.0], [2974.0, 523.0], [3062.0, 635.0], [2966.0, 527.0], [2998.0, 529.0], [2990.0, 527.0], [2982.0, 529.0], [3006.0, 551.0], [3038.0, 384.0], [3030.0, 540.0], [3022.0, 546.0], [3014.0, 549.0], [3070.0, 631.0], [3054.0, 524.0], [3046.0, 542.0], [3078.0, 632.0], [3126.0, 595.0], [3102.0, 614.0], [3094.0, 621.0], [3086.0, 624.0], [3134.0, 607.0], [3118.0, 610.0], [3110.0, 613.0], [2055.0, 1081.0], [2111.0, 550.0], [2063.0, 1075.0], [2071.0, 1071.0], [2079.0, 565.0], [2103.0, 555.0], [2095.0, 557.0], [2087.0, 560.0], [2167.0, 293.5], [2175.0, 214.0], [2119.0, 550.0], [2127.0, 543.0], [2135.0, 541.0], [2159.0, 535.0], [2151.0, 537.0], [2143.0, 541.0], [2295.0, 519.0], [2191.0, 524.0], [2239.0, 518.0], [2183.0, 525.0], [2255.0, 517.0], [2247.0, 514.0], [2263.0, 518.0], [2271.0, 520.0], [2303.0, 518.0], [2287.0, 573.0], [2207.0, 516.0], [2199.0, 544.6666666666666], [2231.0, 520.0], [2215.0, 544.6666666666666], [2367.0, 1016.5], [2319.0, 518.0], [2311.0, 1008.0], [2343.0, 766.5], [2335.0, 766.0], [2327.0, 1013.0], [2495.0, 138.0], [2559.0, 554.0], [2519.0, 554.0], [2551.0, 538.0], [2543.0, 539.0], [2567.0, 360.5], [2591.0, 361.5], [2583.0, 569.0], [2575.0, 568.0], [2663.0, 539.0], [2615.0, 355.5], [2607.0, 556.0], [2599.0, 558.0], [2623.0, 548.0], [2631.0, 554.0], [2639.0, 552.0], [2647.0, 548.0], [2655.0, 544.0], [2687.0, 173.0], [2679.0, 553.0], [2671.0, 537.0], [2719.0, 174.0], [2759.0, 178.0], [2791.0, 180.0], [2815.0, 547.0], [2743.0, 553.0], [2887.0, 583.0], [2959.0, 535.6240601503758], [2975.0, 222.0], [2999.0, 569.0], [2991.0, 528.0], [2983.0, 530.0], [3007.0, 549.0], [2967.0, 527.0], [3071.0, 633.0], [3015.0, 545.0], [3023.0, 542.0], [3031.0, 548.0], [3039.0, 546.0], [3063.0, 635.0], [3055.0, 524.0], [3047.0, 541.0], [3087.0, 625.0], [3095.0, 623.0], [3079.0, 625.0], [3103.0, 620.0], [3111.0, 612.0], [3135.0, 606.0], [3127.0, 596.0], [3119.0, 611.0], [1.0, 3069.0]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}, {"data": [[1280.9195999999997, 741.7113999999993]], "isOverall": false, "label": "JDBC Request system_info-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3138.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6998855E12, "maxY": 11847.866666666667, "series": [{"data": [[1.6998855E12, 11847.866666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6998855E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6998855E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 741.7113999999993, "minX": 1.6998855E12, "maxY": 741.7113999999993, "series": [{"data": [[1.6998855E12, 741.7113999999993]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6998855E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.9673999999999979, "minX": 1.6998855E12, "maxY": 0.9673999999999979, "series": [{"data": [[1.6998855E12, 0.9673999999999979]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6998855E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 741.6837999999995, "minX": 1.6998855E12, "maxY": 741.6837999999995, "series": [{"data": [[1.6998855E12, 741.6837999999995]], "isOverall": false, "label": "JDBC Request system_info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6998855E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.6998855E12, "maxY": 63.0, "series": [{"data": [[1.6998855E12, 63.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6998855E12, 58.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6998855E12, 61.41]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6998855E12, 59.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6998855E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6998855E12, 42.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6998855E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 91.0, "maxY": 3071.0, "series": [{"data": [[1198.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[548.0, 1576.0], [1198.0, 4.0], [1460.0, 1061.0], [91.0, 3071.0], [1703.0, 537.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1703.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 91.0, "maxY": 42.0, "series": [{"data": [[1198.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[548.0, 0.0], [1198.0, 0.0], [1460.0, 0.0], [91.0, 0.0], [1703.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1703.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.6998855E12, "maxY": 83.33333333333333, "series": [{"data": [[1.6998855E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6998855E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.6998855E12, "maxY": 80.8, "series": [{"data": [[1.6998855E12, 2.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6998855E12, 80.8]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6998855E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.6998855E12, "maxY": 80.8, "series": [{"data": [[1.6998855E12, 80.8]], "isOverall": false, "label": "JDBC Request system_info-failure", "isController": false}, {"data": [[1.6998855E12, 2.533333333333333]], "isOverall": false, "label": "JDBC Request system_info-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6998855E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.6998855E12, "maxY": 80.8, "series": [{"data": [[1.6998855E12, 2.533333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6998855E12, 80.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6998855E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

