/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3637.0, "series": [{"data": [[0.0, 1.0], [0.1, 4.0], [0.2, 4.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 9.0], [2.1, 9.0], [2.2, 11.0], [2.3, 11.0], [2.4, 13.0], [2.5, 15.0], [2.6, 17.0], [2.7, 19.0], [2.8, 19.0], [2.9, 20.0], [3.0, 20.0], [3.1, 21.0], [3.2, 21.0], [3.3, 21.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 23.0], [3.8, 24.0], [3.9, 27.0], [4.0, 27.0], [4.1, 28.0], [4.2, 28.0], [4.3, 29.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 31.0], [5.1, 31.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 33.0], [5.9, 33.0], [6.0, 34.0], [6.1, 34.0], [6.2, 35.0], [6.3, 35.0], [6.4, 35.0], [6.5, 35.0], [6.6, 36.0], [6.7, 36.0], [6.8, 36.0], [6.9, 36.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 38.0], [7.4, 38.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 41.0], [8.5, 41.0], [8.6, 41.0], [8.7, 41.0], [8.8, 42.0], [8.9, 42.0], [9.0, 42.0], [9.1, 42.0], [9.2, 43.0], [9.3, 43.0], [9.4, 43.0], [9.5, 43.0], [9.6, 44.0], [9.7, 44.0], [9.8, 44.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 45.0], [10.3, 45.0], [10.4, 45.0], [10.5, 45.0], [10.6, 45.0], [10.7, 46.0], [10.8, 46.0], [10.9, 46.0], [11.0, 46.0], [11.1, 46.0], [11.2, 46.0], [11.3, 46.0], [11.4, 46.0], [11.5, 47.0], [11.6, 47.0], [11.7, 47.0], [11.8, 47.0], [11.9, 47.0], [12.0, 47.0], [12.1, 47.0], [12.2, 47.0], [12.3, 48.0], [12.4, 48.0], [12.5, 48.0], [12.6, 48.0], [12.7, 48.0], [12.8, 48.0], [12.9, 48.0], [13.0, 48.0], [13.1, 48.0], [13.2, 48.0], [13.3, 48.0], [13.4, 48.0], [13.5, 49.0], [13.6, 49.0], [13.7, 49.0], [13.8, 49.0], [13.9, 49.0], [14.0, 49.0], [14.1, 49.0], [14.2, 49.0], [14.3, 49.0], [14.4, 50.0], [14.5, 50.0], [14.6, 50.0], [14.7, 50.0], [14.8, 50.0], [14.9, 50.0], [15.0, 50.0], [15.1, 50.0], [15.2, 50.0], [15.3, 51.0], [15.4, 51.0], [15.5, 51.0], [15.6, 51.0], [15.7, 51.0], [15.8, 51.0], [15.9, 51.0], [16.0, 52.0], [16.1, 52.0], [16.2, 52.0], [16.3, 52.0], [16.4, 52.0], [16.5, 52.0], [16.6, 52.0], [16.7, 53.0], [16.8, 53.0], [16.9, 53.0], [17.0, 53.0], [17.1, 54.0], [17.2, 54.0], [17.3, 54.0], [17.4, 54.0], [17.5, 54.0], [17.6, 55.0], [17.7, 55.0], [17.8, 55.0], [17.9, 55.0], [18.0, 56.0], [18.1, 56.0], [18.2, 56.0], [18.3, 56.0], [18.4, 56.0], [18.5, 57.0], [18.6, 57.0], [18.7, 58.0], [18.8, 58.0], [18.9, 58.0], [19.0, 59.0], [19.1, 59.0], [19.2, 59.0], [19.3, 60.0], [19.4, 60.0], [19.5, 61.0], [19.6, 64.0], [19.7, 73.0], [19.8, 83.0], [19.9, 121.0], [20.0, 123.0], [20.1, 124.0], [20.2, 126.0], [20.3, 133.0], [20.4, 133.0], [20.5, 137.0], [20.6, 139.0], [20.7, 141.0], [20.8, 144.0], [20.9, 146.0], [21.0, 147.0], [21.1, 157.0], [21.2, 187.0], [21.3, 192.0], [21.4, 197.0], [21.5, 200.0], [21.6, 205.0], [21.7, 210.0], [21.8, 214.0], [21.9, 225.0], [22.0, 231.0], [22.1, 235.0], [22.2, 240.0], [22.3, 243.0], [22.4, 252.0], [22.5, 255.0], [22.6, 257.0], [22.7, 504.0], [22.8, 504.0], [22.9, 506.0], [23.0, 506.0], [23.1, 507.0], [23.2, 507.0], [23.3, 507.0], [23.4, 507.0], [23.5, 508.0], [23.6, 508.0], [23.7, 508.0], [23.8, 509.0], [23.9, 509.0], [24.0, 509.0], [24.1, 510.0], [24.2, 510.0], [24.3, 511.0], [24.4, 511.0], [24.5, 511.0], [24.6, 512.0], [24.7, 513.0], [24.8, 513.0], [24.9, 513.0], [25.0, 514.0], [25.1, 514.0], [25.2, 514.0], [25.3, 517.0], [25.4, 519.0], [25.5, 520.0], [25.6, 522.0], [25.7, 523.0], [25.8, 523.0], [25.9, 523.0], [26.0, 523.0], [26.1, 524.0], [26.2, 524.0], [26.3, 524.0], [26.4, 525.0], [26.5, 525.0], [26.6, 526.0], [26.7, 526.0], [26.8, 528.0], [26.9, 530.0], [27.0, 531.0], [27.1, 532.0], [27.2, 533.0], [27.3, 533.0], [27.4, 534.0], [27.5, 534.0], [27.6, 535.0], [27.7, 535.0], [27.8, 535.0], [27.9, 535.0], [28.0, 536.0], [28.1, 536.0], [28.2, 537.0], [28.3, 537.0], [28.4, 537.0], [28.5, 538.0], [28.6, 538.0], [28.7, 539.0], [28.8, 540.0], [28.9, 540.0], [29.0, 541.0], [29.1, 541.0], [29.2, 542.0], [29.3, 542.0], [29.4, 543.0], [29.5, 543.0], [29.6, 544.0], [29.7, 544.0], [29.8, 545.0], [29.9, 546.0], [30.0, 547.0], [30.1, 548.0], [30.2, 552.0], [30.3, 554.0], [30.4, 555.0], [30.5, 555.0], [30.6, 557.0], [30.7, 558.0], [30.8, 559.0], [30.9, 559.0], [31.0, 560.0], [31.1, 561.0], [31.2, 561.0], [31.3, 562.0], [31.4, 563.0], [31.5, 565.0], [31.6, 569.0], [31.7, 570.0], [31.8, 570.0], [31.9, 571.0], [32.0, 571.0], [32.1, 572.0], [32.2, 572.0], [32.3, 573.0], [32.4, 574.0], [32.5, 575.0], [32.6, 575.0], [32.7, 576.0], [32.8, 576.0], [32.9, 577.0], [33.0, 581.0], [33.1, 583.0], [33.2, 587.0], [33.3, 589.0], [33.4, 591.0], [33.5, 593.0], [33.6, 594.0], [33.7, 595.0], [33.8, 596.0], [33.9, 596.0], [34.0, 597.0], [34.1, 598.0], [34.2, 599.0], [34.3, 601.0], [34.4, 602.0], [34.5, 603.0], [34.6, 603.0], [34.7, 608.0], [34.8, 609.0], [34.9, 610.0], [35.0, 613.0], [35.1, 619.0], [35.2, 620.0], [35.3, 621.0], [35.4, 621.0], [35.5, 622.0], [35.6, 623.0], [35.7, 624.0], [35.8, 625.0], [35.9, 626.0], [36.0, 627.0], [36.1, 629.0], [36.2, 629.0], [36.3, 630.0], [36.4, 635.0], [36.5, 638.0], [36.6, 641.0], [36.7, 661.0], [36.8, 680.0], [36.9, 690.0], [37.0, 692.0], [37.1, 693.0], [37.2, 696.0], [37.3, 703.0], [37.4, 708.0], [37.5, 709.0], [37.6, 710.0], [37.7, 713.0], [37.8, 715.0], [37.9, 717.0], [38.0, 740.0], [38.1, 746.0], [38.2, 747.0], [38.3, 747.0], [38.4, 755.0], [38.5, 757.0], [38.6, 757.0], [38.7, 1017.0], [38.8, 1026.0], [38.9, 1027.0], [39.0, 1027.0], [39.1, 1027.0], [39.2, 1028.0], [39.3, 1028.0], [39.4, 1028.0], [39.5, 1030.0], [39.6, 1030.0], [39.7, 1031.0], [39.8, 1031.0], [39.9, 1032.0], [40.0, 1032.0], [40.1, 1034.0], [40.2, 1035.0], [40.3, 1035.0], [40.4, 1035.0], [40.5, 1035.0], [40.6, 1036.0], [40.7, 1036.0], [40.8, 1036.0], [40.9, 1037.0], [41.0, 1037.0], [41.1, 1037.0], [41.2, 1037.0], [41.3, 1037.0], [41.4, 1038.0], [41.5, 1038.0], [41.6, 1038.0], [41.7, 1038.0], [41.8, 1039.0], [41.9, 1039.0], [42.0, 1039.0], [42.1, 1040.0], [42.2, 1041.0], [42.3, 1041.0], [42.4, 1042.0], [42.5, 1042.0], [42.6, 1042.0], [42.7, 1042.0], [42.8, 1042.0], [42.9, 1043.0], [43.0, 1043.0], [43.1, 1043.0], [43.2, 1044.0], [43.3, 1044.0], [43.4, 1044.0], [43.5, 1045.0], [43.6, 1045.0], [43.7, 1045.0], [43.8, 1045.0], [43.9, 1045.0], [44.0, 1046.0], [44.1, 1046.0], [44.2, 1046.0], [44.3, 1046.0], [44.4, 1046.0], [44.5, 1046.0], [44.6, 1046.0], [44.7, 1047.0], [44.8, 1047.0], [44.9, 1048.0], [45.0, 1048.0], [45.1, 1048.0], [45.2, 1048.0], [45.3, 1049.0], [45.4, 1049.0], [45.5, 1050.0], [45.6, 1051.0], [45.7, 1051.0], [45.8, 1052.0], [45.9, 1053.0], [46.0, 1054.0], [46.1, 1055.0], [46.2, 1055.0], [46.3, 1055.0], [46.4, 1056.0], [46.5, 1056.0], [46.6, 1057.0], [46.7, 1057.0], [46.8, 1057.0], [46.9, 1058.0], [47.0, 1058.0], [47.1, 1059.0], [47.2, 1059.0], [47.3, 1060.0], [47.4, 1061.0], [47.5, 1061.0], [47.6, 1061.0], [47.7, 1061.0], [47.8, 1062.0], [47.9, 1063.0], [48.0, 1063.0], [48.1, 1063.0], [48.2, 1064.0], [48.3, 1064.0], [48.4, 1064.0], [48.5, 1065.0], [48.6, 1065.0], [48.7, 1065.0], [48.8, 1066.0], [48.9, 1066.0], [49.0, 1066.0], [49.1, 1067.0], [49.2, 1068.0], [49.3, 1068.0], [49.4, 1069.0], [49.5, 1070.0], [49.6, 1070.0], [49.7, 1071.0], [49.8, 1071.0], [49.9, 1072.0], [50.0, 1072.0], [50.1, 1072.0], [50.2, 1073.0], [50.3, 1073.0], [50.4, 1074.0], [50.5, 1074.0], [50.6, 1075.0], [50.7, 1076.0], [50.8, 1076.0], [50.9, 1076.0], [51.0, 1077.0], [51.1, 1077.0], [51.2, 1078.0], [51.3, 1079.0], [51.4, 1079.0], [51.5, 1080.0], [51.6, 1080.0], [51.7, 1080.0], [51.8, 1080.0], [51.9, 1081.0], [52.0, 1082.0], [52.1, 1083.0], [52.2, 1083.0], [52.3, 1083.0], [52.4, 1084.0], [52.5, 1084.0], [52.6, 1084.0], [52.7, 1084.0], [52.8, 1085.0], [52.9, 1086.0], [53.0, 1087.0], [53.1, 1087.0], [53.2, 1087.0], [53.3, 1088.0], [53.4, 1088.0], [53.5, 1088.0], [53.6, 1089.0], [53.7, 1089.0], [53.8, 1090.0], [53.9, 1090.0], [54.0, 1091.0], [54.1, 1092.0], [54.2, 1092.0], [54.3, 1093.0], [54.4, 1093.0], [54.5, 1093.0], [54.6, 1094.0], [54.7, 1095.0], [54.8, 1098.0], [54.9, 1098.0], [55.0, 1099.0], [55.1, 1099.0], [55.2, 1100.0], [55.3, 1101.0], [55.4, 1102.0], [55.5, 1103.0], [55.6, 1103.0], [55.7, 1103.0], [55.8, 1106.0], [55.9, 1107.0], [56.0, 1107.0], [56.1, 1108.0], [56.2, 1111.0], [56.3, 1112.0], [56.4, 1120.0], [56.5, 1130.0], [56.6, 1202.0], [56.7, 1207.0], [56.8, 1210.0], [56.9, 1211.0], [57.0, 1217.0], [57.1, 1220.0], [57.2, 1222.0], [57.3, 1223.0], [57.4, 1223.0], [57.5, 1224.0], [57.6, 1226.0], [57.7, 1230.0], [57.8, 1235.0], [57.9, 1235.0], [58.0, 1241.0], [58.1, 1242.0], [58.2, 1244.0], [58.3, 1245.0], [58.4, 1251.0], [58.5, 1521.0], [58.6, 1522.0], [58.7, 1522.0], [58.8, 1523.0], [58.9, 1524.0], [59.0, 1524.0], [59.1, 1526.0], [59.2, 1526.0], [59.3, 1526.0], [59.4, 1527.0], [59.5, 1527.0], [59.6, 1529.0], [59.7, 1529.0], [59.8, 1529.0], [59.9, 1530.0], [60.0, 1530.0], [60.1, 1531.0], [60.2, 1531.0], [60.3, 1532.0], [60.4, 1532.0], [60.5, 1532.0], [60.6, 1533.0], [60.7, 1533.0], [60.8, 1534.0], [60.9, 1535.0], [61.0, 1535.0], [61.1, 1535.0], [61.2, 1535.0], [61.3, 1536.0], [61.4, 1536.0], [61.5, 1536.0], [61.6, 1536.0], [61.7, 1537.0], [61.8, 1537.0], [61.9, 1538.0], [62.0, 1538.0], [62.1, 1538.0], [62.2, 1539.0], [62.3, 1540.0], [62.4, 1540.0], [62.5, 1541.0], [62.6, 1541.0], [62.7, 1541.0], [62.8, 1541.0], [62.9, 1542.0], [63.0, 1542.0], [63.1, 1542.0], [63.2, 1542.0], [63.3, 1543.0], [63.4, 1543.0], [63.5, 1544.0], [63.6, 1544.0], [63.7, 1545.0], [63.8, 1545.0], [63.9, 1546.0], [64.0, 1546.0], [64.1, 1546.0], [64.2, 1546.0], [64.3, 1547.0], [64.4, 1548.0], [64.5, 1548.0], [64.6, 1548.0], [64.7, 1549.0], [64.8, 1549.0], [64.9, 1549.0], [65.0, 1549.0], [65.1, 1550.0], [65.2, 1550.0], [65.3, 1551.0], [65.4, 1551.0], [65.5, 1552.0], [65.6, 1552.0], [65.7, 1552.0], [65.8, 1552.0], [65.9, 1553.0], [66.0, 1553.0], [66.1, 1553.0], [66.2, 1553.0], [66.3, 1553.0], [66.4, 1554.0], [66.5, 1555.0], [66.6, 1555.0], [66.7, 1556.0], [66.8, 1557.0], [66.9, 1557.0], [67.0, 1558.0], [67.1, 1558.0], [67.2, 1558.0], [67.3, 1559.0], [67.4, 1559.0], [67.5, 1559.0], [67.6, 1559.0], [67.7, 1559.0], [67.8, 1560.0], [67.9, 1560.0], [68.0, 1560.0], [68.1, 1560.0], [68.2, 1561.0], [68.3, 1561.0], [68.4, 1561.0], [68.5, 1561.0], [68.6, 1561.0], [68.7, 1562.0], [68.8, 1562.0], [68.9, 1562.0], [69.0, 1563.0], [69.1, 1563.0], [69.2, 1564.0], [69.3, 1565.0], [69.4, 1565.0], [69.5, 1566.0], [69.6, 1566.0], [69.7, 1567.0], [69.8, 1567.0], [69.9, 1567.0], [70.0, 1567.0], [70.1, 1568.0], [70.2, 1568.0], [70.3, 1568.0], [70.4, 1569.0], [70.5, 1569.0], [70.6, 1569.0], [70.7, 1569.0], [70.8, 1570.0], [70.9, 1570.0], [71.0, 1570.0], [71.1, 1570.0], [71.2, 1571.0], [71.3, 1571.0], [71.4, 1571.0], [71.5, 1571.0], [71.6, 1572.0], [71.7, 1572.0], [71.8, 1572.0], [71.9, 1573.0], [72.0, 1573.0], [72.1, 1573.0], [72.2, 1573.0], [72.3, 1573.0], [72.4, 1574.0], [72.5, 1574.0], [72.6, 1574.0], [72.7, 1575.0], [72.8, 1575.0], [72.9, 1575.0], [73.0, 1576.0], [73.1, 1576.0], [73.2, 1576.0], [73.3, 1577.0], [73.4, 1577.0], [73.5, 1577.0], [73.6, 1578.0], [73.7, 1579.0], [73.8, 1580.0], [73.9, 1581.0], [74.0, 1581.0], [74.1, 1582.0], [74.2, 1582.0], [74.3, 1583.0], [74.4, 1583.0], [74.5, 1584.0], [74.6, 1584.0], [74.7, 1585.0], [74.8, 1585.0], [74.9, 1586.0], [75.0, 1587.0], [75.1, 1587.0], [75.2, 1588.0], [75.3, 1588.0], [75.4, 1589.0], [75.5, 1590.0], [75.6, 1590.0], [75.7, 1591.0], [75.8, 1591.0], [75.9, 1592.0], [76.0, 1592.0], [76.1, 1593.0], [76.2, 1593.0], [76.3, 1594.0], [76.4, 1595.0], [76.5, 1595.0], [76.6, 1596.0], [76.7, 1596.0], [76.8, 1596.0], [76.9, 1597.0], [77.0, 1597.0], [77.1, 1598.0], [77.2, 1598.0], [77.3, 1599.0], [77.4, 1600.0], [77.5, 1600.0], [77.6, 1601.0], [77.7, 1602.0], [77.8, 1604.0], [77.9, 1606.0], [78.0, 1607.0], [78.1, 1608.0], [78.2, 1610.0], [78.3, 1611.0], [78.4, 1612.0], [78.5, 1613.0], [78.6, 1614.0], [78.7, 1615.0], [78.8, 1615.0], [78.9, 1616.0], [79.0, 1616.0], [79.1, 1620.0], [79.2, 1621.0], [79.3, 1621.0], [79.4, 1622.0], [79.5, 1624.0], [79.6, 1624.0], [79.7, 1625.0], [79.8, 1627.0], [79.9, 1628.0], [80.0, 1630.0], [80.1, 1632.0], [80.2, 1633.0], [80.3, 1634.0], [80.4, 2018.0], [80.5, 2029.0], [80.6, 2030.0], [80.7, 2030.0], [80.8, 2031.0], [80.9, 2033.0], [81.0, 2036.0], [81.1, 2036.0], [81.2, 2037.0], [81.3, 2038.0], [81.4, 2038.0], [81.5, 2038.0], [81.6, 2038.0], [81.7, 2039.0], [81.8, 2039.0], [81.9, 2039.0], [82.0, 2039.0], [82.1, 2040.0], [82.2, 2042.0], [82.3, 2043.0], [82.4, 2043.0], [82.5, 2044.0], [82.6, 2044.0], [82.7, 2044.0], [82.8, 2045.0], [82.9, 2045.0], [83.0, 2046.0], [83.1, 2050.0], [83.2, 2051.0], [83.3, 2051.0], [83.4, 2052.0], [83.5, 2052.0], [83.6, 2052.0], [83.7, 2052.0], [83.8, 2052.0], [83.9, 2053.0], [84.0, 2054.0], [84.1, 2054.0], [84.2, 2055.0], [84.3, 2056.0], [84.4, 2056.0], [84.5, 2057.0], [84.6, 2061.0], [84.7, 2062.0], [84.8, 2062.0], [84.9, 2068.0], [85.0, 2069.0], [85.1, 2070.0], [85.2, 2070.0], [85.3, 2071.0], [85.4, 2071.0], [85.5, 2072.0], [85.6, 2073.0], [85.7, 2074.0], [85.8, 2075.0], [85.9, 2075.0], [86.0, 2075.0], [86.1, 2076.0], [86.2, 2077.0], [86.3, 2077.0], [86.4, 2080.0], [86.5, 2080.0], [86.6, 2081.0], [86.7, 2081.0], [86.8, 2081.0], [86.9, 2082.0], [87.0, 2085.0], [87.1, 2100.0], [87.2, 2100.0], [87.3, 2101.0], [87.4, 2102.0], [87.5, 2102.0], [87.6, 2103.0], [87.7, 2103.0], [87.8, 2103.0], [87.9, 2104.0], [88.0, 2104.0], [88.1, 2104.0], [88.2, 2105.0], [88.3, 2105.0], [88.4, 2105.0], [88.5, 2106.0], [88.6, 2106.0], [88.7, 2107.0], [88.8, 2109.0], [88.9, 2113.0], [89.0, 2115.0], [89.1, 2115.0], [89.2, 2116.0], [89.3, 2117.0], [89.4, 2118.0], [89.5, 2118.0], [89.6, 2128.0], [89.7, 2137.0], [89.8, 2149.0], [89.9, 2528.0], [90.0, 2530.0], [90.1, 2532.0], [90.2, 2538.0], [90.3, 2539.0], [90.4, 2540.0], [90.5, 2541.0], [90.6, 2542.0], [90.7, 2543.0], [90.8, 2550.0], [90.9, 2550.0], [91.0, 2551.0], [91.1, 2552.0], [91.2, 2552.0], [91.3, 2553.0], [91.4, 2554.0], [91.5, 2555.0], [91.6, 2556.0], [91.7, 2557.0], [91.8, 2558.0], [91.9, 2558.0], [92.0, 2560.0], [92.1, 2566.0], [92.2, 2567.0], [92.3, 2575.0], [92.4, 2578.0], [92.5, 2579.0], [92.6, 2581.0], [92.7, 2583.0], [92.8, 2584.0], [92.9, 2585.0], [93.0, 2586.0], [93.1, 2587.0], [93.2, 2588.0], [93.3, 2588.0], [93.4, 2589.0], [93.5, 2590.0], [93.6, 2591.0], [93.7, 2592.0], [93.8, 2593.0], [93.9, 2594.0], [94.0, 2594.0], [94.1, 2594.0], [94.2, 2595.0], [94.3, 2595.0], [94.4, 2596.0], [94.5, 2597.0], [94.6, 2597.0], [94.7, 2598.0], [94.8, 2598.0], [94.9, 2599.0], [95.0, 2599.0], [95.1, 2600.0], [95.2, 2600.0], [95.3, 2601.0], [95.4, 2601.0], [95.5, 2601.0], [95.6, 2602.0], [95.7, 2602.0], [95.8, 2603.0], [95.9, 2603.0], [96.0, 2604.0], [96.1, 2605.0], [96.2, 2605.0], [96.3, 2606.0], [96.4, 2606.0], [96.5, 2607.0], [96.6, 2607.0], [96.7, 2608.0], [96.8, 2609.0], [96.9, 2611.0], [97.0, 2611.0], [97.1, 2615.0], [97.2, 3043.0], [97.3, 3070.0], [97.4, 3084.0], [97.5, 3086.0], [97.6, 3088.0], [97.7, 3090.0], [97.8, 3092.0], [97.9, 3094.0], [98.0, 3096.0], [98.1, 3098.0], [98.2, 3099.0], [98.3, 3099.0], [98.4, 3100.0], [98.5, 3103.0], [98.6, 3106.0], [98.7, 3108.0], [98.8, 3112.0], [98.9, 3115.0], [99.0, 3118.0], [99.1, 3119.0], [99.2, 3119.0], [99.3, 3121.0], [99.4, 3121.0], [99.5, 3124.0], [99.6, 3629.0], [99.7, 3632.0], [99.8, 3633.0], [99.9, 3634.0], [100.0, 3637.0]], "isOverall": false, "label": "JDBC Request users", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 995.0, "series": [{"data": [[0.0, 995.0], [2100.0, 138.0], [600.0, 149.0], [2500.0, 260.0], [2600.0, 106.0], [700.0, 71.0], [2700.0, 1.0], [3000.0, 58.0], [3100.0, 59.0], [200.0, 58.0], [800.0, 1.0], [3600.0, 24.0], [1000.0, 821.0], [1100.0, 73.0], [1200.0, 92.0], [1500.0, 949.0], [100.0, 79.0], [1600.0, 147.0], [1700.0, 2.0], [1800.0, 1.0], [500.0, 581.0], [2000.0, 335.0]], "isOverall": false, "label": "JDBC Request users", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 152.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4848.0, "series": [{"data": [[0.0, 152.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4848.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1805.9057999999977, "minX": 1.69988574E12, "maxY": 1805.9057999999977, "series": [{"data": [[1.69988574E12, 1805.9057999999977]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988574E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3637.0, "series": [{"data": [[2.0, 3118.0], [3.0, 3105.0], [5.0, 3123.5], [7.0, 3632.0], [9.0, 3121.0], [10.0, 3114.5], [11.0, 10.0], [12.0, 3117.0], [13.0, 3634.0], [14.0, 3123.0], [15.0, 3118.0], [16.0, 3122.0], [18.0, 3634.0], [19.0, 3104.0], [20.0, 3104.0], [21.0, 3121.0], [23.0, 3117.5], [24.0, 3118.0], [26.0, 3635.0], [28.0, 3633.3333333333335], [30.0, 3378.0], [31.0, 3120.0], [33.0, 3105.0], [32.0, 3632.0], [35.0, 3374.0], [37.0, 3633.0], [38.0, 3631.0], [41.0, 3113.0], [40.0, 3111.0], [42.0, 3119.0], [44.0, 3120.0], [47.0, 3119.0], [46.0, 3376.0], [49.0, 3120.0], [48.0, 3633.0], [51.0, 3112.0], [50.0, 3113.0], [52.0, 3111.0], [55.0, 1560.5], [57.0, 1247.2], [56.0, 3371.0], [59.0, 245.69230769230768], [58.0, 5.5], [61.0, 324.30000000000007], [60.0, 332.8421052631579], [63.0, 7.545454545454545], [62.0, 5.666666666666667], [66.0, 46.0], [65.0, 1590.5], [64.0, 937.6], [69.0, 2609.0], [68.0, 61.0], [71.0, 1041.6666666666667], [70.0, 3623.0], [74.0, 779.3846153846154], [72.0, 12.000000000000002], [75.0, 8.833333333333334], [73.0, 9.857142857142858], [79.0, 58.0], [78.0, 18.75], [77.0, 657.2], [76.0, 891.5714285714287], [83.0, 39.166666666666664], [82.0, 656.4], [81.0, 818.5], [80.0, 3278.6666666666665], [87.0, 51.0], [86.0, 30.0], [85.0, 51.0], [84.0, 54.5], [91.0, 49.5], [89.0, 51.0], [88.0, 51.0], [90.0, 9.0], [95.0, 1566.5], [94.0, 1569.0], [93.0, 2616.692307692308], [92.0, 50.0], [97.0, 1059.3333333333335], [96.0, 9.0], [99.0, 10.0], [98.0, 3091.0], [103.0, 1319.0], [102.0, 2071.0], [101.0, 47.0], [100.0, 1568.0], [104.0, 27.0], [107.0, 46.0], [105.0, 886.0], [106.0, 2594.0], [111.0, 1323.5], [110.0, 677.25], [108.0, 1309.5], [109.0, 1556.0], [115.0, 677.5], [113.0, 29.5], [112.0, 1571.5], [119.0, 1052.6666666666665], [118.0, 1767.8], [117.0, 1063.3333333333335], [116.0, 2598.0], [123.0, 42.0], [121.0, 43.0], [120.0, 1569.0], [127.0, 28.5], [126.0, 1319.5], [125.0, 2080.0], [124.0, 1306.75], [134.0, 882.6666666666666], [132.0, 799.5], [131.0, 1439.25], [129.0, 886.3333333333334], [135.0, 19.0], [133.0, 2597.0], [128.0, 2849.0], [137.0, 1737.0], [142.0, 2328.5], [143.0, 2596.0], [141.0, 2596.0], [138.0, 3095.0], [136.0, 2602.0], [149.0, 1764.6], [147.0, 20.0], [151.0, 2595.0], [150.0, 3095.0], [148.0, 2593.0], [145.0, 2601.0], [152.0, 21.0], [154.0, 22.0], [153.0, 876.5], [158.0, 1303.5], [159.0, 2593.5], [157.0, 2585.0], [155.0, 2841.5], [163.0, 1739.3333333333333], [167.0, 3099.0], [166.0, 2845.5], [165.0, 2594.0], [161.0, 2600.0], [160.0, 2586.0], [168.0, 1557.5], [175.0, 2069.6666666666665], [173.0, 2841.0], [172.0, 3097.0], [171.0, 2594.0], [169.0, 3093.0], [177.0, 24.0], [183.0, 2589.0], [182.0, 2585.0], [181.0, 2890.5], [180.0, 2581.0], [178.0, 2583.5], [176.0, 2580.0], [187.0, 27.0], [186.0, 26.0], [188.0, 1310.5], [189.0, 1309.0], [190.0, 1559.5], [191.0, 2761.0], [185.0, 2591.5], [195.0, 1303.5], [196.0, 1311.5], [199.0, 2842.0], [198.0, 3091.0], [194.0, 3096.0], [193.0, 2578.0], [192.0, 2588.0], [203.0, 1734.3333333333333], [206.0, 1308.0], [207.0, 2589.0], [205.0, 2586.5], [201.0, 2579.0], [200.0, 2594.0], [211.0, 1289.0], [214.0, 1295.5], [215.0, 3060.0], [213.0, 2561.0], [212.0, 2551.0], [210.0, 3064.0], [209.0, 2830.5], [223.0, 1298.5], [222.0, 2556.0], [221.0, 2557.5], [220.0, 2558.0], [218.0, 2559.0], [217.0, 2801.0], [226.0, 1295.5], [229.0, 2049.2], [231.0, 2543.0], [230.0, 2543.0], [225.0, 2559.0], [239.0, 2039.25], [236.0, 2542.0], [235.0, 2541.0], [233.0, 2542.0], [240.0, 1539.0], [243.0, 35.0], [242.0, 2540.0], [248.0, 36.0], [253.0, 36.0], [254.0, 35.6], [255.0, 35.5], [252.0, 34.666666666666664], [251.0, 35.666666666666664], [249.0, 35.0], [250.0, 35.0], [256.0, 35.833333333333336], [263.0, 38.0], [267.0, 38.0], [272.0, 39.0], [276.0, 39.0], [282.0, 40.0], [287.0, 40.0], [293.0, 41.0], [300.0, 42.0], [304.0, 43.0], [308.0, 43.0], [315.0, 44.0], [318.0, 44.0], [326.0, 45.0], [329.0, 47.25], [328.0, 47.5], [330.0, 49.0], [336.0, 39.0], [339.0, 40.0], [344.0, 40.0], [348.0, 40.0], [356.0, 41.0], [361.0, 42.0], [368.0, 42.0], [376.0, 42.0], [382.0, 43.0], [383.0, 2600.127659574468], [386.0, 1285.0], [398.0, 1284.5], [394.0, 1701.3333333333333], [399.0, 2528.0], [396.0, 2530.0], [387.0, 2529.0], [392.0, 2532.0], [391.0, 2532.0], [385.0, 2538.0], [390.0, 2535.0], [389.0, 2532.5], [415.0, 327.85714285714283], [402.0, 1374.3333333333333], [406.0, 1044.5], [404.0, 2042.0], [407.0, 2043.0], [400.0, 2530.5], [409.0, 1046.0], [410.0, 50.0], [411.0, 548.5], [412.0, 546.75], [403.0, 2039.0], [414.0, 1381.0], [408.0, 2044.0], [428.0, 1040.0], [417.0, 1046.5], [416.0, 41.0], [420.0, 40.333333333333336], [421.0, 1478.142857142857], [423.0, 2054.0], [422.0, 2054.0], [431.0, 44.0], [430.0, 2038.5], [427.0, 2045.5], [426.0, 2055.0], [425.0, 2055.0], [446.0, 2049.5], [433.0, 1374.3333333333333], [439.0, 545.75], [432.0, 2042.0], [438.0, 2043.0], [437.0, 2043.0], [441.0, 549.5], [440.0, 716.8333333333333], [445.0, 48.0], [447.0, 2050.0], [444.0, 2051.5], [435.0, 2042.0], [434.0, 2042.0], [442.0, 2057.0], [462.0, 2053.0], [450.0, 1541.75], [452.0, 847.4], [454.0, 2050.5], [460.0, 1052.5], [463.0, 2053.0], [461.0, 2053.0], [459.0, 2053.0], [458.0, 2052.0], [457.0, 2052.0], [456.0, 2053.5], [478.0, 2040.0], [479.0, 1042.5], [477.0, 2039.5], [474.0, 2039.0], [473.0, 2039.0], [472.0, 2038.0], [471.0, 2036.0], [470.0, 2055.5], [467.0, 2055.0], [466.0, 2054.0], [464.0, 2053.0], [492.0, 43.0], [486.0, 1045.5], [480.0, 2041.0], [483.0, 2055.0], [481.0, 2034.0], [489.0, 1538.5], [494.0, 2039.0], [493.0, 2297.5], [491.0, 2033.0], [490.0, 2039.0], [485.0, 2036.0], [484.0, 2033.5], [508.0, 1425.0], [497.0, 1298.0], [496.0, 2551.5], [499.0, 2553.0], [504.0, 44.0], [510.0, 2115.0], [509.0, 2115.0], [506.0, 2552.5], [505.0, 2551.0], [503.0, 2037.0], [500.0, 2552.0], [536.0, 42.0], [518.0, 738.1666666666666], [516.0, 2117.5], [514.0, 2117.0], [512.0, 2115.0], [538.0, 387.6666666666667], [520.0, 463.2], [524.0, 2119.0], [522.0, 2118.0], [526.0, 2112.0], [530.0, 1073.0], [532.0, 453.6], [542.0, 2115.0], [534.0, 2107.0], [528.0, 2105.0], [572.0, 2106.0], [548.0, 1080.5], [556.0, 45.0], [558.0, 2103.0], [544.0, 2115.5], [560.0, 1417.3333333333333], [564.0, 47.0], [574.0, 2107.5], [570.0, 2106.0], [568.0, 2104.0], [550.0, 2117.5], [566.0, 2104.0], [576.0, 1419.3333333333333], [604.0, 1419.0], [588.0, 1416.3333333333333], [606.0, 1416.3333333333333], [602.0, 2101.0], [582.0, 2106.5], [580.0, 2109.0], [596.0, 2101.0], [592.0, 2107.0], [590.0, 2101.0], [586.0, 2100.0], [584.0, 2105.0], [632.0, 562.0], [614.0, 1074.5], [612.0, 2105.0], [608.0, 2106.5], [624.0, 1074.5], [638.0, 2355.5], [636.0, 2618.0], [634.0, 2616.5], [628.0, 2103.0], [626.0, 2103.0], [618.0, 2105.0], [616.0, 2105.0], [664.0, 54.0], [650.0, 1956.5], [656.0, 53.0], [668.0, 54.0], [670.0, 2566.0], [666.0, 2054.0], [658.0, 2589.0], [652.0, 2701.0], [646.0, 2595.0], [644.0, 2601.0], [696.0, 2044.0], [686.0, 715.0], [680.0, 1048.5], [692.0, 1050.0], [698.0, 48.0], [702.0, 2044.0], [676.0, 2052.0], [674.0, 2052.0], [690.0, 2052.0], [688.0, 2051.0], [682.0, 2052.0], [706.0, 1046.75], [714.0, 715.0], [720.0, 51.5], [716.0, 2043.0], [712.0, 2044.0], [710.0, 2044.0], [704.0, 2045.0], [760.0, 39.0], [738.0, 54.0], [764.0, 40.0], [744.0, 49.0], [746.0, 50.33333333333333], [748.0, 40.42857142857143], [754.0, 37.0], [756.0, 38.0], [758.0, 39.0], [796.0, 1403.6666666666667], [770.0, 56.0], [768.0, 41.0], [772.0, 56.0], [794.0, 2081.0], [792.0, 2080.0], [778.0, 50.166666666666664], [780.0, 2030.0], [782.0, 2030.0], [784.0, 386.6666666666667], [798.0, 2081.0], [788.0, 1064.5], [790.0, 49.0], [828.0, 1064.0], [810.0, 1066.0], [822.0, 53.0], [830.0, 2075.0], [826.0, 2074.0], [806.0, 2081.0], [804.0, 2081.0], [800.0, 2081.0], [820.0, 2074.0], [818.0, 2075.0], [812.0, 2081.0], [808.0, 2081.0], [860.0, 1050.5], [832.0, 42.75], [836.0, 554.625], [840.0, 48.75], [844.0, 1053.5], [846.0, 1053.5], [850.0, 1198.142857142857], [862.0, 2071.0], [854.0, 438.0], [852.0, 1389.3333333333333], [838.0, 46.75], [858.0, 2071.0], [856.0, 2070.0], [834.0, 188.64285714285717], [888.0, 846.0], [868.0, 1051.0], [866.0, 2072.5], [864.0, 2072.0], [870.0, 2073.0], [892.0, 1035.0], [890.0, 2039.5], [894.0, 2040.0], [876.0, 31.0], [874.0, 2070.0], [878.0, 708.0], [882.0, 1656.8], [886.0, 1034.5], [920.0, 804.5], [900.0, 32.333333333333336], [904.0, 1036.0], [924.0, 1573.0], [922.0, 1573.0], [926.0, 1056.5], [912.0, 801.5], [914.0, 1573.0], [918.0, 1574.0], [916.0, 1574.0], [902.0, 433.2], [906.0, 33.0], [910.0, 1571.0], [898.0, 2038.0], [908.0, 2038.0], [956.0, 1557.0], [928.0, 1056.5], [942.0, 1568.0], [940.0, 1569.0], [938.0, 1568.0], [936.0, 1561.0], [930.0, 719.3333333333334], [958.0, 1558.0], [954.0, 1557.0], [952.0, 1565.0], [934.0, 1570.0], [932.0, 1561.0], [950.0, 1558.0], [948.0, 1558.0], [946.0, 1556.0], [944.0, 1568.0], [988.0, 1536.0], [990.0, 1536.0], [986.0, 1550.0], [984.0, 1538.0], [982.0, 1538.0], [980.0, 1552.0], [978.0, 1553.0], [976.0, 1553.0], [974.0, 1553.0], [962.0, 2061.0], [960.0, 2060.0], [966.0, 1555.0], [964.0, 2062.0], [972.0, 1553.0], [970.0, 1543.0], [968.0, 1554.0], [1020.0, 779.0], [1018.0, 790.0], [1022.0, 1556.0], [1016.0, 1553.0], [1014.0, 1560.0], [1012.0, 1555.0], [1010.0, 1578.0], [1008.0, 1569.0], [1006.0, 1567.0], [994.0, 1563.0], [992.0, 1535.0], [998.0, 1567.0], [996.0, 1563.0], [1004.0, 1567.0], [1002.0, 1566.0], [1000.0, 2070.0], [1080.0, 1611.0], [1084.0, 1609.0], [1076.0, 1621.0], [1072.0, 1613.0], [1068.0, 1624.0], [1064.0, 1624.0], [1060.0, 1625.0], [1056.0, 2150.0], [1052.0, 2148.0], [1028.0, 1553.0], [1024.0, 1573.0], [1036.0, 1553.0], [1032.0, 2056.0], [1048.0, 1616.0], [1044.0, 1566.0], [1040.0, 1563.0], [1144.0, 1579.0], [1148.0, 1577.0], [1140.0, 1582.0], [1100.0, 2128.0], [1096.0, 2128.0], [1092.0, 1595.0], [1088.0, 1595.0], [1128.0, 1582.0], [1124.0, 1591.0], [1120.0, 1596.0], [1116.0, 1596.0], [1112.0, 1597.0], [1108.0, 1608.0], [1104.0, 1600.0], [1208.0, 1551.0], [1212.0, 2057.0], [1204.0, 1556.0], [1200.0, 1553.0], [1196.0, 1557.0], [1192.0, 1556.0], [1188.0, 2068.0], [1184.0, 1539.0], [1180.0, 1553.0], [1156.0, 1561.0], [1152.0, 1567.0], [1164.0, 1560.0], [1160.0, 1560.0], [1176.0, 1552.0], [1172.0, 1553.0], [1168.0, 2085.0], [1276.0, 1532.0], [1264.0, 1521.0], [1228.0, 1548.0], [1224.0, 1548.0], [1220.0, 1543.0], [1216.0, 1546.0], [1260.0, 1523.0], [1256.0, 1524.0], [1252.0, 1533.0], [1248.0, 1530.0], [1244.0, 2038.0], [1240.0, 1535.0], [1236.0, 1536.0], [1232.0, 1549.0], [1336.0, 1530.0], [1340.0, 1526.0], [1332.0, 1529.0], [1328.0, 1517.0], [1324.0, 1528.0], [1316.0, 2029.0], [1312.0, 1526.0], [1308.0, 1524.0], [1280.0, 1524.0], [1292.0, 1899.75], [1284.0, 1778.5], [1300.0, 1522.0], [1296.0, 1520.5], [1388.0, 23.0], [1404.0, 1629.0], [1364.0, 1898.0], [1360.0, 1631.0], [1356.0, 1632.0], [1352.0, 1633.0], [1348.0, 1634.0], [1344.0, 1527.0], [1428.0, 1627.0], [1552.0, 32.0], [1560.0, 33.5], [1596.0, 1588.9954954954947], [1660.0, 1571.0], [1656.0, 1559.0], [1612.0, 1559.0], [1608.0, 1562.0], [1604.0, 1563.0], [1600.0, 1567.0], [1644.0, 1559.0], [1640.0, 1561.0], [1636.0, 1561.0], [1632.0, 1560.0], [1628.0, 1561.0], [1624.0, 1560.0], [1620.0, 1559.0], [1616.0, 1559.0], [1720.0, 1546.0], [1724.0, 1548.5], [1716.0, 1546.0], [1712.0, 1546.0], [1708.0, 1567.3333333333333], [1704.0, 1569.0], [1696.0, 1569.0], [1692.0, 1570.0], [1668.0, 1571.0], [1664.0, 1573.0], [1676.0, 1576.0], [1672.0, 1571.3333333333333], [1688.0, 1573.0], [1680.0, 1569.0], [1784.0, 1541.0], [1788.0, 1547.0], [1780.0, 1539.0], [1740.0, 1549.0], [1736.0, 1549.0], [1732.0, 1546.5], [1728.0, 1552.0], [1772.0, 1541.5], [1768.0, 1541.0], [1764.0, 1546.6666666666667], [1760.0, 1544.0], [1756.0, 1546.0], [1752.0, 1547.5], [1748.0, 1546.3333333333333], [1844.0, 1541.0], [1840.0, 1541.0], [1836.0, 1534.0], [1832.0, 1542.0], [1828.0, 1541.0], [1824.0, 1541.0], [1816.0, 1542.0], [1808.0, 1542.0], [1800.0, 1537.0], [1796.0, 1545.0], [1792.0, 1543.0], [1912.0, 1078.0], [1908.0, 1115.5], [1916.0, 1598.0], [1904.0, 1089.0], [1900.0, 1084.0], [1896.0, 1528.0], [1892.0, 1529.0], [1888.0, 1532.0], [1884.0, 1537.0], [1856.0, 1533.0], [1868.0, 1538.5], [1860.0, 1532.0], [1880.0, 1530.0], [1872.0, 1538.0], [1976.0, 1571.0], [1924.0, 702.3333333333334], [1920.0, 823.2], [1948.0, 1574.0], [1944.0, 1063.0], [1940.0, 1076.0], [1936.0, 1092.0], [1980.0, 1054.0], [1972.0, 1057.0], [1968.0, 1566.0], [1932.0, 1083.0], [1928.0, 1083.0], [1964.0, 1565.0], [1960.0, 1080.0], [1956.0, 1080.0], [1952.0, 1072.0], [2036.0, 1599.0], [2044.0, 1091.0], [2032.0, 1538.0], [1996.0, 1563.0], [1992.0, 1050.0], [1988.0, 1554.0], [1984.0, 1044.0], [2028.0, 1037.0], [2024.0, 1037.0], [2020.0, 1542.0], [2016.0, 1541.0], [2012.0, 1046.0], [2008.0, 1047.0], [2004.0, 1047.0], [2000.0, 1560.0], [2160.0, 1077.0], [2112.0, 1613.0], [2120.0, 1099.0], [2128.0, 1089.0], [2168.0, 1589.0], [2152.0, 1078.0], [2144.0, 1080.0], [2048.0, 1594.0], [2056.0, 1611.0], [2064.0, 1082.0], [2072.0, 1584.0], [2104.0, 1127.0], [2096.0, 1065.0], [2088.0, 1586.0], [2080.0, 1581.0], [2136.0, 1087.0], [2184.0, 1583.0], [2192.0, 885.0], [2176.0, 1587.0], [2200.0, 615.6666666666667], [2272.0, 1584.0], [2280.0, 1070.0], [2224.0, 629.5], [2216.0, 1572.0], [2208.0, 1573.0], [2232.0, 1064.0], [2240.0, 1054.0], [2248.0, 1055.0], [2256.0, 1049.0], [2264.0, 1588.0], [2296.0, 1064.0], [2288.0, 1068.0], [2416.0, 229.0], [2304.0, 633.5], [2312.0, 1047.0], [2432.0, 231.0], [2512.0, 240.0], [2528.0, 242.0], [2576.0, 1100.0], [2608.0, 1087.0], [2664.0, 410.3333333333333], [2656.0, 1056.0], [2584.0, 1099.0], [2568.0, 1046.0], [2616.0, 1087.0], [2600.0, 611.5], [2592.0, 1099.0], [2624.0, 1084.0], [2632.0, 1074.0], [2680.0, 1041.0], [2672.0, 1045.0], [2640.0, 1074.0], [2648.0, 1063.0], [2696.0, 1046.3333333333333], [2784.0, 790.5], [2752.0, 535.0], [2792.0, 542.0], [2808.0, 1030.0], [2800.0, 1039.0], [2744.0, 785.5], [2688.0, 1046.0], [2736.0, 789.0], [2720.0, 873.0], [2776.0, 1036.0], [2768.0, 538.0], [2760.0, 537.0], [2928.0, 1245.0], [2912.0, 899.5], [2880.0, 755.0], [2888.0, 758.0], [2936.0, 1242.0], [2920.0, 901.5], [2840.0, 1035.5], [2816.0, 1027.0], [2824.0, 1037.0], [2896.0, 1242.0], [2904.0, 747.0], [2872.0, 909.0], [2864.0, 1030.0], [2960.0, 936.0], [3048.0, 54.0], [3064.0, 711.0], [2968.0, 1224.0], [2952.0, 1228.0], [2944.0, 1235.0], [3000.0, 1210.0], [2992.0, 1218.0], [3008.0, 1211.0], [3016.0, 693.0], [3024.0, 690.0], [3032.0, 1193.0], [2976.0, 1220.0], [2984.0, 1222.0], [3080.0, 1066.0], [3176.0, 60.0], [3096.0, 551.0], [3088.0, 559.0], [3072.0, 1069.0], [3120.0, 1045.0], [3112.0, 1049.0], [3104.0, 1050.0], [3272.0, 55.0], [3256.0, 53.0], [3432.0, 511.0], [3424.0, 561.0], [3448.0, 294.6666666666667], [3392.0, 297.5], [3440.0, 557.0], [3368.0, 559.0], [3360.0, 560.0], [3376.0, 555.0], [3352.0, 562.0], [3384.0, 547.0], [3416.0, 582.3333333333334], [3400.0, 541.0], [3480.0, 507.0], [3536.0, 59.0], [3560.0, 574.0], [3552.0, 514.0], [3568.0, 604.0], [3472.0, 281.0], [3464.0, 53.0], [3456.0, 56.0], [3512.0, 60.0], [3496.0, 287.0], [3488.0, 525.0], [3504.0, 524.0], [3520.0, 523.0], [3528.0, 523.5], [3576.0, 513.0], [3688.0, 52.0], [3608.0, 509.0], [3696.0, 62.5], [3680.0, 44.0], [3584.0, 574.0], [3600.0, 510.0], [3592.0, 510.0], [3672.0, 46.0], [3648.0, 309.5], [3664.0, 48.0], [3656.0, 40.0], [3640.0, 228.66666666666669], [3632.0, 304.0], [3616.0, 507.0], [2169.0, 1076.0], [2145.0, 1083.0], [2129.0, 638.0], [2121.0, 1090.0], [2113.0, 1104.0], [2161.0, 1077.0], [2153.0, 1079.0], [2049.0, 1596.0], [2057.0, 1086.0], [2065.0, 1591.0], [2105.0, 1120.0], [2097.0, 1065.0], [2089.0, 1081.0], [2081.0, 1074.0], [2137.0, 1088.0], [2177.0, 1072.0], [2233.0, 1058.0], [2273.0, 1584.0], [2201.0, 1576.0], [2193.0, 1572.0], [2185.0, 1067.0], [2289.0, 635.5], [2217.0, 883.5], [2209.0, 1575.0], [2225.0, 1062.0], [2241.0, 1062.0], [2249.0, 1056.0], [2257.0, 1049.0], [2265.0, 1587.0], [2297.0, 1064.0], [2281.0, 1070.0], [2313.0, 628.5], [2345.0, 214.0], [2353.0, 635.0], [2385.0, 225.0], [2305.0, 1058.0], [2433.0, 232.0], [2465.0, 235.0], [2473.0, 235.0], [2585.0, 1099.0], [2665.0, 313.75], [2609.0, 1087.0], [2561.0, 1142.8312757201645], [2617.0, 1086.0], [2657.0, 593.0], [2577.0, 1101.0], [2569.0, 1047.0], [2601.0, 453.3333333333333], [2593.0, 1096.0], [2681.0, 22.0], [2625.0, 614.0], [2633.0, 301.66666666666663], [2641.0, 600.0], [2649.0, 1059.0], [2673.0, 1048.0], [2793.0, 1034.0], [2697.0, 706.0], [2761.0, 873.6666666666666], [2769.0, 1041.6666666666667], [2777.0, 1040.0], [2801.0, 1039.0], [2785.0, 1040.0], [2713.0, 1045.0], [2705.0, 1046.0], [2745.0, 786.75], [2689.0, 788.0], [2729.0, 530.25], [2737.0, 1044.5], [2937.0, 899.0], [2929.0, 643.0], [2881.0, 654.5], [2897.0, 897.0], [2889.0, 758.0], [2905.0, 747.0], [2841.0, 791.5], [2913.0, 1246.0], [2921.0, 1244.0], [2825.0, 870.0], [2865.0, 1.0], [2817.0, 1037.0], [2857.0, 1035.0], [2945.0, 715.0], [3009.0, 438.3333333333333], [3065.0, 735.206896551724], [3041.0, 53.0], [2985.0, 1223.0], [2977.0, 708.0], [3001.0, 695.0], [2969.0, 638.5], [2961.0, 1223.0], [2953.0, 1224.0], [3033.0, 51.0], [3025.0, 692.0], [3017.0, 435.0], [3089.0, 1064.0], [3153.0, 58.0], [3185.0, 61.0], [3097.0, 1052.0], [3081.0, 1066.0], [3145.0, 57.0], [3129.0, 56.0], [3073.0, 1068.0], [3113.0, 549.5], [3105.0, 1051.0], [3193.0, 537.0], [3121.0, 1045.0], [3289.0, 56.0], [3241.0, 53.0], [3281.0, 535.0], [3265.0, 535.0], [3441.0, 504.0], [3449.0, 56.0], [3433.0, 577.6666666666666], [3425.0, 286.5], [3417.0, 579.6666666666666], [3401.0, 541.0], [3393.0, 543.0], [3409.0, 537.5], [3337.0, 59.0], [3345.0, 666.6824644549762], [3353.0, 561.0], [3385.0, 546.0], [3377.0, 555.0], [3369.0, 560.0], [3361.0, 560.0], [3561.0, 520.0], [3553.0, 520.0], [3569.0, 512.3333333333334], [3529.0, 58.0], [3545.0, 60.0], [3521.0, 523.5], [3577.0, 513.0], [3457.0, 508.0], [3489.0, 525.0], [3497.0, 524.0], [3505.0, 524.0], [3513.0, 210.33333333333334], [3481.0, 519.6666666666666], [3473.0, 507.0], [3465.0, 506.5], [3689.0, 268.6666666666667], [3641.0, 223.66666666666669], [3697.0, 51.0], [3649.0, 44.0], [3681.0, 310.0], [3601.0, 275.0], [3609.0, 508.0], [3665.0, 311.5], [3673.0, 46.0], [3657.0, 43.0], [3625.0, 507.25], [3617.0, 508.0], [3633.0, 216.33333333333331], [3593.0, 385.0], [3585.0, 511.0], [1081.0, 1620.0], [1085.0, 1610.0], [1077.0, 1612.0], [1073.0, 1622.0], [1069.0, 1613.0], [1065.0, 1624.0], [1061.0, 1624.0], [1057.0, 2150.0], [1053.0, 2148.0], [1029.0, 1554.0], [1025.0, 1549.0], [1037.0, 1554.0], [1033.0, 1553.0], [1049.0, 1615.0], [1045.0, 1566.0], [1041.0, 1565.0], [1101.0, 1611.0], [1145.0, 1569.0], [1149.0, 1577.0], [1137.0, 1588.5], [1097.0, 2129.0], [1093.0, 1596.0], [1089.0, 1596.0], [1125.0, 1593.0], [1121.0, 1585.0], [1117.0, 1597.0], [1113.0, 1597.0], [1109.0, 1597.0], [1105.0, 1609.0], [1209.0, 1551.0], [1213.0, 1550.0], [1205.0, 1552.0], [1201.0, 1552.0], [1197.0, 1554.0], [1193.0, 2056.0], [1189.0, 2067.0], [1185.0, 2061.0], [1181.0, 1552.0], [1157.0, 1560.0], [1153.0, 1566.0], [1165.0, 1559.0], [1161.0, 1559.0], [1177.0, 1553.0], [1173.0, 1553.0], [1169.0, 1558.0], [1277.0, 1524.0], [1273.0, 1523.0], [1229.0, 1537.0], [1225.0, 1549.0], [1221.0, 1546.0], [1217.0, 1549.0], [1261.0, 1532.0], [1257.0, 1533.0], [1253.0, 2036.0], [1249.0, 2037.0], [1245.0, 1531.0], [1241.0, 2044.0], [1237.0, 1535.0], [1233.0, 2046.0], [1337.0, 1525.0], [1341.0, 1526.0], [1333.0, 1530.0], [1329.0, 1529.0], [1325.0, 1528.0], [1321.0, 1527.0], [1317.0, 2030.0], [1305.0, 2031.0], [1293.0, 2027.0], [1289.0, 1528.0], [1281.0, 2030.0], [1297.0, 1521.0], [1365.0, 1633.0], [1361.0, 1631.0], [1357.0, 1632.0], [1353.0, 1632.0], [1349.0, 1633.0], [1345.0, 1527.0], [1469.0, 27.0], [1417.0, 1628.0], [1525.0, 30.0], [1597.0, 1567.0], [1661.0, 1569.0], [1657.0, 1558.0], [1613.0, 1558.0], [1609.0, 1562.0], [1605.0, 1562.0], [1601.0, 1566.0], [1645.0, 1560.0], [1641.0, 1561.0], [1637.0, 1561.0], [1633.0, 1560.0], [1625.0, 1560.0], [1621.0, 1559.0], [1617.0, 1559.0], [1721.0, 1549.0], [1689.0, 859.25], [1725.0, 1546.0], [1717.0, 1552.0], [1677.0, 1575.0], [1673.0, 1576.0], [1669.0, 1572.0], [1709.0, 1562.0], [1705.0, 1567.0], [1701.0, 1574.0], [1693.0, 1572.0], [1685.0, 1570.0], [1681.0, 1576.0], [1773.0, 1537.0], [1765.0, 1546.0], [1761.0, 1546.0], [1745.0, 1549.0], [1741.0, 1550.0], [1729.0, 1552.0], [1849.0, 1536.5], [1853.0, 1540.5], [1845.0, 1534.0], [1841.0, 1534.0], [1837.0, 1541.0], [1829.0, 1542.0], [1825.0, 1543.0], [1821.0, 1538.5], [1797.0, 1548.0], [1805.0, 1536.0], [1801.0, 1541.0], [1817.0, 1535.0], [1813.0, 1539.6666666666667], [1809.0, 1545.0], [1913.0, 719.4], [1917.0, 951.6666666666667], [1905.0, 800.3333333333333], [1909.0, 1603.0], [1901.0, 1084.0], [1897.0, 1517.0], [1889.0, 1530.0], [1881.0, 1530.0], [1861.0, 1532.0], [1869.0, 1536.0], [1865.0, 1531.0], [1877.0, 1534.5], [1873.0, 1532.0], [1977.0, 1048.0], [1925.0, 718.6], [1921.0, 950.6666666666667], [1949.0, 1574.0], [1945.0, 1573.0], [1941.0, 1076.0], [1937.0, 1093.0], [1981.0, 1053.0], [1973.0, 1058.0], [1969.0, 1052.0], [1933.0, 1091.0], [1929.0, 1084.0], [1965.0, 1566.0], [1961.0, 1056.0], [1957.0, 1080.0], [1953.0, 1072.0], [2041.0, 1346.0], [2045.0, 1671.0], [2037.0, 1091.0], [2033.0, 1593.0], [2029.0, 1037.0], [2025.0, 1037.0], [2021.0, 1542.0], [2017.0, 1540.0], [2013.0, 1587.0], [1989.0, 1554.0], [1985.0, 1043.0], [1997.0, 1562.0], [1993.0, 1562.0], [2009.0, 1032.0], [2005.0, 1046.0], [2001.0, 1063.0], [2154.0, 1594.0], [2170.0, 1074.0], [2114.0, 1099.0], [2122.0, 1099.0], [2130.0, 1604.0], [2162.0, 1592.0], [2146.0, 1080.0], [2074.0, 1330.5], [2066.0, 1081.0], [2058.0, 1593.0], [2050.0, 1595.0], [2106.0, 1112.0], [2098.0, 1076.0], [2090.0, 1592.0], [2082.0, 1072.0], [2138.0, 1086.0], [2298.0, 1064.0], [2282.0, 1073.0], [2250.0, 627.5], [2258.0, 1055.0], [2266.0, 634.5], [2242.0, 1055.0], [2290.0, 1063.0], [2274.0, 1066.0], [2178.0, 1588.0], [2186.0, 1070.0], [2194.0, 1577.0], [2202.0, 1577.0], [2234.0, 1058.0], [2226.0, 1063.0], [2218.0, 1572.0], [2210.0, 1572.0], [2306.0, 1060.0], [2562.0, 1060.0], [2586.0, 1098.0], [2674.0, 278.5], [2658.0, 591.0], [2666.0, 1052.0], [2610.0, 1088.0], [2570.0, 1058.0], [2578.0, 1101.0], [2618.0, 1086.0], [2602.0, 614.0], [2594.0, 1098.0], [2634.0, 610.0], [2642.0, 1073.0], [2650.0, 1062.0], [2682.0, 533.25], [2626.0, 1083.0], [2706.0, 537.6666666666666], [2802.0, 790.5], [2754.0, 535.0], [2690.0, 533.3333333333334], [2698.0, 1046.0], [2746.0, 1042.0], [2714.0, 1045.5], [2786.0, 1040.0], [2794.0, 1038.0], [2738.0, 703.6666666666666], [2730.0, 401.6666666666667], [2722.0, 331.42857142857144], [2778.0, 1041.0], [2922.0, 1245.0], [2938.0, 1236.0], [2818.0, 786.0], [2826.0, 1027.0], [2906.0, 653.5], [2898.0, 1242.0], [2890.0, 757.0], [2858.0, 871.6666666666666], [2850.0, 1026.0], [2882.0, 756.0], [2930.0, 1225.0], [2914.0, 1247.0], [2842.0, 1028.0], [2834.0, 1033.6666666666667], [2970.0, 1223.0], [3066.0, 1071.0], [2946.0, 640.0], [2962.0, 1222.0], [2954.0, 1228.0], [3018.0, 691.0], [3010.0, 1210.0], [3026.0, 1203.0], [3002.0, 628.5], [2994.0, 653.0], [2986.0, 1220.0], [2978.0, 1219.0], [3074.0, 562.0], [3194.0, 61.0], [3106.0, 550.5], [3082.0, 1065.0], [3090.0, 1062.0], [3098.0, 1053.0], [3154.0, 1043.0], [3122.0, 539.0], [3114.0, 1048.0], [3210.0, 50.0], [3202.0, 50.0], [3346.0, 568.0], [3426.0, 558.0], [3450.0, 506.0], [3434.0, 511.0], [3442.0, 503.0], [3394.0, 545.0], [3362.0, 559.0], [3370.0, 559.0], [3378.0, 554.0], [3354.0, 562.0], [3386.0, 548.0], [3410.0, 541.0], [3402.0, 543.0], [3418.0, 536.0], [3562.0, 354.6666666666667], [3538.0, 534.75], [3530.0, 537.0], [3546.0, 534.25], [3554.0, 514.0], [3514.0, 55.0], [3458.0, 355.3333333333333], [3474.0, 507.0], [3466.0, 506.0], [3498.0, 292.0], [3490.0, 56.0], [3506.0, 291.5], [3578.0, 306.5], [3522.0, 57.0], [3690.0, 51.5], [3698.0, 49.0], [3682.0, 46.0], [3594.0, 511.0], [3610.0, 41.0], [3586.0, 275.5], [3674.0, 317.0], [3666.0, 47.0], [3650.0, 398.0], [3658.0, 39.0], [3642.0, 46.0], [3634.0, 303.0], [3618.0, 541.5], [3738.0, 587.0], [3730.0, 591.0], [2115.0, 1094.0], [2139.0, 637.0], [2131.0, 1089.0], [2123.0, 1098.0], [2171.0, 1076.0], [2163.0, 1591.0], [2155.0, 1079.0], [2147.0, 1083.0], [2075.0, 1076.0], [2067.0, 1605.0], [2059.0, 1083.0], [2051.0, 1596.0], [2107.0, 1120.0], [2099.0, 1075.0], [2091.0, 1592.0], [2083.0, 1074.0], [2187.0, 1582.0], [2291.0, 1067.0], [2179.0, 1073.0], [2195.0, 1576.0], [2235.0, 1057.0], [2227.0, 1063.0], [2219.0, 1571.0], [2211.0, 1573.0], [2203.0, 885.5], [2243.0, 1054.0], [2251.0, 1057.0], [2259.0, 1055.0], [2267.0, 1070.0], [2299.0, 1064.0], [2283.0, 1072.0], [2275.0, 1066.0], [2315.0, 211.0], [2379.0, 225.0], [2307.0, 1061.0], [2531.0, 243.0], [2435.0, 232.0], [2491.0, 237.0], [2523.0, 1046.0], [2555.0, 244.0], [2563.0, 1060.0], [2667.0, 362.0], [2675.0, 532.5], [2603.0, 453.3333333333333], [2611.0, 1088.0], [2619.0, 331.6], [2659.0, 1059.0], [2571.0, 1046.0], [2579.0, 1100.0], [2587.0, 1098.0], [2595.0, 614.5], [2627.0, 1083.0], [2635.0, 600.0], [2651.0, 357.5], [2683.0, 1048.6666666666665], [2699.0, 1046.0], [2795.0, 1039.0], [2787.0, 1030.0], [2803.0, 1039.0], [2763.0, 1036.5], [2811.0, 1032.6666666666667], [2691.0, 1044.5], [2707.0, 1046.0], [2715.0, 1044.0], [2747.0, 1044.0], [2739.0, 1042.0], [2731.0, 20.0], [2723.0, 1044.0], [2843.0, 1036.0], [2899.0, 1251.0], [2891.0, 757.0], [2883.0, 757.0], [2907.0, 747.0], [2867.0, 871.6666666666666], [2859.0, 1035.0], [2875.0, 912.0], [2819.0, 1028.0], [2835.0, 1029.0], [2939.0, 1236.0], [2931.0, 1235.0], [2923.0, 1244.0], [2915.0, 1247.0], [2971.0, 710.0], [3011.0, 370.0], [3059.0, 55.0], [3067.0, 569.0], [3043.0, 53.0], [2963.0, 1223.0], [2955.0, 1231.0], [2947.0, 1215.0], [2979.0, 1220.0], [2987.0, 1223.0], [2995.0, 1210.0], [3035.0, 52.0], [3027.0, 625.5], [3019.0, 434.0], [3099.0, 550.0], [3163.0, 59.0], [3091.0, 556.0], [3123.0, 549.0], [3075.0, 1067.0], [3083.0, 1066.0], [3115.0, 1048.0], [3107.0, 1049.0], [3283.0, 56.0], [3227.0, 52.0], [3395.0, 543.0], [3443.0, 279.0], [3435.0, 510.0], [3427.0, 514.0], [3355.0, 562.0], [3419.0, 394.3333333333333], [3411.0, 532.0], [3403.0, 542.0], [3451.0, 507.0], [3387.0, 298.0], [3347.0, 563.0], [3331.0, 59.0], [3379.0, 299.0], [3371.0, 559.0], [3363.0, 558.0], [3563.0, 513.0], [3555.0, 574.0], [3547.0, 523.0], [3539.0, 523.0], [3523.0, 254.6], [3571.0, 513.5], [3579.0, 512.0], [3491.0, 58.0], [3499.0, 525.0], [3507.0, 209.66666666666666], [3515.0, 405.25], [3459.0, 509.0], [3475.0, 279.5], [3483.0, 526.0], [3699.0, 49.0], [3691.0, 52.0], [3651.0, 43.5], [3683.0, 43.0], [3611.0, 508.5], [3603.0, 509.0], [3675.0, 45.0], [3659.0, 51.0], [3667.0, 47.0], [3635.0, 303.5], [3627.0, 43.0], [3619.0, 508.0], [3595.0, 574.0], [3587.0, 511.0], [3643.0, 45.0], [539.0, 1423.3333333333333], [519.0, 343.1428571428571], [515.0, 47.0], [513.0, 2115.5], [537.0, 732.3333333333334], [543.0, 1120.0], [541.0, 2114.0], [521.0, 40.0], [523.0, 2119.0], [527.0, 1076.5], [529.0, 729.0], [531.0, 729.6666666666666], [535.0, 2112.0], [533.0, 2106.0], [551.0, 2103.0], [573.0, 2106.0], [569.0, 1418.6666666666667], [565.0, 2104.5], [563.0, 2104.5], [561.0, 2104.0], [557.0, 2102.5], [555.0, 2103.5], [553.0, 2104.0], [547.0, 2116.0], [545.0, 2115.0], [579.0, 1590.75], [589.0, 1075.0], [593.0, 1076.0], [595.0, 1077.5], [597.0, 1079.0], [605.0, 54.0], [601.0, 2101.5], [599.0, 2101.5], [591.0, 2102.0], [635.0, 1331.5], [611.0, 1415.6666666666667], [615.0, 2099.0], [613.0, 2100.0], [619.0, 1075.0], [617.0, 2105.0], [621.0, 1418.6666666666667], [639.0, 1330.0], [631.0, 2098.5], [629.0, 2104.0], [625.0, 2103.0], [623.0, 2103.0], [609.0, 2102.0], [667.0, 2576.0], [641.0, 1330.0], [647.0, 1321.5], [645.0, 2601.0], [643.0, 2609.6666666666665], [653.0, 1321.0], [651.0, 2589.0], [655.0, 2590.0], [659.0, 1316.5], [671.0, 2052.0], [669.0, 2573.5], [665.0, 2577.0], [663.0, 2576.0], [661.0, 2580.0], [697.0, 2044.0], [701.0, 1046.0], [677.0, 1053.5], [675.0, 2052.0], [673.0, 2051.0], [679.0, 2051.5], [695.0, 1046.0], [699.0, 2044.5], [693.0, 2048.0], [691.0, 2051.0], [687.0, 2051.0], [685.0, 2051.6666666666665], [681.0, 2052.0], [711.0, 1046.5], [709.0, 1379.6666666666667], [717.0, 2040.0], [707.0, 2045.0], [735.0, 53.0], [713.0, 50.0], [715.0, 1048.0], [725.0, 52.0], [727.0, 53.0], [747.0, 43.6], [741.0, 54.0], [767.0, 40.0], [745.0, 46.0], [749.0, 41.5], [773.0, 57.0], [777.0, 2432.7142857142862], [779.0, 842.4], [783.0, 1064.0], [785.0, 555.5], [799.0, 2081.0], [789.0, 2080.0], [787.0, 2080.0], [829.0, 2076.0], [801.0, 1065.5], [805.0, 50.0], [803.0, 2082.0], [815.0, 1569.25], [811.0, 2074.0], [809.0, 2082.0], [831.0, 2076.0], [817.0, 2074.5], [827.0, 2075.0], [825.0, 2074.75], [821.0, 2074.0], [819.0, 2075.0], [839.0, 564.625], [841.0, 857.0], [843.0, 1396.6666666666667], [847.0, 38.0], [845.0, 2070.0], [849.0, 33.0], [863.0, 2072.0], [859.0, 2071.0], [857.0, 2070.0], [851.0, 32.0], [855.0, 731.6666666666666], [853.0, 448.6], [837.0, 333.57142857142856], [835.0, 41.714285714285715], [833.0, 497.0], [893.0, 2043.0], [867.0, 1050.5], [871.0, 30.0], [869.0, 2072.0], [891.0, 2039.0], [895.0, 2039.0], [877.0, 1046.25], [875.0, 2062.0], [873.0, 2070.6666666666665], [879.0, 30.5], [881.0, 31.0], [885.0, 1368.6666666666667], [883.0, 2038.0], [887.0, 30.0], [903.0, 33.0], [905.0, 1035.5], [907.0, 2038.5], [925.0, 1056.0], [923.0, 1574.0], [921.0, 1573.0], [917.0, 804.0], [915.0, 1573.0], [913.0, 1571.0], [919.0, 1574.0], [927.0, 2078.0], [901.0, 1035.75], [899.0, 533.5], [909.0, 802.5], [911.0, 1571.0], [897.0, 2038.0], [957.0, 1558.0], [929.0, 1057.0], [943.0, 1568.0], [941.0, 1568.0], [939.0, 1568.0], [937.0, 1568.0], [931.0, 545.0], [959.0, 2060.0], [955.0, 1557.0], [953.0, 1558.0], [935.0, 1560.0], [933.0, 1561.0], [951.0, 1559.0], [949.0, 1558.0], [947.0, 1555.0], [945.0, 1567.0], [989.0, 1535.0], [991.0, 1548.0], [987.0, 1535.0], [985.0, 1550.0], [983.0, 1537.0], [981.0, 1553.0], [979.0, 1553.0], [977.0, 1553.0], [975.0, 1553.0], [963.0, 2061.0], [961.0, 2061.0], [967.0, 1558.0], [965.0, 2068.0], [973.0, 1552.0], [971.0, 1553.0], [969.0, 1557.0], [1017.0, 790.0], [1009.0, 397.25], [1007.0, 786.0], [995.0, 1564.0], [993.0, 1548.0], [999.0, 2070.0], [997.0, 1568.0], [1005.0, 1568.0], [1003.0, 1567.0], [1001.0, 2117.0], [1013.0, 780.0], [1019.0, 778.5], [1023.0, 1033.5], [1021.0, 1556.0], [1015.0, 2137.0], [1011.0, 1555.0], [1082.0, 1620.0], [1086.0, 1609.0], [1078.0, 1621.0], [1074.0, 1613.0], [1070.0, 1613.0], [1066.0, 1624.0], [1062.0, 1624.0], [1058.0, 2149.0], [1054.0, 2149.0], [1030.0, 1552.0], [1026.0, 1549.0], [1038.0, 1563.0], [1034.0, 1553.0], [1050.0, 1615.0], [1046.0, 1616.0], [1042.0, 2052.0], [1146.0, 1577.0], [1150.0, 1567.0], [1142.0, 1580.0], [1102.0, 1610.0], [1098.0, 2128.0], [1094.0, 1596.0], [1090.0, 1596.0], [1134.0, 1593.0], [1126.0, 1594.0], [1122.0, 1595.0], [1118.0, 1596.0], [1114.0, 1598.0], [1110.0, 1607.0], [1106.0, 1599.0], [1210.0, 2056.0], [1214.0, 1550.0], [1206.0, 1555.0], [1202.0, 1556.0], [1198.0, 1557.0], [1194.0, 2062.0], [1190.0, 1559.0], [1186.0, 2068.0], [1182.0, 1553.0], [1158.0, 1560.0], [1154.0, 2077.0], [1166.0, 1560.0], [1162.0, 1559.0], [1178.0, 1553.0], [1174.0, 1552.0], [1170.0, 1558.0], [1270.0, 1522.6666666666667], [1274.0, 1527.5], [1266.0, 1522.0], [1230.0, 1536.0], [1226.0, 1548.0], [1222.0, 1548.0], [1218.0, 1546.0], [1262.0, 1523.0], [1258.0, 1523.0], [1254.0, 1532.0], [1250.0, 1530.0], [1246.0, 1535.0], [1242.0, 2032.0], [1238.0, 1535.0], [1234.0, 1536.0], [1338.0, 1525.0], [1342.0, 1526.0], [1334.0, 1529.0], [1330.0, 1529.0], [1326.0, 1530.0], [1322.0, 1527.0], [1314.0, 1526.0], [1310.0, 1524.0], [1294.0, 2027.0], [1286.0, 1526.5], [1302.0, 1776.0], [1366.0, 1629.0], [1362.0, 1630.0], [1358.0, 1631.0], [1354.0, 1632.0], [1350.0, 1634.0], [1346.0, 1527.0], [1442.0, 1627.0], [1426.0, 1627.0], [1474.0, 28.0], [1494.0, 28.0], [1510.0, 29.0], [1542.0, 31.0], [1598.0, 1567.0], [1654.0, 1558.3333333333333], [1662.0, 1570.0], [1650.0, 1559.0], [1606.0, 1561.0], [1646.0, 1559.0], [1642.0, 1561.0], [1638.0, 1560.0], [1634.0, 1561.0], [1626.0, 1560.0], [1618.0, 1559.0], [1722.0, 1551.0], [1726.0, 1551.0], [1718.0, 1546.0], [1714.0, 1547.0], [1710.0, 1563.0], [1702.0, 1572.0], [1698.0, 1573.0], [1690.0, 1574.0], [1678.0, 1575.0], [1674.0, 1576.0], [1666.0, 1571.0], [1686.0, 1564.0], [1786.0, 1544.0], [1790.0, 1544.5], [1782.0, 1546.5], [1778.0, 1548.0], [1774.0, 1543.0], [1770.0, 1546.5], [1766.0, 1544.0], [1754.0, 1547.5], [1742.0, 1550.0], [1738.0, 1541.0], [1734.0, 1550.0], [1730.0, 1552.0], [1750.0, 1548.0], [1842.0, 1533.0], [1854.0, 1534.0], [1834.0, 1038.6666666666667], [1850.0, 1534.0], [1838.0, 1533.0], [1830.0, 1541.0], [1822.0, 1541.0], [1814.0, 1538.5], [1806.0, 1537.0], [1794.0, 1540.0], [1910.0, 872.25], [1918.0, 1118.0], [1906.0, 878.0], [1870.0, 1536.0], [1866.0, 1531.0], [1862.0, 1532.0], [1902.0, 998.3333333333333], [1914.0, 1084.0], [1898.0, 1531.0], [1886.0, 1535.5], [1882.0, 1530.0], [1878.0, 1530.0], [1978.0, 1048.0], [1926.0, 707.6666666666667], [1922.0, 1083.0], [1934.0, 1091.0], [1930.0, 1084.0], [1950.0, 1575.0], [1946.0, 1574.0], [1942.0, 1076.0], [1938.0, 1093.0], [1982.0, 1054.0], [1974.0, 1570.0], [1970.0, 1051.0], [1966.0, 1566.0], [1962.0, 1563.0], [1958.0, 1081.0], [1954.0, 1073.0], [2042.0, 1092.0], [2046.0, 1615.0], [2038.0, 1600.0], [2034.0, 1599.0], [2030.0, 1037.0], [2026.0, 1037.0], [2022.0, 1036.0], [2018.0, 1541.0], [2014.0, 1045.0], [1990.0, 1555.0], [1986.0, 1601.0], [1998.0, 1562.0], [1994.0, 1561.0], [2010.0, 1046.0], [2006.0, 1047.0], [2002.0, 1559.0], [2164.0, 1076.0], [2172.0, 1588.0], [2116.0, 1092.0], [2124.0, 1089.0], [2132.0, 1096.0], [2156.0, 1079.0], [2148.0, 1079.0], [2108.0, 1119.0], [2052.0, 1596.0], [2060.0, 1086.0], [2068.0, 1606.0], [2076.0, 1075.0], [2100.0, 1122.0], [2092.0, 1065.0], [2084.0, 1072.0], [2140.0, 1085.0], [2188.0, 1579.0], [2284.0, 451.0], [2180.0, 1587.0], [2276.0, 637.0], [2204.0, 1572.0], [2220.0, 1571.0], [2212.0, 1573.0], [2228.0, 1064.0], [2236.0, 1058.0], [2300.0, 1064.0], [2244.0, 1054.0], [2252.0, 1057.0], [2260.0, 1055.0], [2268.0, 1074.0], [2292.0, 1063.0], [2388.0, 225.0], [2396.0, 227.0], [2420.0, 229.0], [2404.0, 1046.0], [2380.0, 1053.0], [2308.0, 1058.0], [2460.0, 234.0], [2484.0, 236.0], [2516.0, 240.0], [2580.0, 1100.0], [2668.0, 277.25], [2604.0, 455.3333333333333], [2612.0, 456.3333333333333], [2660.0, 1055.0], [2588.0, 1098.0], [2572.0, 1047.0], [2564.0, 1060.0], [2620.0, 1085.0], [2596.0, 454.0], [2684.0, 634.6], [2628.0, 1081.0], [2676.0, 1052.0], [2636.0, 121.0], [2644.0, 597.0], [2652.0, 592.5], [2788.0, 1040.0], [2812.0, 790.0], [2756.0, 954.5], [2796.0, 1038.0], [2700.0, 705.6666666666666], [2716.0, 1036.0], [2748.0, 1042.0], [2740.0, 660.5], [2732.0, 532.0], [2772.0, 913.0], [2780.0, 1036.0], [2764.0, 1041.0], [2916.0, 646.0], [2924.0, 903.5], [2932.0, 1235.0], [2940.0, 1235.0], [2884.0, 757.0], [2844.0, 787.5], [2836.0, 787.5], [2820.0, 790.5], [2828.0, 1032.5], [2900.0, 650.5], [2908.0, 747.0], [2892.0, 653.0], [2868.0, 1037.0], [2860.0, 1027.0], [2852.0, 1035.0], [2876.0, 1020.0], [2964.0, 895.5], [2972.0, 642.5], [2956.0, 897.0], [2948.0, 1230.0], [3004.0, 956.5], [2996.0, 695.0], [3012.0, 370.5], [3020.0, 691.0], [3028.0, 1204.0], [3068.0, 1069.0], [2988.0, 374.0], [2980.0, 643.5], [3092.0, 1063.0], [3084.0, 561.0], [3100.0, 1053.0], [3156.0, 59.0], [3140.0, 57.0], [3180.0, 536.0], [3124.0, 1043.0], [3076.0, 1068.0], [3116.0, 1047.0], [3108.0, 1050.0], [3324.0, 58.0], [3316.0, 58.0], [3220.0, 51.0], [3388.0, 544.0], [3436.0, 559.0], [3428.0, 513.0], [3444.0, 557.0], [3452.0, 278.0], [3372.0, 305.0], [3364.0, 561.0], [3380.0, 555.0], [3348.0, 563.0], [3356.0, 561.0], [3420.0, 527.0], [3412.0, 461.0], [3404.0, 543.0], [3396.0, 542.0], [3484.0, 290.5], [3556.0, 356.6666666666667], [3540.0, 59.0], [3548.0, 517.0], [3476.0, 507.0], [3460.0, 509.0], [3516.0, 54.5], [3492.0, 525.0], [3500.0, 287.5], [3524.0, 338.85714285714283], [3532.0, 517.0], [3572.0, 544.5], [3612.0, 542.5], [3700.0, 47.333333333333336], [3692.0, 51.0], [3684.0, 46.5], [3596.0, 511.0], [3588.0, 510.0], [3644.0, 45.0], [3604.0, 547.0], [3676.0, 46.0], [3668.0, 47.0], [3660.0, 50.0], [3652.0, 42.0], [3628.0, 507.3333333333333], [3620.0, 508.0], [3636.0, 35.0], [3716.0, 590.0], [2165.0, 1077.0], [2125.0, 1089.0], [2133.0, 1089.0], [2157.0, 446.3333333333333], [2173.0, 1074.0], [2109.0, 1120.0], [2053.0, 1612.0], [2061.0, 1083.0], [2077.0, 1074.0], [2069.0, 1585.0], [2101.0, 1130.0], [2093.0, 1065.0], [2085.0, 1073.0], [2141.0, 1087.0], [2181.0, 631.5], [2285.0, 420.0], [2237.0, 1059.0], [2205.0, 1572.0], [2197.0, 1577.0], [2189.0, 1581.0], [2213.0, 1573.0], [2221.0, 1571.0], [2229.0, 486.6666666666667], [2301.0, 1059.0], [2245.0, 1055.0], [2253.0, 1057.0], [2261.0, 1586.0], [2269.0, 1074.0], [2293.0, 1066.0], [2277.0, 1070.0], [2309.0, 634.0], [2525.0, 241.0], [2565.0, 308.2], [2613.0, 377.75], [2605.0, 1088.0], [2621.0, 1086.0], [2589.0, 1098.0], [2581.0, 1100.0], [2573.0, 1046.0], [2661.0, 1049.0], [2669.0, 408.3333333333333], [2597.0, 612.5], [2629.0, 1081.0], [2637.0, 1076.0], [2645.0, 598.25], [2653.0, 1057.0], [2677.0, 23.0], [2757.0, 704.6666666666666], [2765.0, 536.0], [2773.0, 1032.0], [2781.0, 1031.0], [2813.0, 1037.0], [2805.0, 1034.0], [2797.0, 1038.0], [2789.0, 1040.0], [2717.0, 1046.0], [2709.0, 1040.5], [2701.0, 1045.0], [2693.0, 1045.0], [2749.0, 1035.0], [2741.0, 660.75], [2733.0, 1044.5], [2941.0, 1235.0], [2933.0, 899.5], [2893.0, 747.0], [2885.0, 757.0], [2901.0, 746.0], [2909.0, 746.0], [2837.0, 1036.0], [2829.0, 1028.0], [2845.0, 1036.0], [2917.0, 1231.0], [2925.0, 1244.0], [2877.0, 755.0], [2821.0, 1037.0], [2853.0, 551.0], [3005.0, 1209.0], [3021.0, 262.66666666666663], [3069.0, 562.0], [2997.0, 628.5], [2989.0, 1220.0], [2981.0, 1224.0], [2965.0, 1224.0], [2957.0, 714.0], [2973.0, 1223.0], [2949.0, 890.0], [3029.0, 1202.0], [3013.0, 1209.0], [3077.0, 562.5], [3101.0, 1051.0], [3085.0, 1066.0], [3109.0, 1049.0], [3125.0, 1043.0], [3117.0, 544.0], [3277.0, 56.0], [3437.0, 279.5], [3357.0, 304.5], [3445.0, 504.0], [3429.0, 563.0], [3413.0, 394.0], [3405.0, 297.0], [3397.0, 542.0], [3349.0, 563.0], [3389.0, 545.0], [3381.0, 555.0], [3373.0, 559.0], [3365.0, 558.0], [3565.0, 574.0], [3485.0, 543.0], [3573.0, 275.5], [3541.0, 522.0], [3549.0, 515.0], [3525.0, 548.0], [3581.0, 512.5], [3517.0, 418.75], [3493.0, 366.6666666666667], [3501.0, 525.0], [3509.0, 524.5], [3461.0, 279.5], [3469.0, 506.3333333333333], [3701.0, 47.5], [3693.0, 50.0], [3653.0, 41.0], [3685.0, 52.0], [3597.0, 511.0], [3605.0, 509.0], [3613.0, 507.0], [3669.0, 46.0], [3677.0, 44.0], [3661.0, 48.0], [3637.0, 39.5], [3629.0, 538.5], [3645.0, 45.0], [3741.0, 587.0], [3725.0, 591.0], [1083.0, 1620.0], [1087.0, 1618.0], [1079.0, 1612.0], [1075.0, 1621.0], [1071.0, 1613.0], [1067.0, 1624.0], [1063.0, 1616.0], [1059.0, 1625.0], [1055.0, 2149.0], [1031.0, 2056.0], [1027.0, 1549.0], [1039.0, 1564.0], [1035.0, 1552.0], [1051.0, 1615.0], [1047.0, 1616.0], [1043.0, 1565.0], [1139.0, 1587.375], [1147.0, 1568.0], [1151.0, 1577.0], [1143.0, 1573.0], [1127.0, 1593.0], [1123.0, 1585.0], [1119.0, 1587.0], [1095.0, 2128.0], [1091.0, 1595.0], [1103.0, 1600.0], [1099.0, 2128.0], [1115.0, 1597.0], [1111.0, 1597.0], [1107.0, 1608.0], [1211.0, 2056.0], [1215.0, 1546.0], [1207.0, 1554.0], [1203.0, 1552.0], [1199.0, 1556.0], [1195.0, 2063.0], [1191.0, 1556.0], [1187.0, 2068.0], [1183.0, 1552.0], [1159.0, 1560.0], [1155.0, 1566.0], [1167.0, 1559.0], [1163.0, 1559.0], [1179.0, 1552.0], [1175.0, 1553.0], [1171.0, 1553.0], [1275.0, 1534.0], [1279.0, 1777.0], [1271.0, 1531.0], [1267.0, 1522.5], [1263.0, 1532.0], [1259.0, 1532.0], [1255.0, 1533.0], [1251.0, 2036.0], [1247.0, 2037.0], [1223.0, 1548.0], [1219.0, 1550.0], [1231.0, 1548.0], [1227.0, 1548.0], [1243.0, 1535.0], [1239.0, 2043.0], [1235.0, 1535.0], [1339.0, 1526.0], [1343.0, 1526.0], [1335.0, 1530.0], [1331.0, 1529.0], [1327.0, 1517.0], [1319.0, 2030.0], [1315.0, 2031.0], [1311.0, 1525.5], [1287.0, 1527.0], [1283.0, 1525.0], [1307.0, 1522.0], [1303.0, 2030.0], [1299.0, 1521.5], [1387.0, 23.0], [1367.0, 1630.0], [1363.0, 1630.0], [1359.0, 1631.0], [1355.0, 1632.0], [1351.0, 1634.0], [1347.0, 1527.0], [1455.0, 26.0], [1435.0, 1627.0], [1479.0, 27.0], [1531.0, 30.0], [1599.0, 1567.0], [1551.0, 1625.0], [1659.0, 1567.0], [1663.0, 1571.0], [1651.0, 1560.0], [1615.0, 1558.5], [1607.0, 1562.0], [1603.0, 1562.0], [1647.0, 1559.0], [1643.0, 1559.0], [1639.0, 1560.0], [1635.0, 1561.0], [1631.0, 1560.3333333333333], [1623.0, 1559.5], [1619.0, 1560.0], [1715.0, 1546.0], [1711.0, 1560.0], [1699.0, 1569.0], [1695.0, 1574.0], [1687.0, 1570.0], [1683.0, 1569.0], [1679.0, 1576.0], [1667.0, 1570.0], [1743.0, 1549.0], [1787.0, 1538.5], [1791.0, 1537.0], [1779.0, 1544.0], [1775.0, 1544.0], [1759.0, 1544.3333333333333], [1755.0, 1549.0], [1747.0, 1544.0], [1739.0, 1549.0], [1735.0, 1549.0], [1851.0, 1540.0], [1855.0, 1533.0], [1847.0, 1536.0], [1843.0, 1541.0], [1839.0, 1540.0], [1835.0, 1541.0], [1831.0, 1535.0], [1827.0, 1542.0], [1823.0, 1542.0], [1799.0, 1542.5], [1807.0, 1546.0], [1803.0, 1541.5], [1819.0, 1542.0], [1815.0, 1546.0], [1915.0, 1084.0], [1919.0, 766.4285714285714], [1911.0, 863.0], [1907.0, 1602.0], [1903.0, 1089.0], [1899.0, 1084.0], [1895.0, 1529.0], [1891.0, 1529.5], [1883.0, 1536.0], [1871.0, 1538.0], [1863.0, 1532.0], [1875.0, 1534.0], [1979.0, 1048.0], [1923.0, 739.75], [1939.0, 398.0], [1943.0, 1063.0], [1951.0, 1072.0], [1947.0, 1573.0], [1983.0, 1070.0], [1975.0, 1571.0], [1971.0, 1057.0], [1935.0, 1091.0], [1931.0, 1084.0], [1927.0, 1084.0], [1967.0, 1567.0], [1963.0, 1565.0], [1959.0, 1056.0], [1955.0, 1073.0], [2043.0, 1601.0], [2047.0, 1597.0], [2039.0, 1091.0], [2035.0, 1092.0], [2031.0, 1037.0], [2027.0, 1037.0], [2023.0, 1037.0], [2019.0, 1542.0], [2015.0, 1539.0], [1991.0, 1555.0], [1987.0, 1554.0], [1999.0, 1561.0], [1995.0, 1561.0], [2011.0, 1033.0], [2007.0, 1046.0], [2003.0, 1046.0], [2158.0, 1077.0], [2166.0, 889.5], [2174.0, 889.0], [2118.0, 1096.0], [2126.0, 1089.0], [2134.0, 1599.0], [2078.0, 1598.0], [2070.0, 1079.0], [2062.0, 1591.0], [2054.0, 1088.0], [2110.0, 1103.0], [2094.0, 1065.0], [2086.0, 1579.0], [2142.0, 1080.0], [2302.0, 1059.0], [2286.0, 637.0], [2254.0, 624.0], [2262.0, 1586.0], [2270.0, 1583.0], [2246.0, 1055.0], [2294.0, 1064.0], [2278.0, 1071.0], [2238.0, 1061.0], [2182.0, 1068.0], [2190.0, 1069.0], [2198.0, 1576.0], [2206.0, 1572.0], [2230.0, 1063.0], [2222.0, 1570.0], [2214.0, 1572.0], [2334.0, 213.0], [2366.0, 224.0], [2310.0, 1058.0], [2566.0, 1059.0], [2670.0, 606.5], [2606.0, 452.3333333333333], [2614.0, 1087.0], [2622.0, 1084.0], [2574.0, 1101.0], [2582.0, 1100.0], [2590.0, 1100.0], [2598.0, 454.0], [2630.0, 455.6666666666667], [2638.0, 1073.0], [2646.0, 597.5], [2654.0, 589.5], [2686.0, 1047.0], [2718.0, 1048.0], [2814.0, 785.5], [2806.0, 790.5], [2790.0, 1038.0], [2702.0, 536.0], [2742.0, 703.3333333333334], [2734.0, 1045.0], [2726.0, 1043.3333333333333], [2758.0, 789.0], [2782.0, 1041.0], [2774.0, 1041.0], [2830.0, 545.0], [2822.0, 1028.0], [2902.0, 746.0], [2894.0, 749.0], [2910.0, 747.0], [2886.0, 657.0], [2870.0, 1035.0], [2862.0, 1029.0], [2878.0, 755.0], [2942.0, 1235.0], [2934.0, 1236.0], [2926.0, 1245.0], [2918.0, 1241.0], [2838.0, 1028.0], [2974.0, 1220.0], [3070.0, 570.0], [3054.0, 55.0], [3062.0, 55.0], [2966.0, 1223.0], [2958.0, 1229.0], [2950.0, 1224.0], [3006.0, 1215.0], [3038.0, 52.0], [3030.0, 368.0], [3022.0, 370.0], [3014.0, 693.0], [2990.0, 703.0], [2982.0, 1223.0], [2998.0, 696.0], [3126.0, 549.0], [3134.0, 56.0], [3110.0, 1049.0], [3078.0, 1067.0], [3086.0, 1065.0], [3094.0, 1059.5], [3102.0, 551.0], [3118.0, 1045.0], [3302.0, 57.0], [3310.0, 58.0], [3390.0, 544.0], [3438.0, 556.5], [3430.0, 283.0], [3446.0, 302.5], [3454.0, 507.3333333333333], [3398.0, 296.5], [3366.0, 303.5], [3374.0, 555.0], [3382.0, 548.0], [3350.0, 563.0], [3358.0, 560.0], [3414.0, 584.6666666666666], [3406.0, 542.0], [3574.0, 513.0], [3526.0, 560.0], [3534.0, 535.0], [3542.0, 523.0], [3550.0, 287.5], [3558.0, 517.0], [3566.0, 513.6666666666666], [3478.0, 306.0], [3470.0, 506.0], [3518.0, 523.0], [3494.0, 526.0], [3502.0, 525.0], [3510.0, 523.0], [3694.0, 50.0], [3702.0, 318.5], [3686.0, 51.5], [3614.0, 275.0], [3606.0, 275.5], [3598.0, 510.0], [3590.0, 510.5], [3678.0, 44.0], [3670.0, 46.5], [3662.0, 317.5], [3654.0, 40.0], [3646.0, 446.0], [3638.0, 34.0], [3622.0, 42.0], [3630.0, 127.0], [2167.0, 574.5], [2135.0, 1088.0], [2127.0, 1088.0], [2119.0, 1090.0], [2143.0, 1600.0], [2151.0, 1115.25], [2175.0, 1075.0], [2159.0, 1078.0], [2079.0, 1599.0], [2071.0, 1078.0], [2063.0, 1745.0], [2055.0, 1084.0], [2111.0, 1102.0], [2095.0, 1066.0], [2087.0, 1071.0], [2191.0, 1069.0], [2183.0, 406.6666666666667], [2199.0, 1577.0], [2239.0, 1062.0], [2231.0, 1065.0], [2223.0, 1570.0], [2215.0, 1571.0], [2303.0, 1061.0], [2247.0, 1055.0], [2255.0, 1049.0], [2263.0, 1587.0], [2271.0, 1582.0], [2295.0, 1064.0], [2287.0, 1063.0], [2279.0, 1074.0], [2207.0, 1573.0], [2327.0, 212.0], [2343.0, 214.0], [2407.0, 228.0], [2311.0, 1042.0], [2447.0, 233.0], [2439.0, 1049.0], [2503.0, 238.0], [2535.0, 243.0], [2543.0, 243.0], [2567.0, 1060.0], [2607.0, 1087.0], [2615.0, 1087.0], [2663.0, 711.0], [2623.0, 1085.0], [2575.0, 1101.0], [2583.0, 1100.0], [2591.0, 1097.0], [2671.0, 362.6666666666667], [2599.0, 374.25], [2631.0, 379.0], [2647.0, 1061.0], [2639.0, 1080.0], [2655.0, 1061.0], [2679.0, 21.5], [2687.0, 1050.0], [2807.0, 1030.0], [2719.0, 540.3333333333334], [2799.0, 790.5], [2791.0, 1030.0], [2815.0, 1037.0], [2759.0, 1042.0], [2767.0, 1032.0], [2783.0, 785.5], [2775.0, 540.0], [2703.0, 593.3333333333334], [2711.0, 1041.0], [2751.0, 1043.5], [2743.0, 535.0], [2735.0, 151.0], [2727.0, 276.5], [2935.0, 1241.0], [2847.0, 547.0], [2943.0, 900.0], [2903.0, 653.0], [2895.0, 741.0], [2887.0, 757.0], [2911.0, 747.0], [2871.0, 1034.6666666666667], [2839.0, 546.0], [2879.0, 756.0], [2831.0, 1028.0], [2927.0, 1244.0], [2919.0, 1241.0], [2967.0, 1223.0], [3015.0, 628.0], [3071.0, 1068.0], [2975.0, 386.5], [2959.0, 713.0], [2951.0, 1224.0], [2983.0, 634.0], [2991.0, 703.0], [2999.0, 697.0], [3007.0, 1208.0], [3031.0, 1202.0], [3095.0, 1055.0], [3167.0, 60.0], [3159.0, 60.0], [3103.0, 1051.0], [3087.0, 561.5], [3079.0, 1066.0], [3119.0, 298.0], [3111.0, 1048.0], [3263.0, 54.0], [3247.0, 294.0], [3231.0, 52.0], [3207.0, 1070.0], [3447.0, 235.66666666666669], [3351.0, 311.5], [3439.0, 504.0], [3431.0, 510.0], [3359.0, 561.0], [3423.0, 529.6666666666666], [3415.0, 569.0], [3455.0, 278.5], [3407.0, 541.0], [3399.0, 543.0], [3391.0, 544.0], [3343.0, 60.0], [3335.0, 538.0], [3375.0, 555.0], [3367.0, 560.0], [3383.0, 546.0], [3567.0, 38.0], [3551.0, 544.5], [3543.0, 522.5], [3535.0, 522.0], [3559.0, 514.0], [3575.0, 513.0], [3583.0, 511.5], [3503.0, 287.5], [3511.0, 524.0], [3519.0, 55.0], [3463.0, 508.5], [3487.0, 526.5], [3479.0, 507.0], [3695.0, 51.0], [3687.0, 52.0], [3711.0, 589.0], [3615.0, 508.0], [3599.0, 510.0], [3671.0, 46.0], [3679.0, 46.0], [3663.0, 47.5], [3655.0, 313.5], [3639.0, 391.66666666666663], [3623.0, 507.0], [3631.0, 6.0], [3647.0, 44.5], [3591.0, 510.0], [3735.0, 587.0], [3719.0, 590.0], [1.0, 3637.0]], "isOverall": false, "label": "JDBC Request users", "isController": false}, {"data": [[1805.9058000000007, 1138.0182000000007]], "isOverall": false, "label": "JDBC Request users-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3741.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.69988574E12, "maxY": 12001.0, "series": [{"data": [[1.69988574E12, 12001.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69988574E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988574E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1138.0182000000007, "minX": 1.69988574E12, "maxY": 1138.0182000000007, "series": [{"data": [[1.69988574E12, 1138.0182000000007]], "isOverall": false, "label": "JDBC Request users", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988574E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.9543999999999985, "minX": 1.69988574E12, "maxY": 0.9543999999999985, "series": [{"data": [[1.69988574E12, 0.9543999999999985]], "isOverall": false, "label": "JDBC Request users", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988574E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1137.955999999997, "minX": 1.69988574E12, "maxY": 1137.955999999997, "series": [{"data": [[1.69988574E12, 1137.955999999997]], "isOverall": false, "label": "JDBC Request users", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988574E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.69988574E12, "maxY": 151.0, "series": [{"data": [[1.69988574E12, 151.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69988574E12, 57.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69988574E12, 138.27999999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69988574E12, 60.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69988574E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69988574E12, 39.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988574E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 242.0, "maxY": 3088.0, "series": [{"data": [[1512.0, 139.0], [425.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1099.0, 2055.0], [1512.0, 508.0], [425.0, 40.0], [1722.0, 1107.0], [242.0, 3088.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1722.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 242.0, "maxY": 138.5, "series": [{"data": [[1512.0, 138.5], [425.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1099.0, 0.0], [1512.0, 0.0], [425.0, 0.0], [1722.0, 0.0], [242.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1722.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69988574E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69988574E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988574E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988574E12, "maxY": 80.8, "series": [{"data": [[1.69988574E12, 2.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69988574E12, 80.8]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69988574E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988574E12, "maxY": 80.8, "series": [{"data": [[1.69988574E12, 2.533333333333333]], "isOverall": false, "label": "JDBC Request users-success", "isController": false}, {"data": [[1.69988574E12, 80.8]], "isOverall": false, "label": "JDBC Request users-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988574E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.533333333333333, "minX": 1.69988574E12, "maxY": 80.8, "series": [{"data": [[1.69988574E12, 2.533333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69988574E12, 80.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69988574E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

