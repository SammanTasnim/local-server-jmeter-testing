/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1359.0, "minX": 0.0, "maxY": 9802.0, "series": [{"data": [[0.0, 1359.0], [0.1, 1500.0], [0.2, 1509.0], [0.3, 1516.0], [0.4, 1527.0], [0.5, 1535.0], [0.6, 1542.0], [0.7, 1546.0], [0.8, 1561.0], [0.9, 1567.0], [1.0, 1576.0], [1.1, 1587.0], [1.2, 1593.0], [1.3, 1599.0], [1.4, 1603.0], [1.5, 1607.0], [1.6, 1610.0], [1.7, 1613.0], [1.8, 1614.0], [1.9, 1616.0], [2.0, 1622.0], [2.1, 1639.0], [2.2, 1645.0], [2.3, 1647.0], [2.4, 1651.0], [2.5, 1654.0], [2.6, 1656.0], [2.7, 1657.0], [2.8, 1659.0], [2.9, 1664.0], [3.0, 1666.0], [3.1, 1668.0], [3.2, 1697.0], [3.3, 1702.0], [3.4, 1708.0], [3.5, 1719.0], [3.6, 1726.0], [3.7, 1734.0], [3.8, 1740.0], [3.9, 1747.0], [4.0, 1752.0], [4.1, 1757.0], [4.2, 1770.0], [4.3, 1775.0], [4.4, 1788.0], [4.5, 1799.0], [4.6, 1810.0], [4.7, 1819.0], [4.8, 1826.0], [4.9, 1835.0], [5.0, 1844.0], [5.1, 1854.0], [5.2, 1866.0], [5.3, 1881.0], [5.4, 1888.0], [5.5, 1896.0], [5.6, 1961.0], [5.7, 1979.0], [5.8, 1983.0], [5.9, 1987.0], [6.0, 1989.0], [6.1, 1992.0], [6.2, 1997.0], [6.3, 2004.0], [6.4, 2008.0], [6.5, 2011.0], [6.6, 2014.0], [6.7, 2022.0], [6.8, 2027.0], [6.9, 2030.0], [7.0, 2033.0], [7.1, 2037.0], [7.2, 2044.0], [7.3, 2046.0], [7.4, 2052.0], [7.5, 2061.0], [7.6, 2068.0], [7.7, 2075.0], [7.8, 2081.0], [7.9, 2085.0], [8.0, 2086.0], [8.1, 2090.0], [8.2, 2096.0], [8.3, 2102.0], [8.4, 2111.0], [8.5, 2121.0], [8.6, 2132.0], [8.7, 2143.0], [8.8, 2144.0], [8.9, 2153.0], [9.0, 2167.0], [9.1, 2172.0], [9.2, 2179.0], [9.3, 2182.0], [9.4, 2188.0], [9.5, 2192.0], [9.6, 2198.0], [9.7, 2208.0], [9.8, 2212.0], [9.9, 2219.0], [10.0, 2222.0], [10.1, 2227.0], [10.2, 2234.0], [10.3, 2237.0], [10.4, 2242.0], [10.5, 2251.0], [10.6, 2259.0], [10.7, 2275.0], [10.8, 2299.0], [10.9, 2306.0], [11.0, 2313.0], [11.1, 2326.0], [11.2, 2337.0], [11.3, 2348.0], [11.4, 2355.0], [11.5, 2363.0], [11.6, 2376.0], [11.7, 2390.0], [11.8, 2400.0], [11.9, 2405.0], [12.0, 2411.0], [12.1, 2414.0], [12.2, 2424.0], [12.3, 2453.0], [12.4, 2459.0], [12.5, 2461.0], [12.6, 2467.0], [12.7, 2472.0], [12.8, 2476.0], [12.9, 2478.0], [13.0, 2480.0], [13.1, 2485.0], [13.2, 2490.0], [13.3, 2494.0], [13.4, 2503.0], [13.5, 2512.0], [13.6, 2540.0], [13.7, 2554.0], [13.8, 2562.0], [13.9, 2570.0], [14.0, 2576.0], [14.1, 2581.0], [14.2, 2597.0], [14.3, 2604.0], [14.4, 2605.0], [14.5, 2614.0], [14.6, 2641.0], [14.7, 2657.0], [14.8, 2670.0], [14.9, 2681.0], [15.0, 2687.0], [15.1, 2693.0], [15.2, 2695.0], [15.3, 2698.0], [15.4, 2701.0], [15.5, 2708.0], [15.6, 2709.0], [15.7, 2711.0], [15.8, 2714.0], [15.9, 2716.0], [16.0, 2718.0], [16.1, 2723.0], [16.2, 2724.0], [16.3, 2727.0], [16.4, 2729.0], [16.5, 2733.0], [16.6, 2747.0], [16.7, 2751.0], [16.8, 2754.0], [16.9, 2760.0], [17.0, 2763.0], [17.1, 2769.0], [17.2, 2775.0], [17.3, 2809.0], [17.4, 2825.0], [17.5, 2837.0], [17.6, 2853.0], [17.7, 2867.0], [17.8, 2881.0], [17.9, 2941.0], [18.0, 2960.0], [18.1, 2992.0], [18.2, 3004.0], [18.3, 3010.0], [18.4, 3021.0], [18.5, 3029.0], [18.6, 3035.0], [18.7, 3045.0], [18.8, 3057.0], [18.9, 3065.0], [19.0, 3074.0], [19.1, 3080.0], [19.2, 3090.0], [19.3, 3098.0], [19.4, 3110.0], [19.5, 3118.0], [19.6, 3148.0], [19.7, 3155.0], [19.8, 3160.0], [19.9, 3165.0], [20.0, 3171.0], [20.1, 3177.0], [20.2, 3184.0], [20.3, 3191.0], [20.4, 3197.0], [20.5, 3203.0], [20.6, 3205.0], [20.7, 3208.0], [20.8, 3211.0], [20.9, 3213.0], [21.0, 3215.0], [21.1, 3219.0], [21.2, 3220.0], [21.3, 3223.0], [21.4, 3228.0], [21.5, 3234.0], [21.6, 3241.0], [21.7, 3245.0], [21.8, 3248.0], [21.9, 3264.0], [22.0, 3280.0], [22.1, 3337.0], [22.2, 3342.0], [22.3, 3355.0], [22.4, 3357.0], [22.5, 3360.0], [22.6, 3361.0], [22.7, 3366.0], [22.8, 3375.0], [22.9, 3385.0], [23.0, 3392.0], [23.1, 3404.0], [23.2, 3425.0], [23.3, 3436.0], [23.4, 3443.0], [23.5, 3454.0], [23.6, 3463.0], [23.7, 3483.0], [23.8, 3486.0], [23.9, 3491.0], [24.0, 3503.0], [24.1, 3506.0], [24.2, 3511.0], [24.3, 3523.0], [24.4, 3528.0], [24.5, 3533.0], [24.6, 3535.0], [24.7, 3540.0], [24.8, 3542.0], [24.9, 3545.0], [25.0, 3549.0], [25.1, 3555.0], [25.2, 3563.0], [25.3, 3571.0], [25.4, 3573.0], [25.5, 3582.0], [25.6, 3588.0], [25.7, 3591.0], [25.8, 3596.0], [25.9, 3598.0], [26.0, 3604.0], [26.1, 3607.0], [26.2, 3610.0], [26.3, 3613.0], [26.4, 3618.0], [26.5, 3622.0], [26.6, 3624.0], [26.7, 3628.0], [26.8, 3630.0], [26.9, 3633.0], [27.0, 3635.0], [27.1, 3639.0], [27.2, 3643.0], [27.3, 3646.0], [27.4, 3655.0], [27.5, 3661.0], [27.6, 3671.0], [27.7, 3677.0], [27.8, 3679.0], [27.9, 3689.0], [28.0, 3695.0], [28.1, 3701.0], [28.2, 3708.0], [28.3, 3714.0], [28.4, 3721.0], [28.5, 3728.0], [28.6, 3737.0], [28.7, 3745.0], [28.8, 3779.0], [28.9, 3793.0], [29.0, 3798.0], [29.1, 3806.0], [29.2, 3810.0], [29.3, 3814.0], [29.4, 3818.0], [29.5, 3821.0], [29.6, 3825.0], [29.7, 3830.0], [29.8, 3843.0], [29.9, 3855.0], [30.0, 3864.0], [30.1, 3902.0], [30.2, 3922.0], [30.3, 3981.0], [30.4, 4029.0], [30.5, 4035.0], [30.6, 4042.0], [30.7, 4044.0], [30.8, 4046.0], [30.9, 4048.0], [31.0, 4049.0], [31.1, 4052.0], [31.2, 4054.0], [31.3, 4055.0], [31.4, 4056.0], [31.5, 4058.0], [31.6, 4060.0], [31.7, 4061.0], [31.8, 4063.0], [31.9, 4066.0], [32.0, 4067.0], [32.1, 4070.0], [32.2, 4072.0], [32.3, 4074.0], [32.4, 4075.0], [32.5, 4077.0], [32.6, 4078.0], [32.7, 4079.0], [32.8, 4080.0], [32.9, 4081.0], [33.0, 4082.0], [33.1, 4083.0], [33.2, 4084.0], [33.3, 4084.0], [33.4, 4086.0], [33.5, 4087.0], [33.6, 4088.0], [33.7, 4090.0], [33.8, 4092.0], [33.9, 4092.0], [34.0, 4094.0], [34.1, 4094.0], [34.2, 4095.0], [34.3, 4095.0], [34.4, 4096.0], [34.5, 4097.0], [34.6, 4098.0], [34.7, 4099.0], [34.8, 4100.0], [34.9, 4100.0], [35.0, 4101.0], [35.1, 4101.0], [35.2, 4102.0], [35.3, 4103.0], [35.4, 4104.0], [35.5, 4105.0], [35.6, 4106.0], [35.7, 4106.0], [35.8, 4106.0], [35.9, 4108.0], [36.0, 4109.0], [36.1, 4110.0], [36.2, 4110.0], [36.3, 4111.0], [36.4, 4111.0], [36.5, 4112.0], [36.6, 4113.0], [36.7, 4114.0], [36.8, 4114.0], [36.9, 4114.0], [37.0, 4115.0], [37.1, 4115.0], [37.2, 4116.0], [37.3, 4116.0], [37.4, 4117.0], [37.5, 4118.0], [37.6, 4118.0], [37.7, 4119.0], [37.8, 4120.0], [37.9, 4121.0], [38.0, 4122.0], [38.1, 4122.0], [38.2, 4122.0], [38.3, 4123.0], [38.4, 4123.0], [38.5, 4124.0], [38.6, 4125.0], [38.7, 4126.0], [38.8, 4127.0], [38.9, 4128.0], [39.0, 4128.0], [39.1, 4129.0], [39.2, 4129.0], [39.3, 4130.0], [39.4, 4130.0], [39.5, 4131.0], [39.6, 4132.0], [39.7, 4133.0], [39.8, 4133.0], [39.9, 4134.0], [40.0, 4135.0], [40.1, 4136.0], [40.2, 4137.0], [40.3, 4137.0], [40.4, 4137.0], [40.5, 4138.0], [40.6, 4139.0], [40.7, 4140.0], [40.8, 4141.0], [40.9, 4142.0], [41.0, 4143.0], [41.1, 4144.0], [41.2, 4145.0], [41.3, 4146.0], [41.4, 4147.0], [41.5, 4147.0], [41.6, 4148.0], [41.7, 4149.0], [41.8, 4151.0], [41.9, 4152.0], [42.0, 4153.0], [42.1, 4154.0], [42.2, 4155.0], [42.3, 4156.0], [42.4, 4156.0], [42.5, 4157.0], [42.6, 4158.0], [42.7, 4161.0], [42.8, 4162.0], [42.9, 4162.0], [43.0, 4163.0], [43.1, 4164.0], [43.2, 4164.0], [43.3, 4165.0], [43.4, 4166.0], [43.5, 4166.0], [43.6, 4167.0], [43.7, 4167.0], [43.8, 4168.0], [43.9, 4169.0], [44.0, 4169.0], [44.1, 4170.0], [44.2, 4170.0], [44.3, 4170.0], [44.4, 4171.0], [44.5, 4172.0], [44.6, 4172.0], [44.7, 4173.0], [44.8, 4173.0], [44.9, 4173.0], [45.0, 4174.0], [45.1, 4174.0], [45.2, 4175.0], [45.3, 4175.0], [45.4, 4176.0], [45.5, 4177.0], [45.6, 4178.0], [45.7, 4178.0], [45.8, 4179.0], [45.9, 4179.0], [46.0, 4180.0], [46.1, 4180.0], [46.2, 4181.0], [46.3, 4182.0], [46.4, 4182.0], [46.5, 4183.0], [46.6, 4183.0], [46.7, 4184.0], [46.8, 4184.0], [46.9, 4185.0], [47.0, 4185.0], [47.1, 4185.0], [47.2, 4186.0], [47.3, 4187.0], [47.4, 4188.0], [47.5, 4189.0], [47.6, 4189.0], [47.7, 4190.0], [47.8, 4190.0], [47.9, 4191.0], [48.0, 4191.0], [48.1, 4192.0], [48.2, 4192.0], [48.3, 4193.0], [48.4, 4193.0], [48.5, 4194.0], [48.6, 4194.0], [48.7, 4195.0], [48.8, 4195.0], [48.9, 4196.0], [49.0, 4196.0], [49.1, 4197.0], [49.2, 4198.0], [49.3, 4198.0], [49.4, 4199.0], [49.5, 4199.0], [49.6, 4199.0], [49.7, 4200.0], [49.8, 4200.0], [49.9, 4201.0], [50.0, 4201.0], [50.1, 4202.0], [50.2, 4203.0], [50.3, 4203.0], [50.4, 4204.0], [50.5, 4204.0], [50.6, 4205.0], [50.7, 4206.0], [50.8, 4206.0], [50.9, 4207.0], [51.0, 4207.0], [51.1, 4208.0], [51.2, 4208.0], [51.3, 4209.0], [51.4, 4209.0], [51.5, 4210.0], [51.6, 4210.0], [51.7, 4211.0], [51.8, 4211.0], [51.9, 4211.0], [52.0, 4212.0], [52.1, 4212.0], [52.2, 4213.0], [52.3, 4213.0], [52.4, 4214.0], [52.5, 4215.0], [52.6, 4215.0], [52.7, 4215.0], [52.8, 4216.0], [52.9, 4216.0], [53.0, 4217.0], [53.1, 4218.0], [53.2, 4219.0], [53.3, 4219.0], [53.4, 4220.0], [53.5, 4220.0], [53.6, 4221.0], [53.7, 4221.0], [53.8, 4221.0], [53.9, 4221.0], [54.0, 4222.0], [54.1, 4223.0], [54.2, 4223.0], [54.3, 4224.0], [54.4, 4224.0], [54.5, 4224.0], [54.6, 4225.0], [54.7, 4225.0], [54.8, 4226.0], [54.9, 4226.0], [55.0, 4227.0], [55.1, 4227.0], [55.2, 4227.0], [55.3, 4228.0], [55.4, 4228.0], [55.5, 4229.0], [55.6, 4229.0], [55.7, 4229.0], [55.8, 4230.0], [55.9, 4230.0], [56.0, 4230.0], [56.1, 4231.0], [56.2, 4231.0], [56.3, 4231.0], [56.4, 4232.0], [56.5, 4232.0], [56.6, 4232.0], [56.7, 4233.0], [56.8, 4233.0], [56.9, 4234.0], [57.0, 4235.0], [57.1, 4235.0], [57.2, 4236.0], [57.3, 4236.0], [57.4, 4236.0], [57.5, 4237.0], [57.6, 4237.0], [57.7, 4237.0], [57.8, 4238.0], [57.9, 4238.0], [58.0, 4239.0], [58.1, 4239.0], [58.2, 4240.0], [58.3, 4240.0], [58.4, 4241.0], [58.5, 4242.0], [58.6, 4243.0], [58.7, 4244.0], [58.8, 4245.0], [58.9, 4245.0], [59.0, 4246.0], [59.1, 4247.0], [59.2, 4247.0], [59.3, 4248.0], [59.4, 4249.0], [59.5, 4249.0], [59.6, 4249.0], [59.7, 4250.0], [59.8, 4250.0], [59.9, 4251.0], [60.0, 4251.0], [60.1, 4252.0], [60.2, 4253.0], [60.3, 4254.0], [60.4, 4254.0], [60.5, 4255.0], [60.6, 4256.0], [60.7, 4256.0], [60.8, 4257.0], [60.9, 4257.0], [61.0, 4258.0], [61.1, 4259.0], [61.2, 4259.0], [61.3, 4260.0], [61.4, 4261.0], [61.5, 4262.0], [61.6, 4262.0], [61.7, 4263.0], [61.8, 4265.0], [61.9, 4265.0], [62.0, 4266.0], [62.1, 4266.0], [62.2, 4267.0], [62.3, 4268.0], [62.4, 4268.0], [62.5, 4268.0], [62.6, 4269.0], [62.7, 4270.0], [62.8, 4271.0], [62.9, 4271.0], [63.0, 4272.0], [63.1, 4273.0], [63.2, 4275.0], [63.3, 4276.0], [63.4, 4277.0], [63.5, 4277.0], [63.6, 4278.0], [63.7, 4279.0], [63.8, 4280.0], [63.9, 4280.0], [64.0, 4281.0], [64.1, 4282.0], [64.2, 4282.0], [64.3, 4282.0], [64.4, 4283.0], [64.5, 4284.0], [64.6, 4284.0], [64.7, 4284.0], [64.8, 4285.0], [64.9, 4285.0], [65.0, 4285.0], [65.1, 4286.0], [65.2, 4286.0], [65.3, 4287.0], [65.4, 4287.0], [65.5, 4288.0], [65.6, 4288.0], [65.7, 4289.0], [65.8, 4290.0], [65.9, 4290.0], [66.0, 4291.0], [66.1, 4291.0], [66.2, 4291.0], [66.3, 4292.0], [66.4, 4292.0], [66.5, 4292.0], [66.6, 4293.0], [66.7, 4293.0], [66.8, 4294.0], [66.9, 4294.0], [67.0, 4294.0], [67.1, 4295.0], [67.2, 4295.0], [67.3, 4296.0], [67.4, 4296.0], [67.5, 4297.0], [67.6, 4297.0], [67.7, 4297.0], [67.8, 4297.0], [67.9, 4298.0], [68.0, 4298.0], [68.1, 4299.0], [68.2, 4300.0], [68.3, 4301.0], [68.4, 4301.0], [68.5, 4302.0], [68.6, 4303.0], [68.7, 4304.0], [68.8, 4304.0], [68.9, 4305.0], [69.0, 4305.0], [69.1, 4306.0], [69.2, 4306.0], [69.3, 4307.0], [69.4, 4307.0], [69.5, 4308.0], [69.6, 4309.0], [69.7, 4310.0], [69.8, 4311.0], [69.9, 4311.0], [70.0, 4312.0], [70.1, 4313.0], [70.2, 4314.0], [70.3, 4314.0], [70.4, 4314.0], [70.5, 4316.0], [70.6, 4317.0], [70.7, 4317.0], [70.8, 4318.0], [70.9, 4318.0], [71.0, 4319.0], [71.1, 4319.0], [71.2, 4320.0], [71.3, 4321.0], [71.4, 4322.0], [71.5, 4323.0], [71.6, 4324.0], [71.7, 4324.0], [71.8, 4325.0], [71.9, 4326.0], [72.0, 4326.0], [72.1, 4327.0], [72.2, 4328.0], [72.3, 4329.0], [72.4, 4330.0], [72.5, 4330.0], [72.6, 4331.0], [72.7, 4331.0], [72.8, 4331.0], [72.9, 4332.0], [73.0, 4332.0], [73.1, 4333.0], [73.2, 4334.0], [73.3, 4334.0], [73.4, 4335.0], [73.5, 4335.0], [73.6, 4336.0], [73.7, 4336.0], [73.8, 4337.0], [73.9, 4338.0], [74.0, 4339.0], [74.1, 4340.0], [74.2, 4340.0], [74.3, 4342.0], [74.4, 4343.0], [74.5, 4343.0], [74.6, 4344.0], [74.7, 4345.0], [74.8, 4346.0], [74.9, 4347.0], [75.0, 4347.0], [75.1, 4348.0], [75.2, 4349.0], [75.3, 4351.0], [75.4, 4352.0], [75.5, 4353.0], [75.6, 4354.0], [75.7, 4356.0], [75.8, 4357.0], [75.9, 4358.0], [76.0, 4358.0], [76.1, 4359.0], [76.2, 4362.0], [76.3, 4363.0], [76.4, 4364.0], [76.5, 4368.0], [76.6, 4377.0], [76.7, 4381.0], [76.8, 4384.0], [76.9, 4388.0], [77.0, 4390.0], [77.1, 4391.0], [77.2, 4391.0], [77.3, 4392.0], [77.4, 4394.0], [77.5, 4396.0], [77.6, 4397.0], [77.7, 4398.0], [77.8, 4399.0], [77.9, 4400.0], [78.0, 4401.0], [78.1, 4403.0], [78.2, 4405.0], [78.3, 4406.0], [78.4, 4409.0], [78.5, 4412.0], [78.6, 4415.0], [78.7, 4418.0], [78.8, 4421.0], [78.9, 4422.0], [79.0, 4424.0], [79.1, 4426.0], [79.2, 4430.0], [79.3, 4431.0], [79.4, 4434.0], [79.5, 4437.0], [79.6, 4438.0], [79.7, 4442.0], [79.8, 4445.0], [79.9, 4449.0], [80.0, 4455.0], [80.1, 4460.0], [80.2, 4463.0], [80.3, 4465.0], [80.4, 4468.0], [80.5, 4472.0], [80.6, 4475.0], [80.7, 4477.0], [80.8, 4480.0], [80.9, 4485.0], [81.0, 4490.0], [81.1, 4495.0], [81.2, 4500.0], [81.3, 4513.0], [81.4, 4517.0], [81.5, 4517.0], [81.6, 4519.0], [81.7, 4520.0], [81.8, 4522.0], [81.9, 4523.0], [82.0, 4525.0], [82.1, 4528.0], [82.2, 4530.0], [82.3, 4533.0], [82.4, 4537.0], [82.5, 4548.0], [82.6, 4558.0], [82.7, 4561.0], [82.8, 4585.0], [82.9, 4590.0], [83.0, 4598.0], [83.1, 4601.0], [83.2, 4604.0], [83.3, 4613.0], [83.4, 4642.0], [83.5, 4657.0], [83.6, 4673.0], [83.7, 4686.0], [83.8, 4701.0], [83.9, 4707.0], [84.0, 4710.0], [84.1, 4714.0], [84.2, 4716.0], [84.3, 4720.0], [84.4, 4726.0], [84.5, 4737.0], [84.6, 4760.0], [84.7, 4768.0], [84.8, 4784.0], [84.9, 4870.0], [85.0, 4933.0], [85.1, 4941.0], [85.2, 4949.0], [85.3, 4973.0], [85.4, 4996.0], [85.5, 5003.0], [85.6, 5004.0], [85.7, 5008.0], [85.8, 5010.0], [85.9, 5015.0], [86.0, 5021.0], [86.1, 5026.0], [86.2, 5030.0], [86.3, 5042.0], [86.4, 5048.0], [86.5, 5057.0], [86.6, 5064.0], [86.7, 5072.0], [86.8, 5081.0], [86.9, 5088.0], [87.0, 5100.0], [87.1, 5123.0], [87.2, 5131.0], [87.3, 5148.0], [87.4, 5159.0], [87.5, 5169.0], [87.6, 5186.0], [87.7, 5239.0], [87.8, 5250.0], [87.9, 5265.0], [88.0, 5272.0], [88.1, 5311.0], [88.2, 5333.0], [88.3, 5348.0], [88.4, 5437.0], [88.5, 5541.0], [88.6, 5568.0], [88.7, 5609.0], [88.8, 5617.0], [88.9, 5622.0], [89.0, 5635.0], [89.1, 5639.0], [89.2, 5650.0], [89.3, 5664.0], [89.4, 5687.0], [89.5, 5691.0], [89.6, 5698.0], [89.7, 5711.0], [89.8, 5718.0], [89.9, 5722.0], [90.0, 5727.0], [90.1, 5731.0], [90.2, 5736.0], [90.3, 5739.0], [90.4, 5746.0], [90.5, 5748.0], [90.6, 5749.0], [90.7, 5751.0], [90.8, 5755.0], [90.9, 5757.0], [91.0, 5760.0], [91.1, 5770.0], [91.2, 5775.0], [91.3, 5779.0], [91.4, 5784.0], [91.5, 5787.0], [91.6, 5794.0], [91.7, 5798.0], [91.8, 5805.0], [91.9, 5809.0], [92.0, 5817.0], [92.1, 5820.0], [92.2, 5825.0], [92.3, 5830.0], [92.4, 5835.0], [92.5, 5837.0], [92.6, 5840.0], [92.7, 5844.0], [92.8, 5847.0], [92.9, 5851.0], [93.0, 5855.0], [93.1, 5856.0], [93.2, 5859.0], [93.3, 5863.0], [93.4, 5867.0], [93.5, 5870.0], [93.6, 5874.0], [93.7, 5875.0], [93.8, 5877.0], [93.9, 5880.0], [94.0, 5883.0], [94.1, 5886.0], [94.2, 5889.0], [94.3, 5892.0], [94.4, 5899.0], [94.5, 5901.0], [94.6, 5906.0], [94.7, 5908.0], [94.8, 5911.0], [94.9, 5915.0], [95.0, 5919.0], [95.1, 5924.0], [95.2, 5925.0], [95.3, 5928.0], [95.4, 5935.0], [95.5, 5942.0], [95.6, 5946.0], [95.7, 5949.0], [95.8, 5952.0], [95.9, 5957.0], [96.0, 5960.0], [96.1, 5964.0], [96.2, 5967.0], [96.3, 5974.0], [96.4, 5978.0], [96.5, 5987.0], [96.6, 5994.0], [96.7, 6005.0], [96.8, 6025.0], [96.9, 6037.0], [97.0, 6048.0], [97.1, 6062.0], [97.2, 6069.0], [97.3, 6089.0], [97.4, 6103.0], [97.5, 6113.0], [97.6, 6137.0], [97.7, 6153.0], [97.8, 6164.0], [97.9, 6171.0], [98.0, 6188.0], [98.1, 6197.0], [98.2, 6199.0], [98.3, 6208.0], [98.4, 6224.0], [98.5, 6235.0], [98.6, 6241.0], [98.7, 6245.0], [98.8, 6255.0], [98.9, 6260.0], [99.0, 6264.0], [99.1, 6271.0], [99.2, 6278.0], [99.3, 6292.0], [99.4, 6320.0], [99.5, 6333.0], [99.6, 6360.0], [99.7, 6381.0], [99.8, 6429.0], [99.9, 9051.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 925.0, "series": [{"data": [[1300.0, 1.0], [1400.0, 4.0], [1500.0, 61.0], [1600.0, 97.0], [1700.0, 63.0], [1800.0, 51.0], [1900.0, 36.0], [2000.0, 102.0], [2100.0, 67.0], [2200.0, 60.0], [2300.0, 48.0], [2400.0, 79.0], [2500.0, 42.0], [2600.0, 57.0], [2700.0, 96.0], [2800.0, 28.0], [2900.0, 17.0], [3000.0, 57.0], [3100.0, 55.0], [3200.0, 81.0], [3300.0, 52.0], [3400.0, 46.0], [3500.0, 96.0], [3700.0, 47.0], [3600.0, 108.0], [3800.0, 53.0], [3900.0, 13.0], [4000.0, 223.0], [4100.0, 741.0], [4200.0, 925.0], [4300.0, 485.0], [4500.0, 94.0], [4400.0, 169.0], [4600.0, 35.0], [4700.0, 55.0], [4800.0, 4.0], [4900.0, 23.0], [5100.0, 31.0], [5000.0, 79.0], [5200.0, 23.0], [5300.0, 16.0], [5400.0, 2.0], [5500.0, 11.0], [5600.0, 49.0], [5700.0, 104.0], [5800.0, 136.0], [5900.0, 112.0], [6000.0, 35.0], [6100.0, 42.0], [6200.0, 57.0], [6300.0, 20.0], [6400.0, 5.0], [7600.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [8800.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [9800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2541.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2453.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2541.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2731.6775999999895, "minX": 1.6997784E12, "maxY": 2731.6775999999895, "series": [{"data": [[1.6997784E12, 2731.6775999999895]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997784E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1359.0, "minX": 1.0, "maxY": 9802.0, "series": [{"data": [[2.0, 9802.0], [3.0, 8819.0], [4.0, 9301.0], [5.0, 9051.0], [6.0, 9275.0], [7.0, 7666.0], [8.0, 5982.0], [9.0, 5976.0], [10.0, 5959.0], [11.0, 5965.0], [12.0, 5960.0], [13.0, 5964.0], [14.0, 5961.0], [15.0, 5955.0], [16.0, 5953.0], [17.0, 5947.0], [18.0, 5952.0], [19.0, 6437.0], [20.0, 5947.0], [22.0, 5940.5], [23.0, 5948.0], [24.0, 5930.0], [26.0, 6184.0], [27.0, 5935.0], [28.0, 6434.0], [29.0, 6429.0], [30.0, 5917.0], [31.0, 5919.0], [33.0, 5919.0], [32.0, 5928.0], [35.0, 5901.0], [34.0, 5899.0], [37.0, 5911.0], [36.0, 5900.0], [39.0, 5888.0], [38.0, 5900.0], [41.0, 6149.0], [43.0, 5890.5], [45.0, 6390.0], [44.0, 6385.0], [47.0, 5883.5], [49.0, 6125.5], [51.0, 5877.0], [50.0, 6381.0], [53.0, 5883.0], [52.0, 5876.0], [55.0, 5862.0], [54.0, 6365.0], [57.0, 6360.0], [56.0, 6357.0], [59.0, 5856.0], [58.0, 5854.0], [60.0, 5841.0], [91.0, 5842.0], [151.0, 5839.0], [159.0, 6256.0], [158.0, 6046.354166666666], [166.0, 6259.0], [165.0, 5610.0], [164.0, 6265.5], [162.0, 6142.0], [160.0, 6255.0], [174.0, 5576.0], [173.0, 6186.0], [172.0, 6234.0], [171.0, 6252.0], [170.0, 6240.0], [169.0, 6226.0], [168.0, 5607.5], [181.0, 6226.0], [180.0, 6217.0], [189.0, 6209.0], [188.0, 5862.0], [186.0, 5564.0], [185.0, 6205.0], [184.0, 6179.0], [199.0, 6194.0], [198.0, 6196.5], [196.0, 6200.0], [195.0, 6188.0], [194.0, 6186.0], [193.0, 6198.0], [192.0, 6183.666666666667], [207.0, 6134.5], [205.0, 6146.0], [204.0, 6176.0], [203.0, 6191.0], [202.0, 6168.0], [201.0, 6133.0], [215.0, 6091.0], [214.0, 6135.0], [212.0, 6113.0], [211.0, 6122.0], [210.0, 6106.0], [209.0, 6139.0], [208.0, 6161.0], [223.0, 6059.0], [222.0, 6091.0], [221.0, 6107.0], [220.0, 6135.0], [231.0, 6067.5], [229.0, 6064.0], [228.0, 6070.0], [226.0, 6119.0], [225.0, 6069.0], [224.0, 6077.0], [239.0, 6025.0], [238.0, 5984.0], [237.0, 6058.5], [235.0, 6077.0], [233.0, 6048.0], [232.0, 6089.0], [247.0, 6052.0], [246.0, 6025.0], [244.0, 6012.0], [243.0, 6021.5], [241.0, 6019.0], [240.0, 6064.0], [254.0, 5980.0], [253.0, 5994.0], [252.0, 6035.0], [250.0, 6025.0], [249.0, 6054.0], [248.0, 6036.0], [270.0, 5975.0], [271.0, 5957.0], [269.0, 5978.0], [268.0, 5950.0], [267.0, 5943.0], [266.0, 5950.0], [265.0, 5969.5], [263.0, 5968.0], [257.0, 5990.0], [256.0, 5992.0], [259.0, 5995.0], [258.0, 5967.0], [262.0, 5969.0], [261.0, 5960.0], [260.0, 5997.0], [273.0, 6038.0], [281.0, 6024.0], [280.0, 5919.0], [279.0, 5939.0], [278.0, 5949.0], [277.0, 5964.0], [276.0, 5923.0], [275.0, 5978.0], [272.0, 6038.0], [415.0, 5927.0], [414.0, 5923.0], [413.0, 5924.0], [412.0, 5949.0], [411.0, 5965.0], [410.0, 5856.294573643412], [428.0, 5924.0], [430.0, 5908.0], [431.0, 5907.0], [429.0, 5919.0], [427.0, 5910.5], [425.0, 5907.5], [423.0, 5911.5], [419.0, 5923.333333333333], [416.0, 5914.0], [421.0, 5925.0], [420.0, 5925.0], [446.0, 5870.0], [447.0, 5867.0], [445.0, 5876.0], [444.0, 5875.0], [443.0, 5871.0], [441.0, 5880.0], [440.0, 5873.5], [438.0, 5880.0], [433.0, 5904.0], [432.0, 5891.0], [437.0, 5889.0], [436.0, 5888.333333333333], [461.0, 5836.0], [462.0, 5838.0], [460.0, 5855.0], [451.0, 5859.0], [450.0, 5860.0], [449.0, 5863.0], [448.0, 5867.0], [459.0, 5855.0], [458.0, 5855.0], [457.0, 5847.0], [456.0, 5847.0], [455.0, 5851.0], [454.0, 5867.0], [453.0, 5860.0], [452.0, 5867.0], [476.0, 5814.5], [478.0, 5802.0], [479.0, 5801.0], [477.0, 5809.0], [474.0, 5812.0], [473.0, 5821.0], [471.0, 5813.0], [465.0, 5850.0], [464.0, 5842.0], [467.0, 5828.0], [466.0, 5830.0], [470.0, 5816.0], [469.0, 5822.0], [468.0, 5837.0], [494.0, 5781.0], [495.0, 5781.0], [493.0, 5775.0], [492.0, 5777.0], [491.0, 5782.0], [490.0, 5779.0], [489.0, 5787.0], [488.0, 5787.0], [487.0, 5789.0], [483.0, 5798.0], [481.0, 5803.0], [486.0, 5785.0], [485.0, 5795.0], [499.0, 5760.0], [509.0, 5755.0], [511.0, 5747.5], [508.0, 5747.0], [498.0, 5771.0], [497.0, 5768.0], [496.0, 5775.0], [507.0, 5756.666666666667], [504.0, 5754.0], [503.0, 5757.0], [502.0, 5761.0], [501.0, 5759.0], [500.0, 5764.0], [528.0, 5740.0], [530.0, 5737.0], [516.0, 5750.0], [512.0, 5753.0], [526.0, 5730.0], [522.0, 5736.0], [520.0, 5740.0], [638.0, 4602.0], [636.0, 5445.0], [634.0, 4613.0], [632.0, 4623.0], [620.0, 5211.855555555556], [630.0, 4661.6], [664.0, 4527.5], [668.0, 4532.0], [656.0, 4544.0], [666.0, 4521.0], [640.0, 4600.0], [642.0, 4594.0], [646.0, 5437.0], [654.0, 4548.0], [650.0, 4561.0], [648.0, 4586.0], [660.0, 4549.0], [658.0, 4549.0], [698.0, 4521.5], [700.0, 4524.0], [696.0, 4521.0], [686.0, 4523.0], [672.0, 4524.0], [674.0, 4529.0], [678.0, 4520.0], [682.0, 4522.0], [680.0, 4529.5], [694.0, 4526.0], [690.0, 4533.0], [688.0, 4522.0], [732.0, 5328.0], [720.0, 5357.0], [722.0, 4492.0], [724.0, 4502.0], [734.0, 4466.0], [730.0, 4475.0], [728.0, 4495.0], [704.0, 4521.5], [718.0, 4503.0], [716.0, 4525.0], [712.0, 4535.0], [726.0, 4483.0], [752.0, 4426.0], [754.0, 4427.5], [758.0, 4410.0], [756.0, 4430.0], [742.0, 4464.0], [740.0, 5348.0], [738.0, 4462.0], [736.0, 4477.0], [750.0, 4431.0], [748.0, 4437.0], [746.0, 5333.0], [794.0, 4399.0], [796.0, 4392.5], [792.0, 4394.333333333333], [782.0, 4400.0], [780.0, 4398.0], [778.0, 4398.5], [790.0, 4393.0], [786.0, 4394.0], [828.0, 4816.5], [830.0, 5244.0], [816.0, 5270.0], [820.0, 5264.0], [826.0, 5265.0], [824.0, 5268.0], [806.0, 4387.0], [804.0, 4389.333333333333], [802.0, 4398.0], [800.0, 4398.333333333333], [814.0, 5274.0], [812.0, 4417.0], [810.0, 4402.5], [808.0, 4402.0], [822.0, 5271.0], [836.0, 5233.0], [834.0, 5240.0], [832.0, 5246.0], [1148.0, 4951.0], [1144.0, 4974.0], [1140.0, 5169.0], [1208.0, 4341.333333333333], [1204.0, 4361.0], [1212.0, 4284.0], [1200.0, 4358.0], [1160.0, 4936.0], [1156.0, 4935.0], [1152.0, 4949.0], [1272.0, 4363.5], [1248.0, 4319.0], [1252.0, 4322.0], [1256.0, 4336.5], [1276.0, 4363.0], [1268.0, 4342.0], [1264.0, 4340.333333333333], [1216.0, 4305.5], [1228.0, 4296.0], [1244.0, 4303.0], [1236.0, 4314.0], [1232.0, 4302.0], [1280.0, 4379.0], [1308.0, 4664.5], [1288.0, 4377.0], [1284.0, 4399.0], [1292.0, 4389.0], [1304.0, 4402.5], [1300.0, 4422.0], [1296.0, 4400.333333333333], [1396.0, 4297.0], [1404.0, 4262.0], [1376.0, 4294.0], [1380.0, 4287.0], [1384.0, 4261.0], [1392.0, 4288.0], [1356.0, 4280.0], [1348.0, 4256.0], [1368.0, 4299.0], [1364.0, 4280.0], [1360.0, 4280.0], [1388.0, 4291.0], [1412.0, 4285.0], [1440.0, 4330.0], [1448.0, 4349.0], [1420.0, 4311.0], [1408.0, 4306.0], [1432.0, 4317.5], [1428.0, 4311.0], [1424.0, 4320.0], [1452.0, 4346.0], [1444.0, 4344.0], [1596.0, 4256.0], [1592.0, 4238.0], [1588.0, 4224.0], [1580.0, 4211.0], [1652.0, 4221.0], [1636.0, 4247.5], [1660.0, 4229.0], [1632.0, 4251.0], [1656.0, 4226.333333333333], [1648.0, 4207.5], [1612.0, 4222.666666666667], [1600.0, 4272.0], [1628.0, 4257.0], [1624.0, 4232.0], [1620.0, 4225.0], [1616.0, 4215.0], [1644.0, 4201.0], [1668.0, 4220.5], [1680.0, 4250.0], [1676.0, 4228.0], [1672.0, 4228.5], [1664.0, 4241.0], [2680.0, 4238.0], [2784.0, 4330.0], [2792.0, 4334.0], [2704.0, 4269.0], [2696.0, 4262.5], [2688.0, 4247.0], [2776.0, 4298.5], [2768.0, 4263.0], [2760.0, 4246.333333333333], [2752.0, 4235.5], [2744.0, 4348.0], [2736.0, 4343.0], [2728.0, 4340.0], [2720.0, 4328.5], [3064.0, 4209.945330296115], [3184.0, 4121.0], [3192.0, 4127.0], [3168.0, 4233.0], [3128.0, 3487.0], [3080.0, 4236.0], [3088.0, 3572.0], [3096.0, 3557.0], [3120.0, 4182.0], [3208.0, 4106.0], [3272.0, 4100.0], [3320.0, 4079.5], [3216.0, 4131.666666666667], [3200.0, 4102.0], [3280.0, 3438.0], [3264.0, 4096.0], [3256.0, 4230.5], [3248.0, 4215.0], [3232.0, 4182.5], [3424.0, 4084.0], [3432.0, 4144.0], [3448.0, 4072.0], [3440.0, 4113.666666666667], [3416.0, 4106.0], [3352.0, 4079.0], [3336.0, 4126.0], [3368.0, 3411.0], [3328.0, 4094.0], [3360.0, 4098.0], [3576.0, 4094.5], [3568.0, 4077.0], [3520.0, 4102.0], [3544.0, 3360.0], [3456.0, 4156.0], [3472.0, 4174.0], [3480.0, 3393.0], [3512.0, 4073.5], [3504.0, 4106.0], [3584.0, 4112.0], [3808.0, 3660.0], [3824.0, 3595.0], [3776.0, 3902.0], [3792.0, 3691.0], [3800.0, 3659.5], [3768.0, 3921.0], [3760.0, 3737.0], [3752.0, 3786.0], [3744.0, 3795.0], [3848.0, 3549.0], [3840.0, 3580.0], [4088.0, 2779.0], [4032.0, 3005.0], [4048.0, 2474.0], [4056.0, 2469.0], [4080.0, 3353.0], [4064.0, 3037.3333333333335], [3992.0, 3091.0], [3984.0, 3104.0], [4024.0, 3018.0], [4016.0, 3034.0], [4000.0, 3062.5], [4240.0, 2954.0], [4224.0, 2490.0], [4256.0, 2400.0], [4304.0, 2323.5], [4288.0, 2343.0], [4096.0, 2769.0], [4112.0, 3228.0], [4816.0, 1731.0], [4832.0, 1703.0], [4752.0, 1843.0], [4736.0, 1871.0], [4768.0, 1812.0], [4784.0, 1773.0], [4800.0, 1749.5], [4656.0, 1988.0], [4624.0, 2046.0], [4720.0, 2014.0], [4704.0, 2043.0], [4688.0, 2055.0], [4992.0, 1528.5], [4960.0, 1542.0], [4944.0, 1615.0], [4225.0, 2487.0], [4241.0, 2412.0], [4257.0, 2402.0], [4273.0, 2387.0], [4305.0, 2809.0], [4289.0, 2357.0], [4097.0, 2760.0], [4113.0, 3244.0], [4481.0, 2303.5], [4737.0, 1870.0], [4753.0, 1837.0], [4769.0, 1810.0], [4785.0, 1774.0], [4817.0, 1730.0], [4657.0, 1986.0], [4641.0, 2070.0], [4625.0, 2034.0], [4721.0, 1964.0], [4689.0, 2035.0], [4673.0, 2060.0], [4913.0, 1630.0], [4881.0, 1645.5], [4993.0, 1533.0], [4865.0, 1669.0], [4977.0, 1528.0], [4961.0, 1527.0], [4929.0, 1624.0], [2665.0, 4295.0], [2713.0, 4286.0], [2785.0, 4287.0], [2705.0, 4261.0], [2697.0, 4253.0], [2777.0, 4281.75], [2753.0, 4271.0], [2729.0, 4346.0], [2721.0, 4325.0], [3065.0, 3601.0], [3177.0, 3889.6666666666665], [3097.0, 3555.0], [3089.0, 3569.0], [3081.0, 4235.0], [3129.0, 3486.0], [3121.0, 4183.0], [3217.0, 4128.0], [3225.0, 4210.0], [3209.0, 4115.0], [3281.0, 3435.0], [3273.0, 4102.0], [3265.0, 4214.0], [3241.0, 4207.5], [3233.0, 4179.0], [3425.0, 4055.0], [3441.0, 4067.6666666666665], [3417.0, 4137.0], [3449.0, 4122.0], [3433.0, 4070.0], [3353.0, 4079.0], [3345.0, 4186.25], [3337.0, 4154.0], [3369.0, 3421.0], [3329.0, 4095.0], [3361.0, 4176.0], [3577.0, 4105.5], [3521.0, 4126.666666666667], [3529.0, 4137.0], [3537.0, 3363.0], [3545.0, 3358.0], [3561.0, 4078.0], [3481.0, 3392.0], [3473.0, 4175.0], [3465.0, 4171.5], [3457.0, 4152.0], [3513.0, 4077.0], [3505.0, 4035.0], [3593.0, 4136.0], [3585.0, 4142.0], [3817.0, 3619.0], [3833.0, 3583.0], [3785.0, 3771.0], [3793.0, 3689.0], [3801.0, 3672.0], [3769.0, 3726.0], [3761.0, 3738.0], [3753.0, 3963.0], [3745.0, 3795.0], [3841.0, 3749.0], [4073.0, 2719.5], [4089.0, 3280.0], [4041.0, 2742.0], [4057.0, 3378.0], [4065.0, 2860.0], [3993.0, 3085.0], [3985.0, 3108.0], [3977.0, 3322.0465116279083], [4025.0, 2495.0], [4009.0, 3043.0], [4001.0, 3057.0], [4242.0, 2433.0], [4226.0, 2479.0], [4258.0, 2395.0], [4274.0, 2875.5], [4290.0, 2363.0], [4114.0, 2732.0], [4098.0, 3264.0], [4482.0, 2301.0], [4818.0, 1726.0], [4754.0, 1837.0], [4770.0, 1807.0], [4786.0, 1776.0], [4834.0, 1703.0], [4802.0, 1750.5], [4658.0, 1988.0], [4642.0, 2012.0], [4706.0, 2008.0], [4690.0, 2079.0], [4882.0, 1613.0], [4978.0, 1515.0], [4962.0, 1575.0], [4946.0, 1553.5], [4930.0, 1587.0], [4243.0, 2412.0], [4227.0, 2989.0], [4275.0, 2386.0], [4307.0, 2574.5], [4291.0, 2853.0], [4099.0, 3265.0], [4483.0, 2296.0], [4819.0, 1721.0], [4739.0, 1867.5], [4755.0, 1835.0], [4771.0, 1810.0], [4803.0, 1752.0], [4659.0, 1983.0], [4643.0, 2011.0], [4627.0, 2032.0], [4723.0, 1900.5], [4707.0, 2002.0], [4675.0, 2000.5], [4915.0, 1617.0], [4995.0, 1504.0], [4883.0, 1613.0], [4979.0, 1554.0], [4963.0, 1576.0], [4947.0, 1604.0], [4931.0, 1600.0], [1033.0, 5179.0], [1149.0, 4949.0], [1145.0, 4973.0], [1141.0, 4551.186046511627], [1201.0, 4363.0], [1205.0, 4300.0], [1161.0, 4933.0], [1157.0, 4941.0], [1153.0, 4942.0], [1265.0, 4366.0], [1249.0, 4332.0], [1273.0, 4369.5], [1269.0, 4337.0], [1217.0, 4310.333333333333], [1225.0, 4285.0], [1229.0, 4285.0], [1245.0, 4307.5], [1241.0, 4312.0], [1237.0, 4301.333333333333], [1233.0, 4295.333333333333], [1261.0, 4337.333333333333], [1257.0, 4343.0], [1309.0, 4424.0], [1305.0, 4431.0], [1341.0, 4310.5], [1285.0, 4381.0], [1281.0, 4396.0], [1289.0, 4409.5], [1301.0, 4413.0], [1297.0, 4403.0], [1293.0, 4412.0], [1393.0, 4291.0], [1377.0, 4258.0], [1401.0, 4278.5], [1397.0, 4302.0], [1357.0, 4256.0], [1353.0, 4275.5], [1349.0, 4267.0], [1345.0, 4285.0], [1373.0, 4286.0], [1365.0, 4286.0], [1361.0, 4258.0], [1389.0, 4271.0], [1421.0, 4305.0], [1457.0, 4344.0], [1417.0, 4305.0], [1449.0, 4322.0], [1445.0, 4344.0], [1437.0, 4328.0], [1433.0, 4330.0], [1429.0, 4317.0], [1425.0, 4315.0], [1593.0, 4259.0], [1597.0, 4242.0], [1589.0, 4236.0], [1585.0, 4227.5], [1653.0, 4221.0], [1661.0, 4212.0], [1641.0, 4254.666666666667], [1657.0, 4229.444444444444], [1649.0, 4230.0], [1613.0, 4231.0], [1609.0, 4214.0], [1601.0, 4216.0], [1629.0, 4240.0], [1625.0, 4235.0], [1617.0, 4230.0], [1645.0, 4208.0], [1673.0, 4238.0], [1685.0, 4237.0], [1681.0, 4235.0], [1677.0, 4218.5], [2682.0, 4251.5], [2666.0, 4274.5], [2698.0, 4260.5], [2786.0, 4288.0], [2762.0, 4234.0], [2794.0, 4331.0], [2690.0, 4247.0], [2706.0, 4273.0], [2714.0, 4292.0], [2738.0, 4338.0], [2730.0, 4353.0], [2722.0, 4331.0], [2770.0, 4269.0], [3066.0, 3604.0], [3170.0, 4224.0], [3194.0, 4129.0], [3074.0, 4237.0], [3082.0, 4235.333333333333], [3090.0, 3571.0], [3098.0, 3544.0], [3122.0, 4191.0], [3210.0, 4116.5], [3226.0, 4217.0], [3202.0, 4140.25], [3274.0, 4116.0], [3266.0, 4096.0], [3258.0, 4162.5], [3250.0, 4150.5], [3242.0, 4209.0], [3354.0, 4135.5], [3450.0, 4135.0], [3442.0, 4155.0], [3426.0, 4058.0], [3338.0, 4156.0], [3370.0, 3404.0], [3330.0, 4100.333333333333], [3362.0, 4206.0], [3578.0, 4105.0], [3530.0, 4147.0], [3538.0, 3362.0], [3546.0, 3341.0], [3570.0, 4091.5], [3458.0, 4145.0], [3466.0, 4165.0], [3474.0, 4170.5], [3514.0, 4104.0], [3506.0, 4041.0], [3586.0, 4109.0], [3834.0, 3587.0], [3778.0, 3810.0], [3786.0, 3697.0], [3794.0, 3864.0], [3802.0, 3673.0], [3826.0, 3600.0], [3818.0, 3611.0], [3810.0, 3656.5], [3770.0, 3726.0], [3762.0, 3737.0], [3754.0, 3751.0], [3746.0, 3792.0], [3842.0, 3566.0], [4090.0, 3269.0], [4042.0, 3387.0], [4034.0, 2749.0], [4050.0, 2920.5], [4058.0, 2466.0], [4074.0, 2859.0], [4066.0, 3361.0], [3994.0, 3081.0], [3978.0, 3118.0], [4026.0, 3402.0], [4018.0, 3035.0], [4002.0, 3061.0], [4244.0, 2425.0], [4228.0, 2960.0], [4260.0, 2408.0], [4276.0, 2384.0], [4308.0, 2835.0], [4292.0, 2337.0], [4100.0, 3251.0], [4836.0, 1698.0], [4740.0, 1866.0], [4756.0, 1835.0], [4772.0, 1803.0], [4788.0, 1774.5], [4820.0, 1722.0], [4660.0, 1984.0], [4644.0, 2011.0], [4628.0, 2037.0], [4724.0, 1896.0], [4708.0, 2036.0], [4692.0, 1978.5], [4676.0, 2074.0], [4884.0, 1616.0], [4980.0, 1527.0], [4996.0, 1532.0], [4916.0, 1643.0], [4900.0, 1603.6000000000001], [4868.0, 1656.3333333333333], [4964.0, 1545.0], [4932.0, 1639.0], [4309.0, 2834.0], [4245.0, 2423.0], [4261.0, 2410.0], [4277.0, 2357.0], [4229.0, 2955.0], [4293.0, 2362.0], [4485.0, 2296.5], [4805.0, 1748.0], [4821.0, 1719.0], [4741.0, 1859.0], [4757.0, 1833.0], [4789.0, 1770.0], [4661.0, 1984.0], [4629.0, 2029.0], [4613.0, 2163.29268292683], [4693.0, 2011.0], [4677.0, 2014.0], [4901.0, 1666.0], [4885.0, 1614.0], [4997.0, 1568.0], [4917.0, 1622.0], [4869.0, 1658.0], [4981.0, 1509.0], [4965.0, 1539.0], [2683.0, 4254.5], [2715.0, 4289.333333333333], [2795.0, 4345.5], [2707.0, 4277.0], [2699.0, 4260.0], [2747.0, 4235.5], [2779.0, 4309.5], [2771.0, 4276.666666666667], [2763.0, 4253.0], [2755.0, 4234.0], [3067.0, 3596.0], [3091.0, 3564.0], [3195.0, 4132.0], [3083.0, 3572.0], [3099.0, 3539.0], [3131.0, 3487.5], [3123.0, 4193.4], [3115.0, 4185.0], [3227.0, 4117.666666666667], [3323.0, 4085.5], [3219.0, 4174.0], [3211.0, 4117.0], [3203.0, 4098.0], [3283.0, 3439.0], [3275.0, 4112.0], [3267.0, 4196.0], [3251.0, 4206.666666666667], [3243.0, 4195.0], [3235.0, 4165.0], [3443.0, 4074.6666666666665], [3435.0, 4081.0], [3411.0, 4063.0], [3419.0, 4143.0], [3451.0, 4130.0], [3355.0, 4089.0], [3347.0, 4195.5], [3339.0, 4169.0], [3371.0, 3405.0], [3531.0, 4142.0], [3523.0, 4119.0], [3547.0, 3357.0], [3563.0, 4133.0], [3475.0, 4177.666666666667], [3459.0, 4148.0], [3827.0, 3595.0], [3779.0, 3901.0], [3787.0, 3687.0], [3795.0, 3860.0], [3803.0, 3635.0], [3835.0, 3591.0], [3819.0, 3608.0], [3811.0, 3646.0], [3771.0, 3725.0], [3763.0, 3735.0], [3747.0, 3981.0], [3843.0, 3563.0], [4083.0, 3009.3333333333335], [4035.0, 2488.0], [4051.0, 2470.0], [4091.0, 2772.0], [4075.0, 3356.0], [3995.0, 3090.0], [3987.0, 3102.5], [3979.0, 2608.0], [4019.0, 3024.0], [4011.0, 3052.0], [4003.0, 3067.0], [4310.0, 2825.0], [4230.0, 2460.0], [4262.0, 2401.0], [4278.0, 2369.0], [4102.0, 3003.5], [4486.0, 2287.0], [4822.0, 1716.0], [4838.0, 1697.5], [4758.0, 1832.0], [4774.0, 1806.5], [4790.0, 1770.0], [4806.0, 1745.0], [4662.0, 1979.0], [4646.0, 2007.5], [4614.0, 2046.0], [4726.0, 1896.0], [4710.0, 2016.5], [4694.0, 2076.0], [4902.0, 1596.0], [4918.0, 1653.0], [4966.0, 1563.0], [4950.0, 1603.0], [4247.0, 2418.5], [4231.0, 2950.0], [4263.0, 2409.0], [4295.0, 2337.0], [4103.0, 3248.0], [4215.0, 2818.4848484848476], [4487.0, 2282.0], [4471.0, 2458.8], [4839.0, 1691.0], [4855.0, 1686.3333333333333], [4759.0, 1832.0], [4775.0, 1796.0], [4791.0, 1769.0], [4823.0, 1722.0], [4807.0, 1739.0], [4647.0, 1999.0], [4631.0, 2032.0], [4615.0, 2060.0], [4727.0, 1890.0], [4711.0, 2006.0], [4695.0, 2007.0], [4679.0, 2055.5], [4887.0, 1613.5], [4999.0, 1452.0], [4903.0, 1620.0], [4983.0, 1536.0], [4967.0, 1566.0], [4951.0, 1592.0], [515.0, 5746.5], [527.0, 5748.0], [529.0, 5748.0], [519.0, 5753.0], [517.0, 5739.0], [513.0, 5747.0], [525.0, 5742.0], [523.0, 5742.0], [521.0, 5757.0], [639.0, 4611.0], [625.0, 4870.5], [635.0, 4614.0], [633.0, 4613.0], [621.0, 4676.0], [631.0, 4613.0], [641.0, 4598.0], [667.0, 4517.0], [659.0, 4537.0], [655.0, 4560.0], [643.0, 4585.0], [645.0, 4594.5], [653.0, 4562.0], [651.0, 4571.0], [649.0, 4585.0], [663.0, 4519.0], [661.0, 4522.0], [657.0, 4554.0], [699.0, 4520.0], [689.0, 4518.0], [673.0, 4524.0], [675.0, 4527.0], [677.0, 4530.0], [681.0, 4534.0], [693.0, 4531.0], [733.0, 4468.0], [735.0, 4468.0], [721.0, 5369.0], [723.0, 4491.0], [725.0, 4485.0], [731.0, 5363.0], [729.0, 5334.0], [719.0, 5359.0], [705.0, 4521.0], [711.0, 4520.571428571429], [709.0, 4514.0], [717.0, 4530.0], [715.0, 4524.5], [713.0, 4538.0], [727.0, 4496.0], [739.0, 5344.0], [741.0, 5345.0], [757.0, 5303.0], [743.0, 4450.0], [737.0, 5329.0], [751.0, 5311.0], [749.0, 4447.0], [747.0, 5320.0], [745.0, 5333.5], [797.0, 4392.0], [799.0, 4394.5], [795.0, 4396.0], [783.0, 4407.0], [781.0, 4401.0], [779.0, 4390.0], [777.0, 4397.0], [789.0, 4400.75], [825.0, 4392.0], [831.0, 5250.0], [819.0, 4982.333333333333], [821.0, 5254.0], [829.0, 5246.0], [807.0, 4389.6], [805.0, 4398.25], [801.0, 4398.333333333333], [815.0, 5277.0], [813.0, 5277.0], [811.0, 4398.0], [823.0, 5264.0], [837.0, 5231.0], [835.0, 5239.0], [833.0, 5233.0], [957.0, 5220.0], [1150.0, 4948.0], [1146.0, 4950.0], [1214.0, 4292.0], [1162.0, 4918.0], [1158.0, 4941.0], [1154.0, 4939.0], [1274.0, 4368.5], [1278.0, 4369.0], [1250.0, 4301.0], [1254.0, 4329.0], [1270.0, 4361.333333333333], [1266.0, 4369.0], [1246.0, 4335.0], [1218.0, 4396.0], [1226.0, 4291.0], [1222.0, 4412.0], [1230.0, 4298.666666666667], [1242.0, 4302.0], [1238.0, 4307.0], [1234.0, 4289.0], [1262.0, 4362.0], [1258.0, 4329.0], [1282.0, 4358.0], [1342.0, 4325.0], [1338.0, 4329.0], [1310.0, 4892.0], [1290.0, 4392.5], [1294.0, 4419.0], [1306.0, 4430.0], [1302.0, 4400.0], [1298.0, 4397.0], [1398.0, 4298.0], [1394.0, 4313.0], [1406.0, 4282.0], [1378.0, 4279.0], [1382.0, 4274.5], [1386.0, 4283.0], [1402.0, 4293.0], [1358.0, 4281.0], [1354.0, 4284.5], [1350.0, 4263.0], [1346.0, 4342.0], [1374.0, 4255.0], [1370.0, 4291.0], [1366.0, 4305.0], [1362.0, 4272.0], [1390.0, 4298.0], [1414.0, 4291.5], [1458.0, 4873.0], [1422.0, 4314.0], [1418.0, 4309.0], [1410.0, 4303.333333333333], [1438.0, 4331.0], [1434.0, 4324.25], [1430.0, 4320.0], [1454.0, 4344.0], [1450.0, 4347.0], [1446.0, 4331.0], [1442.0, 4331.0], [1598.0, 4262.0], [1574.0, 4209.0], [1594.0, 4246.0], [1590.0, 4222.0], [1586.0, 4230.0], [1582.0, 4214.0], [1610.0, 4207.0], [1658.0, 4234.0], [1634.0, 4243.0], [1614.0, 4212.0], [1606.0, 4232.0], [1630.0, 4247.5], [1626.0, 4219.0], [1622.0, 4232.666666666667], [1618.0, 4228.5], [1646.0, 4203.0], [1638.0, 4265.0], [1686.0, 4235.666666666667], [1682.0, 4232.0], [1670.0, 4206.0], [1666.0, 4198.0], [2676.0, 4332.0], [2788.0, 4324.0], [2708.0, 4277.0], [2740.0, 4330.0], [2732.0, 4327.0], [2724.0, 4331.5], [3180.0, 4138.166666666667], [3196.0, 4095.0], [3172.0, 4209.0], [3084.0, 3589.0], [3092.0, 3563.0], [3100.0, 3548.0], [3124.0, 3530.0], [3228.0, 4210.0], [3316.0, 4079.0], [3220.0, 4181.0], [3212.0, 4130.0], [3204.0, 4105.0], [3284.0, 3433.0], [3276.0, 4119.0], [3268.0, 4184.0], [3260.0, 4110.0], [3252.0, 4165.0], [3244.0, 4197.0], [3444.0, 4072.0], [3412.0, 4092.0], [3420.0, 4097.5], [3452.0, 4125.5], [3436.0, 4075.0], [3428.0, 4097.0], [3356.0, 4094.0], [3332.0, 4102.5], [3364.0, 4154.25], [3580.0, 4112.333333333333], [3524.0, 4127.0], [3532.0, 4154.0], [3548.0, 3359.0], [3572.0, 4075.5], [3564.0, 4084.0], [3516.0, 4109.333333333333], [3460.0, 4155.333333333333], [3468.0, 4174.333333333333], [3484.0, 3389.6666666666665], [3508.0, 4074.0], [3700.0, 3337.0], [3588.0, 4121.5], [3836.0, 3575.0], [3780.0, 3730.0], [3788.0, 3693.0], [3796.0, 3685.0], [3828.0, 3593.0], [3820.0, 3608.0], [3812.0, 3654.0], [3740.0, 3776.0851063829805], [3772.0, 3913.0], [3764.0, 3735.0], [3756.0, 3869.5], [3748.0, 3781.0], [3844.0, 3550.0], [4076.0, 3360.0], [4068.0, 2913.0], [4036.0, 2485.0], [4044.0, 3385.0], [4084.0, 2825.0], [3996.0, 3083.0], [3980.0, 3117.0], [4028.0, 2756.5], [4020.0, 3022.0], [4012.0, 3041.0], [4004.0, 3066.0], [4232.0, 2963.0], [4312.0, 2833.5], [4248.0, 2411.0], [4264.0, 2897.0], [4280.0, 2355.5], [4104.0, 3244.0], [4488.0, 2275.0], [4472.0, 2329.0], [4840.0, 1686.0], [4744.0, 1854.6666666666667], [4760.0, 1824.0], [4776.0, 1794.0], [4792.0, 1764.0], [4856.0, 1656.0], [4824.0, 1719.0], [4808.0, 1739.0], [4648.0, 1997.0], [4632.0, 2026.0], [4616.0, 2057.0], [4728.0, 1890.0], [4712.0, 2018.0], [4696.0, 2004.0], [4680.0, 2090.0], [4920.0, 1637.0], [4904.0, 1667.0], [5000.0, 1359.0], [4888.0, 1614.0], [4984.0, 1505.0], [4952.0, 1625.0], [4936.0, 1607.25], [4249.0, 2414.0], [4233.0, 2941.0], [4265.0, 2388.0], [4281.0, 2372.0], [4313.0, 2307.0], [4297.0, 2341.5], [4105.0, 2760.0], [4217.0, 2756.0], [4489.0, 2274.0], [4473.0, 2326.0], [4441.0, 2608.8524590163925], [4841.0, 1676.0], [4825.0, 1709.0], [4745.0, 1854.0], [4761.0, 1823.0], [4777.0, 1792.0], [4857.0, 1654.0], [4809.0, 1740.0], [4649.0, 1997.0], [4633.0, 2026.0], [4617.0, 2063.0], [4729.0, 1888.0], [4713.0, 1980.0], [4921.0, 1594.0], [4873.0, 1651.5], [4985.0, 1561.0], [4969.0, 1537.5], [4953.0, 1608.0], [2677.0, 4327.0], [2797.0, 4332.5], [2765.0, 4269.0], [2717.0, 4293.0], [2709.0, 4272.0], [2701.0, 4272.0], [2693.0, 4269.0], [2781.0, 4300.0], [2773.0, 4271.5], [2757.0, 4324.0], [2733.0, 4358.0], [2725.0, 4337.0], [3069.0, 3597.5], [3093.0, 3551.0], [3133.0, 3482.5], [3197.0, 4101.0], [3173.0, 4132.666666666667], [3101.0, 3542.0], [3125.0, 3516.0], [3117.0, 4184.0], [3109.0, 3541.0], [3213.0, 4125.5], [3325.0, 4126.666666666667], [3317.0, 4180.0], [3221.0, 4180.0], [3205.0, 4149.0], [3285.0, 3434.0], [3277.0, 4120.0], [3261.0, 4102.0], [3253.0, 4107.0], [3245.0, 4203.0], [3237.0, 4210.333333333333], [3437.0, 4073.0], [3421.0, 4061.0], [3429.0, 4135.0], [3357.0, 4090.0], [3341.0, 4158.0], [3333.0, 4107.333333333333], [3365.0, 4134.5], [3565.0, 4081.0], [3525.0, 4123.0], [3533.0, 4153.5], [3541.0, 3649.0], [3581.0, 4096.5], [3557.0, 4101.0], [3485.0, 3382.0], [3477.0, 4187.2], [3469.0, 4175.0], [3461.0, 4162.5], [3517.0, 4115.0], [3509.0, 4048.0], [3693.0, 3342.0], [3837.0, 3573.0], [3781.0, 3708.0], [3789.0, 3699.0], [3797.0, 3862.0], [3805.0, 3629.5], [3829.0, 3793.0], [3821.0, 3621.0], [3813.0, 3645.0], [3741.0, 3806.0], [3773.0, 3717.0], [3765.0, 3735.0], [3757.0, 3955.0], [3749.0, 3768.0], [4085.0, 2807.0], [4077.0, 3357.0], [4045.0, 2879.5], [4037.0, 3007.0], [4053.0, 2733.0], [4061.0, 3367.0], [4093.0, 3265.0], [3997.0, 3077.0], [3989.0, 3102.0], [4021.0, 2503.0], [4013.0, 3035.0], [4005.0, 3065.0], [4250.0, 2409.0], [4282.0, 2367.0], [4314.0, 2819.0], [4154.0, 3214.0], [4106.0, 2756.0], [4218.0, 2999.0], [4490.0, 2268.0], [4474.0, 2323.0], [4442.0, 2496.0], [4842.0, 1666.0], [4826.0, 1713.0], [4858.0, 1656.0], [4746.0, 1853.0], [4762.0, 1826.0], [4778.0, 1799.0], [4794.0, 1758.0], [4810.0, 1738.0], [4666.0, 1980.0], [4650.0, 1996.0], [4634.0, 2022.0], [4618.0, 2051.0], [4714.0, 2044.0], [4698.0, 2029.5], [4682.0, 2076.5], [4890.0, 1611.0], [4874.0, 1657.5], [4922.0, 1620.0], [4906.0, 1657.5], [4986.0, 1508.0], [4970.0, 1523.0], [4954.0, 1567.0], [4235.0, 2692.0], [4251.0, 2421.0], [4283.0, 2374.0], [4299.0, 2351.0], [4107.0, 2751.0], [4219.0, 3005.0], [4459.0, 2478.875], [4811.0, 1742.0], [4747.0, 1860.0], [4763.0, 1821.0], [4779.0, 1790.0], [4795.0, 1764.0], [4827.0, 1714.0], [4667.0, 1987.0], [4651.0, 1994.0], [4635.0, 2023.0], [4731.0, 1888.5], [4715.0, 2012.0], [4683.0, 2030.0], [4907.0, 1653.0], [4923.0, 1639.0], [4875.0, 1649.5], [4987.0, 1548.0], [4971.0, 1516.0], [4955.0, 1568.0], [4939.0, 1603.3333333333333], [1151.0, 4946.0], [1147.0, 4965.0], [1143.0, 4980.0], [1215.0, 4308.0], [1211.0, 4430.0], [1159.0, 4050.0], [1155.0, 4945.0], [1271.0, 4359.0], [1275.0, 4381.0], [1279.0, 4368.0], [1251.0, 4333.0], [1247.0, 4318.333333333333], [1223.0, 4282.0], [1219.0, 4398.0], [1227.0, 4301.0], [1231.0, 4312.0], [1243.0, 4315.0], [1239.0, 4297.0], [1235.0, 4293.4], [1259.0, 4343.0], [1255.0, 4333.0], [1335.0, 4336.0], [1287.0, 4404.0], [1303.0, 4421.0], [1299.0, 4423.0], [1291.0, 4401.5], [1395.0, 4263.0], [1403.0, 4314.0], [1407.0, 4301.5], [1383.0, 4304.0], [1399.0, 4262.0], [1359.0, 4257.0], [1355.0, 4253.0], [1351.0, 4285.0], [1375.0, 4301.0], [1371.0, 4295.0], [1367.0, 4285.0], [1387.0, 4267.0], [1459.0, 4870.0], [1447.0, 4335.0], [1423.0, 4311.0], [1419.0, 4297.0], [1415.0, 4307.0], [1411.0, 4306.0], [1455.0, 4338.0], [1451.0, 4354.0], [1443.0, 4324.0], [1439.0, 4328.0], [1435.0, 4320.0], [1431.0, 4312.5], [1427.0, 4308.5], [1599.0, 4270.0], [1595.0, 4252.0], [1591.0, 4230.0], [1587.0, 4228.0], [1583.0, 4242.0], [1575.0, 4221.0], [1655.0, 4222.666666666667], [1651.0, 4218.0], [1663.0, 4232.0], [1639.0, 4262.0], [1643.0, 4232.5], [1659.0, 4228.0], [1615.0, 4221.0], [1607.0, 4210.0], [1603.0, 4227.0], [1631.0, 4256.0], [1627.0, 4248.0], [1623.0, 4242.0], [1647.0, 4204.0], [1683.0, 4231.5], [1679.0, 4223.0], [1675.0, 4240.0], [1671.0, 4205.5], [1667.0, 4196.0], [2678.0, 4231.0], [2670.0, 4233.0], [2702.0, 4270.0], [2798.0, 4332.5], [2790.0, 4331.0], [2750.0, 4244.0], [2718.0, 4296.0], [2742.0, 4351.0], [2734.0, 4356.5], [2726.0, 4346.0], [2782.0, 4288.0], [2766.0, 4264.0], [2758.0, 4239.0], [3070.0, 3592.0], [3086.0, 3564.0], [3198.0, 4113.0], [3190.0, 4120.0], [3134.0, 3454.0], [3094.0, 3558.0], [3102.0, 3545.0], [3126.0, 3503.0], [3118.0, 4178.0], [3110.0, 3540.0], [3310.0, 4090.0], [3230.0, 4183.0], [3270.0, 4229.0], [3326.0, 4087.5], [3318.0, 4092.6666666666665], [3222.0, 4190.0], [3214.0, 4185.0], [3206.0, 4114.0], [3286.0, 3438.0], [3278.0, 4125.0], [3262.0, 4090.0], [3254.0, 4100.0], [3246.0, 4196.333333333333], [3238.0, 4180.0], [3438.0, 4145.5], [3430.0, 4056.0], [3454.0, 4129.0], [3406.0, 4137.0], [3414.0, 4074.0], [3446.0, 4134.0], [3350.0, 4179.0], [3342.0, 4171.0], [3334.0, 4110.0], [3366.0, 3425.0], [3526.0, 4128.5], [3582.0, 4116.666666666667], [3534.0, 4255.0], [3574.0, 4117.0], [3566.0, 4087.5], [3478.0, 3394.0], [3486.0, 3378.0], [3710.0, 3336.5], [3590.0, 4131.5], [3822.0, 3602.0], [3830.0, 3588.0], [3838.0, 3583.0], [3782.0, 3705.0], [3798.0, 3855.0], [3814.0, 3613.0], [3774.0, 3721.0], [3742.0, 3986.0], [3766.0, 3922.0], [3758.0, 3741.0], [3750.0, 3963.0], [3846.0, 3552.0], [3998.0, 3074.0], [4086.0, 2809.0], [4094.0, 2770.0], [4038.0, 3002.0], [4046.0, 2879.0], [4054.0, 2992.0], [3990.0, 3096.0], [3982.0, 3112.0], [4030.0, 2493.0], [4022.0, 2501.0], [4014.0, 3035.0], [4006.0, 3065.0], [4236.0, 2935.0], [4268.0, 2394.6666666666665], [4252.0, 2911.0], [4300.0, 2326.0], [4220.0, 2512.0], [4108.0, 3245.0], [4476.0, 2319.0], [4828.0, 1708.0], [4844.0, 1666.5], [4764.0, 1820.0], [4748.0, 1849.0], [4780.0, 1788.0], [4796.0, 1755.0], [4812.0, 1734.0], [4668.0, 2027.0], [4652.0, 1992.0], [4636.0, 2019.0], [4732.0, 1886.0], [4716.0, 1969.0], [4700.0, 2021.0], [4684.0, 2029.0], [4908.0, 1614.0], [4924.0, 1599.0], [4876.0, 1649.0], [4972.0, 1519.0], [4956.0, 1548.0], [4940.0, 1546.0], [4253.0, 2417.0], [4237.0, 2948.0], [4269.0, 2394.0], [4285.0, 2350.0], [4317.0, 2645.6666666666665], [4301.0, 2839.0], [4221.0, 2508.0], [4173.0, 3215.0], [4477.0, 2267.0], [4461.0, 2469.6666666666665], [4845.0, 1665.0], [4749.0, 1853.0], [4765.0, 1819.0], [4781.0, 1783.0], [4797.0, 1760.0], [4813.0, 1736.0], [4653.0, 1989.0], [4637.0, 2020.0], [4621.0, 2045.6666666666667], [4733.0, 1881.0], [4717.0, 1990.0], [4701.0, 2029.0], [4685.0, 2009.0], [4909.0, 1612.0], [4877.0, 1649.0], [4989.0, 1532.0], [4973.0, 1544.0], [4957.0, 1545.0], [4941.0, 1541.0], [2679.0, 4235.0], [2791.0, 4335.0], [2767.0, 4269.0], [2711.0, 4286.0], [2695.0, 4247.0], [2751.0, 4243.0], [2743.0, 4316.666666666667], [2735.0, 4346.0], [2775.0, 4289.333333333333], [2759.0, 4230.0], [3079.0, 4234.0], [3175.0, 4100.0], [3199.0, 4102.0], [3191.0, 4185.333333333333], [3135.0, 3443.0], [3087.0, 3572.0], [3095.0, 3549.0], [3127.0, 3491.0], [3119.0, 4184.0], [3111.0, 3533.0], [3215.0, 4128.0], [3223.0, 4154.0], [3311.0, 4162.0], [3231.0, 4163.333333333333], [3207.0, 4116.0], [3279.0, 4123.0], [3271.0, 4150.0], [3263.0, 4165.5], [3255.0, 4209.5], [3247.0, 4209.0], [3239.0, 4202.5], [3455.0, 4139.0], [3447.0, 4152.0], [3415.0, 4079.5], [3423.0, 4116.333333333333], [3359.0, 4099.666666666667], [3351.0, 4112.0], [3343.0, 4163.0], [3367.0, 3423.0], [3567.0, 4074.0], [3527.0, 4132.333333333333], [3575.0, 4112.0], [3583.0, 4097.5], [3535.0, 3362.0], [3551.0, 3357.6666666666665], [3479.0, 3395.0], [3471.0, 4167.0], [3463.0, 4164.8], [3519.0, 4107.0], [3511.0, 4045.5], [3687.0, 3343.0], [3671.0, 3341.0], [3591.0, 4129.0], [3831.0, 3582.0], [3791.0, 3876.5], [3839.0, 3588.0], [3807.0, 3646.5], [3823.0, 3605.0], [3743.0, 3797.0], [3775.0, 3714.0], [3767.0, 3920.0], [3759.0, 3740.0], [3751.0, 3779.0], [3847.0, 3548.0], [4087.0, 3290.0], [4079.0, 3352.0], [4095.0, 3278.0], [4039.0, 2997.0], [4047.0, 3374.0], [4055.0, 2990.0], [4063.0, 3367.5], [4071.0, 2894.0], [3991.0, 3098.0], [3983.0, 3115.0], [4031.0, 2491.0], [4023.0, 3023.0], [4015.0, 3032.0], [4007.0, 3065.0], [4238.0, 2420.0], [4318.0, 2783.0], [4270.0, 2394.0], [4286.0, 2348.0], [4302.0, 2313.0], [4222.0, 2494.0], [4110.0, 2993.5], [4478.0, 2306.0], [4830.0, 1707.0], [4750.0, 1844.0], [4766.0, 1819.0], [4782.0, 1781.0], [4798.0, 1750.0], [4846.0, 1668.0], [4670.0, 2060.0], [4638.0, 2023.0], [4622.0, 2043.0], [4734.0, 1881.0], [4718.0, 2047.0], [4702.0, 1991.0], [4686.0, 1961.0], [4990.0, 1491.0], [4926.0, 1630.0], [4910.0, 1616.0], [4974.0, 1509.0], [4942.0, 1637.0], [4239.0, 2442.0], [4271.0, 2376.0], [4319.0, 2798.0], [4255.0, 2404.0], [4287.0, 2346.0], [4111.0, 3241.0], [4223.0, 2493.0], [4479.0, 2305.0], [4671.0, 2028.0], [4815.0, 1731.0], [4751.0, 1841.0], [4831.0, 1703.5], [4767.0, 1817.0], [4783.0, 1776.0], [4655.0, 1991.5], [4639.0, 2012.0], [4623.0, 2043.0], [4735.0, 1886.0], [4719.0, 1993.0], [4703.0, 2003.0], [4911.0, 1587.0], [4879.0, 1647.0], [4975.0, 1537.0], [4959.0, 1601.0], [4943.0, 1537.0], [1.0, 9616.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2731.6773999999973, 4012.6839999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5532.75, "minX": 1.6997784E12, "maxY": 624071.2333333333, "series": [{"data": [[1.6997784E12, 624071.2333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6997784E12, 5532.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997784E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4012.6839999999997, "minX": 1.6997784E12, "maxY": 4012.6839999999997, "series": [{"data": [[1.6997784E12, 4012.6839999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997784E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1851.6127999999962, "minX": 1.6997784E12, "maxY": 1851.6127999999962, "series": [{"data": [[1.6997784E12, 1851.6127999999962]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997784E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2938.176999999999, "minX": 1.6997784E12, "maxY": 2938.176999999999, "series": [{"data": [[1.6997784E12, 2938.176999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997784E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1359.0, "minX": 1.6997784E12, "maxY": 9802.0, "series": [{"data": [[1.6997784E12, 9802.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6997784E12, 5923.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6997784E12, 6335.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6997784E12, 6122.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6997784E12, 1359.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6997784E12, 3535.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997784E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1711.0, "minX": 1.0, "maxY": 9616.0, "series": [{"data": [[8.0, 5964.5], [1.0, 9616.0], [2328.0, 3661.0], [5.0, 9275.0], [342.0, 1711.0], [406.0, 2305.5], [466.0, 3150.5], [467.0, 5922.0], [977.0, 5049.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2328.0, 4206.0], [977.0, 4303.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2328.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 9615.0, "series": [{"data": [[8.0, 5963.0], [1.0, 9615.0], [2328.0, 3592.0], [5.0, 9274.0], [342.0, 1706.5], [406.0, 2301.5], [466.0, 3118.5], [467.0, 5909.0], [977.0, 5049.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2328.0, 0.0], [977.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2328.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.6997784E12, "maxY": 83.33333333333333, "series": [{"data": [[1.6997784E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997784E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 40.983333333333334, "minX": 1.6997784E12, "maxY": 42.35, "series": [{"data": [[1.6997784E12, 40.983333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6997784E12, 42.35]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6997784E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 40.983333333333334, "minX": 1.6997784E12, "maxY": 42.35, "series": [{"data": [[1.6997784E12, 40.983333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6997784E12, 42.35]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997784E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 40.983333333333334, "minX": 1.6997784E12, "maxY": 42.35, "series": [{"data": [[1.6997784E12, 40.983333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6997784E12, 42.35]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6997784E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

