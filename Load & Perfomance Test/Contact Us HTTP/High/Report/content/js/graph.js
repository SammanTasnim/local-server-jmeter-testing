/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1726.0, "minX": 0.0, "maxY": 6942.0, "series": [{"data": [[0.0, 1726.0], [0.1, 1767.0], [0.2, 1798.0], [0.3, 1810.0], [0.4, 1824.0], [0.5, 1832.0], [0.6, 1851.0], [0.7, 1866.0], [0.8, 1870.0], [0.9, 1878.0], [1.0, 1884.0], [1.1, 1891.0], [1.2, 1904.0], [1.3, 1915.0], [1.4, 1922.0], [1.5, 1933.0], [1.6, 1957.0], [1.7, 2016.0], [1.8, 2022.0], [1.9, 2040.0], [2.0, 2045.0], [2.1, 2062.0], [2.2, 2070.0], [2.3, 2075.0], [2.4, 2082.0], [2.5, 2098.0], [2.6, 2101.0], [2.7, 2106.0], [2.8, 2111.0], [2.9, 2122.0], [3.0, 2129.0], [3.1, 2130.0], [3.2, 2132.0], [3.3, 2143.0], [3.4, 2152.0], [3.5, 2162.0], [3.6, 2170.0], [3.7, 2172.0], [3.8, 2189.0], [3.9, 2198.0], [4.0, 2210.0], [4.1, 2216.0], [4.2, 2224.0], [4.3, 2230.0], [4.4, 2232.0], [4.5, 2239.0], [4.6, 2248.0], [4.7, 2252.0], [4.8, 2261.0], [4.9, 2264.0], [5.0, 2268.0], [5.1, 2273.0], [5.2, 2278.0], [5.3, 2285.0], [5.4, 2290.0], [5.5, 2296.0], [5.6, 2306.0], [5.7, 2326.0], [5.8, 2355.0], [5.9, 2370.0], [6.0, 2383.0], [6.1, 2411.0], [6.2, 2417.0], [6.3, 2426.0], [6.4, 2441.0], [6.5, 2450.0], [6.6, 2461.0], [6.7, 2466.0], [6.8, 2494.0], [6.9, 2516.0], [7.0, 2538.0], [7.1, 2580.0], [7.2, 2607.0], [7.3, 2624.0], [7.4, 2630.0], [7.5, 2634.0], [7.6, 2648.0], [7.7, 2654.0], [7.8, 2656.0], [7.9, 2659.0], [8.0, 2667.0], [8.1, 2674.0], [8.2, 2687.0], [8.3, 2696.0], [8.4, 2706.0], [8.5, 2719.0], [8.6, 2738.0], [8.7, 2762.0], [8.8, 2766.0], [8.9, 2774.0], [9.0, 2784.0], [9.1, 2788.0], [9.2, 2794.0], [9.3, 2801.0], [9.4, 2807.0], [9.5, 2811.0], [9.6, 2815.0], [9.7, 2830.0], [9.8, 2837.0], [9.9, 2851.0], [10.0, 2866.0], [10.1, 2892.0], [10.2, 2906.0], [10.3, 2924.0], [10.4, 3043.0], [10.5, 3056.0], [10.6, 3058.0], [10.7, 3059.0], [10.8, 3064.0], [10.9, 3074.0], [11.0, 3088.0], [11.1, 3101.0], [11.2, 3109.0], [11.3, 3111.0], [11.4, 3124.0], [11.5, 3130.0], [11.6, 3133.0], [11.7, 3140.0], [11.8, 3145.0], [11.9, 3147.0], [12.0, 3151.0], [12.1, 3153.0], [12.2, 3156.0], [12.3, 3157.0], [12.4, 3161.0], [12.5, 3164.0], [12.6, 3165.0], [12.7, 3167.0], [12.8, 3171.0], [12.9, 3174.0], [13.0, 3177.0], [13.1, 3179.0], [13.2, 3185.0], [13.3, 3194.0], [13.4, 3206.0], [13.5, 3214.0], [13.6, 3218.0], [13.7, 3224.0], [13.8, 3227.0], [13.9, 3230.0], [14.0, 3236.0], [14.1, 3239.0], [14.2, 3245.0], [14.3, 3248.0], [14.4, 3252.0], [14.5, 3255.0], [14.6, 3257.0], [14.7, 3260.0], [14.8, 3266.0], [14.9, 3267.0], [15.0, 3269.0], [15.1, 3275.0], [15.2, 3294.0], [15.3, 3310.0], [15.4, 3322.0], [15.5, 3336.0], [15.6, 3342.0], [15.7, 3343.0], [15.8, 3352.0], [15.9, 3355.0], [16.0, 3360.0], [16.1, 3364.0], [16.2, 3369.0], [16.3, 3374.0], [16.4, 3377.0], [16.5, 3383.0], [16.6, 3395.0], [16.7, 3398.0], [16.8, 3401.0], [16.9, 3405.0], [17.0, 3411.0], [17.1, 3413.0], [17.2, 3422.0], [17.3, 3428.0], [17.4, 3431.0], [17.5, 3440.0], [17.6, 3445.0], [17.7, 3451.0], [17.8, 3458.0], [17.9, 3462.0], [18.0, 3465.0], [18.1, 3469.0], [18.2, 3473.0], [18.3, 3482.0], [18.4, 3485.0], [18.5, 3490.0], [18.6, 3496.0], [18.7, 3504.0], [18.8, 3511.0], [18.9, 3515.0], [19.0, 3520.0], [19.1, 3524.0], [19.2, 3527.0], [19.3, 3530.0], [19.4, 3531.0], [19.5, 3533.0], [19.6, 3536.0], [19.7, 3539.0], [19.8, 3541.0], [19.9, 3544.0], [20.0, 3549.0], [20.1, 3553.0], [20.2, 3554.0], [20.3, 3555.0], [20.4, 3556.0], [20.5, 3559.0], [20.6, 3562.0], [20.7, 3569.0], [20.8, 3578.0], [20.9, 3586.0], [21.0, 3591.0], [21.1, 3596.0], [21.2, 3626.0], [21.3, 3660.0], [21.4, 3674.0], [21.5, 3698.0], [21.6, 3718.0], [21.7, 3744.0], [21.8, 3861.0], [21.9, 4019.0], [22.0, 4025.0], [22.1, 4027.0], [22.2, 4028.0], [22.3, 4029.0], [22.4, 4030.0], [22.5, 4031.0], [22.6, 4032.0], [22.7, 4032.0], [22.8, 4032.0], [22.9, 4033.0], [23.0, 4033.0], [23.1, 4034.0], [23.2, 4034.0], [23.3, 4034.0], [23.4, 4034.0], [23.5, 4035.0], [23.6, 4035.0], [23.7, 4036.0], [23.8, 4036.0], [23.9, 4036.0], [24.0, 4036.0], [24.1, 4036.0], [24.2, 4036.0], [24.3, 4037.0], [24.4, 4037.0], [24.5, 4037.0], [24.6, 4037.0], [24.7, 4037.0], [24.8, 4038.0], [24.9, 4038.0], [25.0, 4038.0], [25.1, 4038.0], [25.2, 4038.0], [25.3, 4038.0], [25.4, 4039.0], [25.5, 4039.0], [25.6, 4039.0], [25.7, 4039.0], [25.8, 4039.0], [25.9, 4039.0], [26.0, 4039.0], [26.1, 4040.0], [26.2, 4040.0], [26.3, 4040.0], [26.4, 4040.0], [26.5, 4040.0], [26.6, 4040.0], [26.7, 4040.0], [26.8, 4040.0], [26.9, 4041.0], [27.0, 4041.0], [27.1, 4041.0], [27.2, 4041.0], [27.3, 4041.0], [27.4, 4041.0], [27.5, 4041.0], [27.6, 4041.0], [27.7, 4041.0], [27.8, 4041.0], [27.9, 4041.0], [28.0, 4042.0], [28.1, 4042.0], [28.2, 4042.0], [28.3, 4042.0], [28.4, 4042.0], [28.5, 4042.0], [28.6, 4042.0], [28.7, 4042.0], [28.8, 4042.0], [28.9, 4043.0], [29.0, 4043.0], [29.1, 4043.0], [29.2, 4043.0], [29.3, 4043.0], [29.4, 4043.0], [29.5, 4043.0], [29.6, 4043.0], [29.7, 4043.0], [29.8, 4043.0], [29.9, 4043.0], [30.0, 4043.0], [30.1, 4043.0], [30.2, 4044.0], [30.3, 4044.0], [30.4, 4044.0], [30.5, 4044.0], [30.6, 4044.0], [30.7, 4044.0], [30.8, 4044.0], [30.9, 4044.0], [31.0, 4044.0], [31.1, 4045.0], [31.2, 4045.0], [31.3, 4045.0], [31.4, 4045.0], [31.5, 4045.0], [31.6, 4045.0], [31.7, 4045.0], [31.8, 4045.0], [31.9, 4045.0], [32.0, 4045.0], [32.1, 4045.0], [32.2, 4045.0], [32.3, 4045.0], [32.4, 4046.0], [32.5, 4046.0], [32.6, 4046.0], [32.7, 4046.0], [32.8, 4046.0], [32.9, 4046.0], [33.0, 4046.0], [33.1, 4046.0], [33.2, 4046.0], [33.3, 4046.0], [33.4, 4046.0], [33.5, 4046.0], [33.6, 4047.0], [33.7, 4047.0], [33.8, 4047.0], [33.9, 4047.0], [34.0, 4047.0], [34.1, 4047.0], [34.2, 4047.0], [34.3, 4047.0], [34.4, 4047.0], [34.5, 4047.0], [34.6, 4047.0], [34.7, 4047.0], [34.8, 4047.0], [34.9, 4047.0], [35.0, 4048.0], [35.1, 4048.0], [35.2, 4048.0], [35.3, 4048.0], [35.4, 4048.0], [35.5, 4048.0], [35.6, 4048.0], [35.7, 4048.0], [35.8, 4048.0], [35.9, 4048.0], [36.0, 4048.0], [36.1, 4048.0], [36.2, 4048.0], [36.3, 4048.0], [36.4, 4048.0], [36.5, 4048.0], [36.6, 4048.0], [36.7, 4048.0], [36.8, 4049.0], [36.9, 4049.0], [37.0, 4049.0], [37.1, 4049.0], [37.2, 4049.0], [37.3, 4049.0], [37.4, 4049.0], [37.5, 4049.0], [37.6, 4049.0], [37.7, 4049.0], [37.8, 4049.0], [37.9, 4049.0], [38.0, 4049.0], [38.1, 4049.0], [38.2, 4049.0], [38.3, 4049.0], [38.4, 4050.0], [38.5, 4050.0], [38.6, 4050.0], [38.7, 4050.0], [38.8, 4050.0], [38.9, 4050.0], [39.0, 4050.0], [39.1, 4050.0], [39.2, 4050.0], [39.3, 4050.0], [39.4, 4050.0], [39.5, 4050.0], [39.6, 4050.0], [39.7, 4050.0], [39.8, 4050.0], [39.9, 4050.0], [40.0, 4051.0], [40.1, 4051.0], [40.2, 4051.0], [40.3, 4051.0], [40.4, 4051.0], [40.5, 4051.0], [40.6, 4051.0], [40.7, 4051.0], [40.8, 4051.0], [40.9, 4051.0], [41.0, 4051.0], [41.1, 4051.0], [41.2, 4051.0], [41.3, 4051.0], [41.4, 4051.0], [41.5, 4051.0], [41.6, 4051.0], [41.7, 4052.0], [41.8, 4052.0], [41.9, 4052.0], [42.0, 4052.0], [42.1, 4052.0], [42.2, 4052.0], [42.3, 4052.0], [42.4, 4052.0], [42.5, 4052.0], [42.6, 4052.0], [42.7, 4052.0], [42.8, 4052.0], [42.9, 4052.0], [43.0, 4052.0], [43.1, 4052.0], [43.2, 4052.0], [43.3, 4052.0], [43.4, 4052.0], [43.5, 4052.0], [43.6, 4053.0], [43.7, 4053.0], [43.8, 4053.0], [43.9, 4053.0], [44.0, 4053.0], [44.1, 4053.0], [44.2, 4053.0], [44.3, 4053.0], [44.4, 4053.0], [44.5, 4053.0], [44.6, 4053.0], [44.7, 4053.0], [44.8, 4053.0], [44.9, 4053.0], [45.0, 4053.0], [45.1, 4053.0], [45.2, 4053.0], [45.3, 4053.0], [45.4, 4053.0], [45.5, 4053.0], [45.6, 4054.0], [45.7, 4054.0], [45.8, 4054.0], [45.9, 4054.0], [46.0, 4054.0], [46.1, 4054.0], [46.2, 4054.0], [46.3, 4054.0], [46.4, 4054.0], [46.5, 4054.0], [46.6, 4054.0], [46.7, 4054.0], [46.8, 4054.0], [46.9, 4054.0], [47.0, 4054.0], [47.1, 4054.0], [47.2, 4054.0], [47.3, 4054.0], [47.4, 4054.0], [47.5, 4054.0], [47.6, 4055.0], [47.7, 4055.0], [47.8, 4055.0], [47.9, 4055.0], [48.0, 4055.0], [48.1, 4055.0], [48.2, 4055.0], [48.3, 4055.0], [48.4, 4055.0], [48.5, 4055.0], [48.6, 4055.0], [48.7, 4055.0], [48.8, 4055.0], [48.9, 4055.0], [49.0, 4055.0], [49.1, 4055.0], [49.2, 4055.0], [49.3, 4056.0], [49.4, 4056.0], [49.5, 4056.0], [49.6, 4056.0], [49.7, 4056.0], [49.8, 4056.0], [49.9, 4056.0], [50.0, 4056.0], [50.1, 4056.0], [50.2, 4056.0], [50.3, 4056.0], [50.4, 4056.0], [50.5, 4056.0], [50.6, 4056.0], [50.7, 4056.0], [50.8, 4056.0], [50.9, 4056.0], [51.0, 4056.0], [51.1, 4056.0], [51.2, 4056.0], [51.3, 4057.0], [51.4, 4057.0], [51.5, 4057.0], [51.6, 4057.0], [51.7, 4057.0], [51.8, 4057.0], [51.9, 4057.0], [52.0, 4057.0], [52.1, 4057.0], [52.2, 4057.0], [52.3, 4057.0], [52.4, 4057.0], [52.5, 4057.0], [52.6, 4057.0], [52.7, 4057.0], [52.8, 4058.0], [52.9, 4058.0], [53.0, 4058.0], [53.1, 4058.0], [53.2, 4058.0], [53.3, 4058.0], [53.4, 4058.0], [53.5, 4058.0], [53.6, 4058.0], [53.7, 4058.0], [53.8, 4058.0], [53.9, 4058.0], [54.0, 4058.0], [54.1, 4058.0], [54.2, 4058.0], [54.3, 4058.0], [54.4, 4058.0], [54.5, 4058.0], [54.6, 4058.0], [54.7, 4058.0], [54.8, 4058.0], [54.9, 4059.0], [55.0, 4059.0], [55.1, 4059.0], [55.2, 4059.0], [55.3, 4059.0], [55.4, 4059.0], [55.5, 4059.0], [55.6, 4059.0], [55.7, 4059.0], [55.8, 4059.0], [55.9, 4059.0], [56.0, 4059.0], [56.1, 4059.0], [56.2, 4059.0], [56.3, 4059.0], [56.4, 4059.0], [56.5, 4059.0], [56.6, 4059.0], [56.7, 4059.0], [56.8, 4060.0], [56.9, 4060.0], [57.0, 4060.0], [57.1, 4060.0], [57.2, 4060.0], [57.3, 4060.0], [57.4, 4060.0], [57.5, 4060.0], [57.6, 4060.0], [57.7, 4060.0], [57.8, 4060.0], [57.9, 4060.0], [58.0, 4060.0], [58.1, 4060.0], [58.2, 4060.0], [58.3, 4060.0], [58.4, 4060.0], [58.5, 4061.0], [58.6, 4061.0], [58.7, 4061.0], [58.8, 4061.0], [58.9, 4061.0], [59.0, 4061.0], [59.1, 4061.0], [59.2, 4061.0], [59.3, 4061.0], [59.4, 4061.0], [59.5, 4061.0], [59.6, 4061.0], [59.7, 4061.0], [59.8, 4061.0], [59.9, 4061.0], [60.0, 4061.0], [60.1, 4061.0], [60.2, 4061.0], [60.3, 4061.0], [60.4, 4062.0], [60.5, 4062.0], [60.6, 4062.0], [60.7, 4062.0], [60.8, 4062.0], [60.9, 4062.0], [61.0, 4062.0], [61.1, 4062.0], [61.2, 4062.0], [61.3, 4062.0], [61.4, 4062.0], [61.5, 4062.0], [61.6, 4062.0], [61.7, 4062.0], [61.8, 4062.0], [61.9, 4062.0], [62.0, 4062.0], [62.1, 4062.0], [62.2, 4062.0], [62.3, 4062.0], [62.4, 4062.0], [62.5, 4063.0], [62.6, 4063.0], [62.7, 4063.0], [62.8, 4063.0], [62.9, 4063.0], [63.0, 4063.0], [63.1, 4063.0], [63.2, 4063.0], [63.3, 4063.0], [63.4, 4063.0], [63.5, 4063.0], [63.6, 4063.0], [63.7, 4063.0], [63.8, 4063.0], [63.9, 4063.0], [64.0, 4063.0], [64.1, 4063.0], [64.2, 4064.0], [64.3, 4064.0], [64.4, 4064.0], [64.5, 4064.0], [64.6, 4064.0], [64.7, 4064.0], [64.8, 4064.0], [64.9, 4064.0], [65.0, 4064.0], [65.1, 4064.0], [65.2, 4064.0], [65.3, 4064.0], [65.4, 4064.0], [65.5, 4064.0], [65.6, 4064.0], [65.7, 4064.0], [65.8, 4064.0], [65.9, 4064.0], [66.0, 4064.0], [66.1, 4064.0], [66.2, 4065.0], [66.3, 4065.0], [66.4, 4065.0], [66.5, 4065.0], [66.6, 4065.0], [66.7, 4065.0], [66.8, 4065.0], [66.9, 4065.0], [67.0, 4065.0], [67.1, 4065.0], [67.2, 4065.0], [67.3, 4065.0], [67.4, 4065.0], [67.5, 4065.0], [67.6, 4066.0], [67.7, 4066.0], [67.8, 4066.0], [67.9, 4066.0], [68.0, 4066.0], [68.1, 4066.0], [68.2, 4066.0], [68.3, 4066.0], [68.4, 4066.0], [68.5, 4066.0], [68.6, 4066.0], [68.7, 4066.0], [68.8, 4066.0], [68.9, 4066.0], [69.0, 4066.0], [69.1, 4066.0], [69.2, 4066.0], [69.3, 4067.0], [69.4, 4067.0], [69.5, 4067.0], [69.6, 4067.0], [69.7, 4067.0], [69.8, 4067.0], [69.9, 4067.0], [70.0, 4067.0], [70.1, 4067.0], [70.2, 4067.0], [70.3, 4067.0], [70.4, 4067.0], [70.5, 4067.0], [70.6, 4067.0], [70.7, 4068.0], [70.8, 4068.0], [70.9, 4068.0], [71.0, 4068.0], [71.1, 4068.0], [71.2, 4068.0], [71.3, 4068.0], [71.4, 4068.0], [71.5, 4068.0], [71.6, 4068.0], [71.7, 4068.0], [71.8, 4068.0], [71.9, 4068.0], [72.0, 4068.0], [72.1, 4068.0], [72.2, 4069.0], [72.3, 4069.0], [72.4, 4069.0], [72.5, 4069.0], [72.6, 4069.0], [72.7, 4069.0], [72.8, 4069.0], [72.9, 4069.0], [73.0, 4069.0], [73.1, 4069.0], [73.2, 4070.0], [73.3, 4070.0], [73.4, 4070.0], [73.5, 4070.0], [73.6, 4070.0], [73.7, 4070.0], [73.8, 4070.0], [73.9, 4070.0], [74.0, 4070.0], [74.1, 4070.0], [74.2, 4070.0], [74.3, 4071.0], [74.4, 4071.0], [74.5, 4071.0], [74.6, 4071.0], [74.7, 4071.0], [74.8, 4071.0], [74.9, 4071.0], [75.0, 4071.0], [75.1, 4071.0], [75.2, 4071.0], [75.3, 4072.0], [75.4, 4072.0], [75.5, 4072.0], [75.6, 4072.0], [75.7, 4072.0], [75.8, 4072.0], [75.9, 4072.0], [76.0, 4073.0], [76.1, 4073.0], [76.2, 4073.0], [76.3, 4073.0], [76.4, 4073.0], [76.5, 4073.0], [76.6, 4073.0], [76.7, 4073.0], [76.8, 4074.0], [76.9, 4074.0], [77.0, 4074.0], [77.1, 4074.0], [77.2, 4074.0], [77.3, 4074.0], [77.4, 4075.0], [77.5, 4075.0], [77.6, 4075.0], [77.7, 4075.0], [77.8, 4075.0], [77.9, 4075.0], [78.0, 4075.0], [78.1, 4076.0], [78.2, 4076.0], [78.3, 4076.0], [78.4, 4076.0], [78.5, 4076.0], [78.6, 4076.0], [78.7, 4076.0], [78.8, 4077.0], [78.9, 4077.0], [79.0, 4077.0], [79.1, 4078.0], [79.2, 4078.0], [79.3, 4078.0], [79.4, 4078.0], [79.5, 4078.0], [79.6, 4079.0], [79.7, 4079.0], [79.8, 4079.0], [79.9, 4079.0], [80.0, 4080.0], [80.1, 4080.0], [80.2, 4080.0], [80.3, 4081.0], [80.4, 4081.0], [80.5, 4082.0], [80.6, 4083.0], [80.7, 4084.0], [80.8, 4086.0], [80.9, 4099.0], [81.0, 4139.0], [81.1, 4141.0], [81.2, 4142.0], [81.3, 4142.0], [81.4, 4143.0], [81.5, 4144.0], [81.6, 4145.0], [81.7, 4145.0], [81.8, 4146.0], [81.9, 4147.0], [82.0, 4147.0], [82.1, 4148.0], [82.2, 4148.0], [82.3, 4149.0], [82.4, 4149.0], [82.5, 4150.0], [82.6, 4151.0], [82.7, 4153.0], [82.8, 4153.0], [82.9, 4154.0], [83.0, 4154.0], [83.1, 4156.0], [83.2, 4157.0], [83.3, 4158.0], [83.4, 4159.0], [83.5, 4160.0], [83.6, 4161.0], [83.7, 4163.0], [83.8, 4163.0], [83.9, 4190.0], [84.0, 4204.0], [84.1, 4221.0], [84.2, 4236.0], [84.3, 4246.0], [84.4, 4352.0], [84.5, 4411.0], [84.6, 4420.0], [84.7, 4430.0], [84.8, 4439.0], [84.9, 4453.0], [85.0, 4479.0], [85.1, 4501.0], [85.2, 4572.0], [85.3, 4675.0], [85.4, 4708.0], [85.5, 4710.0], [85.6, 4715.0], [85.7, 4728.0], [85.8, 4731.0], [85.9, 4750.0], [86.0, 4792.0], [86.1, 4866.0], [86.2, 4877.0], [86.3, 4891.0], [86.4, 4896.0], [86.5, 4901.0], [86.6, 4916.0], [86.7, 4919.0], [86.8, 4923.0], [86.9, 4930.0], [87.0, 4935.0], [87.1, 4942.0], [87.2, 4948.0], [87.3, 4953.0], [87.4, 4958.0], [87.5, 4961.0], [87.6, 4975.0], [87.7, 4983.0], [87.8, 4992.0], [87.9, 5017.0], [88.0, 5025.0], [88.1, 5030.0], [88.2, 5038.0], [88.3, 5039.0], [88.4, 5045.0], [88.5, 5049.0], [88.6, 5056.0], [88.7, 5060.0], [88.8, 5063.0], [88.9, 5068.0], [89.0, 5072.0], [89.1, 5077.0], [89.2, 5085.0], [89.3, 5092.0], [89.4, 5098.0], [89.5, 5103.0], [89.6, 5108.0], [89.7, 5114.0], [89.8, 5124.0], [89.9, 5130.0], [90.0, 5135.0], [90.1, 5138.0], [90.2, 5142.0], [90.3, 5145.0], [90.4, 5150.0], [90.5, 5150.0], [90.6, 5158.0], [90.7, 5169.0], [90.8, 5189.0], [90.9, 5201.0], [91.0, 5209.0], [91.1, 5217.0], [91.2, 5220.0], [91.3, 5224.0], [91.4, 5230.0], [91.5, 5248.0], [91.6, 5255.0], [91.7, 5262.0], [91.8, 5265.0], [91.9, 5268.0], [92.0, 5274.0], [92.1, 5276.0], [92.2, 5278.0], [92.3, 5282.0], [92.4, 5286.0], [92.5, 5290.0], [92.6, 5294.0], [92.7, 5303.0], [92.8, 5315.0], [92.9, 5322.0], [93.0, 5325.0], [93.1, 5328.0], [93.2, 5331.0], [93.3, 5335.0], [93.4, 5339.0], [93.5, 5341.0], [93.6, 5343.0], [93.7, 5345.0], [93.8, 5347.0], [93.9, 5349.0], [94.0, 5351.0], [94.1, 5354.0], [94.2, 5357.0], [94.3, 5360.0], [94.4, 5364.0], [94.5, 5366.0], [94.6, 5368.0], [94.7, 5369.0], [94.8, 5373.0], [94.9, 5377.0], [95.0, 5380.0], [95.1, 5383.0], [95.2, 5389.0], [95.3, 5393.0], [95.4, 5400.0], [95.5, 5403.0], [95.6, 5406.0], [95.7, 5407.0], [95.8, 5412.0], [95.9, 5413.0], [96.0, 5415.0], [96.1, 5417.0], [96.2, 5420.0], [96.3, 5422.0], [96.4, 5425.0], [96.5, 5430.0], [96.6, 5432.0], [96.7, 5432.0], [96.8, 5435.0], [96.9, 5438.0], [97.0, 5441.0], [97.1, 5444.0], [97.2, 5451.0], [97.3, 5454.0], [97.4, 5459.0], [97.5, 5466.0], [97.6, 5470.0], [97.7, 5486.0], [97.8, 5541.0], [97.9, 5552.0], [98.0, 5557.0], [98.1, 5562.0], [98.2, 5782.0], [98.3, 5797.0], [98.4, 5802.0], [98.5, 5805.0], [98.6, 5813.0], [98.7, 5818.0], [98.8, 5822.0], [98.9, 5827.0], [99.0, 5838.0], [99.1, 5865.0], [99.2, 5885.0], [99.3, 5897.0], [99.4, 6068.0], [99.5, 6080.0], [99.6, 6097.0], [99.7, 6117.0], [99.8, 6157.0], [99.9, 6512.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 2953.0, "series": [{"data": [[1700.0, 13.0], [1800.0, 46.0], [1900.0, 25.0], [2000.0, 41.0], [2100.0, 70.0], [2200.0, 82.0], [2300.0, 25.0], [2400.0, 39.0], [2500.0, 18.0], [2600.0, 60.0], [2700.0, 46.0], [2800.0, 42.0], [2900.0, 13.0], [3000.0, 34.0], [3100.0, 115.0], [3200.0, 92.0], [3300.0, 77.0], [3400.0, 96.0], [3500.0, 123.0], [3600.0, 19.0], [3700.0, 13.0], [3800.0, 4.0], [4000.0, 2953.0], [4100.0, 154.0], [4200.0, 18.0], [4300.0, 6.0], [4500.0, 10.0], [4400.0, 31.0], [4600.0, 2.0], [4700.0, 34.0], [4800.0, 24.0], [5000.0, 82.0], [4900.0, 66.0], [5100.0, 70.0], [5200.0, 90.0], [5300.0, 137.0], [5500.0, 23.0], [5400.0, 117.0], [5800.0, 50.0], [5700.0, 7.0], [5900.0, 3.0], [6000.0, 11.0], [6100.0, 14.0], [6500.0, 3.0], [6900.0, 1.0], [6800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1929.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3071.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1929.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3071.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2634.116599999992, "minX": 1.69977876E12, "maxY": 2634.116599999992, "series": [{"data": [[1.69977876E12, 2634.116599999992]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977876E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1738.0, "minX": 1.0, "maxY": 6942.0, "series": [{"data": [[2.0, 6942.0], [3.0, 6173.0], [4.0, 5899.0], [5.0, 5897.0], [6.0, 5900.0], [7.0, 6157.0], [10.0, 5882.666666666667], [11.0, 6170.0], [12.0, 5882.0], [13.0, 5878.0], [15.0, 5889.5], [16.0, 5885.0], [18.0, 6158.5], [19.0, 5885.0], [21.0, 6154.0], [22.0, 5865.0], [23.0, 5844.0], [24.0, 6117.0], [25.0, 6119.0], [26.0, 5860.0], [27.0, 5827.0], [28.0, 6119.0], [29.0, 5838.0], [30.0, 6104.0], [31.0, 6545.0], [32.0, 5829.0], [35.0, 5821.0], [34.0, 5828.0], [37.0, 5828.0], [36.0, 6104.0], [39.0, 5822.0], [38.0, 6096.0], [41.0, 6109.0], [40.0, 5830.0], [43.0, 6176.0], [45.0, 5812.0], [46.0, 5815.0], [49.0, 6106.0], [48.0, 5814.0], [50.0, 5818.0], [53.0, 5818.0], [52.0, 5956.5], [55.0, 5813.0], [57.0, 5806.0], [56.0, 6097.0], [59.0, 5805.0], [58.0, 5803.0], [67.0, 5945.5], [65.0, 5805.0], [64.0, 5970.2], [71.0, 5791.5], [69.0, 6073.0], [68.0, 6073.0], [75.0, 5790.0], [74.0, 6068.0], [73.0, 6293.5], [79.0, 5472.0], [78.0, 5471.0], [77.0, 5782.0], [76.0, 5792.0], [83.0, 5468.0], [82.0, 5470.333333333333], [86.0, 5467.0], [85.0, 5463.0], [84.0, 5466.0], [91.0, 5451.5], [89.0, 5454.0], [88.0, 5460.5], [95.0, 5444.0], [94.0, 5442.0], [93.0, 5444.0], [92.0, 5446.0], [99.0, 5441.0], [98.0, 5435.0], [97.0, 5449.0], [96.0, 5437.0], [103.0, 5441.0], [101.0, 5432.0], [100.0, 5452.0], [107.0, 5432.0], [106.0, 5430.0], [105.0, 5432.0], [104.0, 5439.0], [111.0, 5432.0], [110.0, 5430.5], [108.0, 5418.0], [115.0, 5419.666666666667], [112.0, 5417.0], [119.0, 5413.0], [118.0, 5412.0], [117.0, 5409.0], [116.0, 5406.0], [123.0, 5394.0], [122.0, 5412.0], [121.0, 5411.0], [120.0, 5413.0], [127.0, 5390.0], [126.0, 5401.0], [125.0, 5393.0], [124.0, 5393.0], [135.0, 5377.0], [134.0, 5374.0], [133.0, 5389.0], [132.0, 5385.0], [131.0, 5391.0], [130.0, 5383.0], [129.0, 5400.0], [128.0, 5390.0], [143.0, 5366.0], [142.0, 5367.0], [140.0, 5381.0], [138.0, 5373.0], [137.0, 5378.0], [136.0, 5372.0], [148.0, 5347.0], [147.0, 5355.0], [146.0, 5363.0], [145.0, 5368.0], [144.0, 5367.0], [223.0, 5160.0], [222.0, 5151.0], [221.0, 5371.547945205478], [231.0, 5143.0], [230.0, 5140.0], [229.0, 5152.0], [228.0, 5145.0], [227.0, 5150.0], [226.0, 5161.0], [225.0, 5147.0], [224.0, 5161.0], [237.0, 5558.333333333333], [234.0, 5142.0], [233.0, 5415.0], [232.0, 5854.0], [247.0, 5803.0], [246.0, 5801.0], [245.0, 5821.0], [244.0, 5815.0], [243.0, 5390.0], [242.0, 5108.0], [241.0, 5444.0], [255.0, 5358.0], [254.0, 5365.0], [253.0, 5076.0], [252.0, 5563.333333333333], [249.0, 5804.0], [248.0, 5801.0], [268.0, 5207.5], [270.0, 5345.0], [271.0, 5068.0], [269.0, 5056.0], [266.0, 5354.5], [264.0, 5368.0], [263.0, 5270.666666666667], [260.0, 5368.0], [259.0, 5360.0], [257.0, 5358.0], [256.0, 5364.0], [275.0, 5339.5], [287.0, 5248.0], [284.0, 5348.0], [283.0, 5206.0], [281.0, 5254.333333333333], [278.0, 5075.0], [277.0, 5067.0], [273.0, 5348.0], [272.0, 5354.0], [302.0, 5153.5], [303.0, 5278.0], [300.0, 5019.0], [288.0, 5028.0], [299.0, 5020.0], [298.0, 5017.0], [297.0, 5291.0], [296.0, 5161.5], [294.0, 5314.0], [293.0, 5020.0], [292.0, 5176.75], [317.0, 5222.0], [319.0, 5221.5], [316.0, 5233.0], [307.0, 5249.0], [306.0, 4982.0], [305.0, 5280.0], [304.0, 5277.0], [315.0, 5217.0], [314.0, 5226.0], [312.0, 5223.0], [311.0, 5245.0], [310.0, 5246.0], [309.0, 5255.0], [308.0, 5256.0], [332.0, 5189.0], [330.0, 5200.0], [329.0, 5201.0], [328.0, 5206.0], [327.0, 5200.0], [320.0, 5215.0], [326.0, 5213.0], [325.0, 5208.0], [324.0, 5216.5], [322.0, 5220.0], [321.0, 5217.0], [478.0, 5340.0], [477.0, 5346.5], [475.0, 5349.0], [474.0, 5357.0], [473.0, 5343.666666666667], [472.0, 5346.0], [469.0, 5347.0], [468.0, 5342.0], [467.0, 5361.0], [466.0, 5353.0], [465.0, 5318.7593984962405], [483.0, 5350.0], [495.0, 5337.0], [492.0, 5345.0], [491.0, 5329.0], [489.0, 5345.0], [488.0, 5343.5], [486.0, 5331.0], [485.0, 5348.0], [484.0, 5344.0], [482.0, 5351.0], [481.0, 5337.0], [480.0, 5347.0], [510.0, 5325.0], [511.0, 5323.0], [508.0, 5329.0], [499.0, 5325.0], [498.0, 5340.0], [497.0, 5329.0], [507.0, 5327.0], [506.0, 5335.0], [505.0, 5314.0], [504.0, 5330.5], [502.0, 5333.0], [501.0, 5327.0], [500.0, 5338.0], [540.0, 5164.0], [542.0, 5173.0], [528.0, 5262.0], [530.0, 5230.0], [536.0, 5212.0], [518.0, 5299.0], [516.0, 5316.0], [514.0, 5333.0], [512.0, 5322.0], [526.0, 5268.0], [524.0, 5259.0], [522.0, 5315.0], [520.0, 5315.0], [532.0, 5225.0], [568.0, 5128.0], [572.0, 5094.0], [560.0, 5131.0], [570.0, 5108.0], [544.0, 5150.0], [546.0, 5150.0], [550.0, 5149.0], [558.0, 5136.0], [556.0, 5143.0], [552.0, 5137.0], [566.0, 5139.666666666667], [562.0, 5138.0], [862.0, 4383.0], [864.0, 4379.0], [868.0, 4874.0], [876.0, 4339.0], [866.0, 4875.0], [874.0, 4859.0], [872.0, 4861.0], [870.0, 4866.0], [924.0, 4078.0], [920.0, 4076.0], [910.0, 4082.0], [918.0, 4077.0], [916.0, 4066.5], [914.0, 4066.0], [952.0, 4075.0], [958.0, 4069.0], [944.0, 4065.75], [954.0, 4061.0], [928.0, 4064.0], [930.0, 4065.0], [932.0, 4078.0], [934.0, 4072.5], [942.0, 4073.0], [938.0, 4069.0], [948.0, 4081.0], [946.0, 4065.0], [964.0, 4066.3333333333335], [980.0, 4074.3333333333335], [984.0, 4323.0], [966.0, 4076.0], [962.0, 4064.0], [960.0, 4063.0], [972.0, 4062.0], [970.0, 4079.0], [968.0, 4065.0], [982.0, 4072.0], [978.0, 4063.0], [976.0, 4066.75], [1022.0, 4766.0], [1008.0, 4066.0], [1020.0, 4060.5], [1018.0, 4058.5], [998.0, 4067.0], [1004.0, 4059.0], [1000.0, 4063.25], [1010.0, 4058.3333333333335], [1036.0, 4221.0], [1064.0, 4731.0], [1056.0, 4718.0], [1072.0, 4446.5], [1032.0, 4239.0], [1028.0, 4750.0], [1024.0, 4261.0], [1052.0, 4462.0], [1048.0, 4210.0], [1044.0, 4214.0], [1040.0, 4240.0], [1068.0, 4194.0], [1060.0, 4734.0], [1956.0, 4060.0], [1960.0, 4063.0], [1952.0, 4066.0], [1948.0, 4060.0], [1944.0, 4061.0], [2032.0, 4064.0], [2020.0, 4057.0], [2160.0, 4054.0], [2168.0, 4055.5], [2088.0, 4064.0], [2080.0, 4055.5], [2064.0, 4056.75], [2056.0, 4057.0], [2048.0, 4056.5], [2208.0, 4053.0], [2200.0, 4056.0], [2192.0, 4049.25], [2368.0, 4063.0], [2416.0, 4049.0], [2376.0, 4045.0], [2408.0, 4052.5], [2400.0, 4046.0], [2392.0, 4048.0], [2384.0, 4038.5], [2680.0, 4072.0], [2664.0, 4053.5], [2616.0, 4061.0], [2640.0, 4053.0], [2800.0, 4049.6666666666665], [2744.0, 4063.0], [2736.0, 4066.0], [2728.0, 4056.0], [2720.0, 4067.0], [2840.0, 4056.0], [2936.0, 4036.0], [2928.0, 4047.0], [2888.0, 3754.0], [2880.0, 4067.3333333333335], [2864.0, 4057.0], [2832.0, 4065.0], [2824.0, 4054.1666666666665], [2816.0, 4056.0], [3056.0, 4045.0], [3016.0, 4045.0], [3040.0, 4047.5], [2960.0, 4044.25], [2952.0, 4049.3333333333335], [2944.0, 4033.0], [2984.0, 4252.0], [3024.0, 4048.5], [3192.0, 4063.0], [3176.0, 4052.0], [3168.0, 4038.0], [3152.0, 4061.0], [3296.0, 4049.0], [3280.0, 4041.0], [3304.0, 3721.0], [3264.0, 4047.0], [3224.0, 4045.5], [3216.0, 4066.0], [3208.0, 4052.0], [3200.0, 4056.6], [3256.0, 4039.0], [3248.0, 4058.25], [3240.0, 4037.0], [3288.0, 4047.5], [3272.0, 4063.0], [3448.0, 4049.0], [3424.0, 4051.0], [3416.0, 4069.0], [3360.0, 4053.0], [3344.0, 4052.0], [3352.0, 4051.0], [3568.0, 4066.0], [3520.0, 4057.0], [3456.0, 4058.0], [3512.0, 4061.0], [3504.0, 4059.0], [3496.0, 4058.0], [3488.0, 4050.0], [3544.0, 3662.0], [3536.0, 4073.0], [3680.0, 4045.0], [3696.0, 4054.0], [3648.0, 3672.0], [3672.0, 4049.0], [3640.0, 4061.5], [3608.0, 4048.0], [3600.0, 4043.75], [3632.0, 4060.0], [3616.0, 4061.0], [3784.0, 4062.3333333333335], [3792.0, 4066.5], [3776.0, 4052.5], [3800.0, 4079.0], [3832.0, 4056.5], [3824.0, 4072.0], [3816.0, 4069.0], [3808.0, 4042.0], [3904.0, 4044.0], [3840.0, 4062.0], [3896.0, 4039.0], [3888.0, 4049.0], [3880.0, 4046.5], [4088.0, 3256.0], [4048.0, 3482.0], [4056.0, 3464.0], [4080.0, 3399.0], [4072.0, 3294.0], [4064.0, 3335.0], [4304.0, 3356.0], [4320.0, 3266.0], [4144.0, 3258.0], [4128.0, 3343.0], [4112.0, 3352.0], [4496.0, 2891.5], [4480.0, 3043.0], [4512.0, 2832.0], [4528.0, 2809.0], [4592.0, 2689.0], [4576.0, 2719.0], [4544.0, 2793.0], [4816.0, 2170.0], [4832.0, 2150.0], [4736.0, 2256.0], [4752.0, 2278.0], [4768.0, 2284.0], [4784.0, 2230.0], [4800.0, 2238.0], [4624.0, 2653.0], [4720.0, 2296.0], [4704.0, 2419.0], [4976.0, 1881.0], [4992.0, 1762.0], [4896.0, 2060.5], [4960.0, 1851.0], [4944.0, 1928.0], [4928.0, 1878.0], [4145.0, 3269.0], [4321.0, 3305.0], [4305.0, 3355.0], [4129.0, 3347.0], [4113.0, 3230.0], [4097.0, 3245.0], [4497.0, 2890.0], [4513.0, 2835.0], [4529.0, 2811.0], [4593.0, 2698.0], [4561.0, 2772.5], [4817.0, 2172.0], [4753.0, 2295.0], [4769.0, 2246.0], [4833.0, 2153.0], [4801.0, 2242.0], [4609.0, 2683.5], [4721.0, 2295.0], [4705.0, 2417.0], [4977.0, 1809.0], [4993.0, 1802.0], [4913.0, 2109.0], [4961.0, 1799.0], [4945.0, 1879.0], [4929.0, 1939.0], [2073.0, 4056.5], [2169.0, 4048.0], [2161.0, 4051.0], [2153.0, 4046.0], [2065.0, 4053.0], [2057.0, 4060.0], [2137.0, 4048.0], [2105.0, 4057.5], [2081.0, 4056.0], [2193.0, 4053.0], [2209.0, 4052.4285714285716], [2201.0, 4045.0], [2185.0, 4049.6666666666665], [2177.0, 4045.3333333333335], [2369.0, 4056.0], [2385.0, 4058.5], [2417.0, 4056.0], [2409.0, 4064.0], [2401.0, 4035.0], [2361.0, 4063.0], [2393.0, 4038.0], [2377.0, 4034.0], [2665.0, 4060.6666666666665], [2681.0, 4070.0], [2657.0, 4079.0], [2625.0, 4061.0], [2809.0, 4063.0], [2689.0, 4066.5], [2745.0, 4058.5], [2737.0, 4064.0], [2729.0, 4060.0], [2721.0, 4067.0], [2833.0, 4058.3333333333335], [2937.0, 4055.0], [2817.0, 4059.0], [2881.0, 4054.0], [2873.0, 4052.0], [2865.0, 4067.0], [2857.0, 4047.5], [3049.0, 4050.0], [3057.0, 4040.5], [2985.0, 3757.0], [2961.0, 4034.0], [2969.0, 4046.75], [2977.0, 4047.0], [3033.0, 4050.25], [3017.0, 4049.0], [3193.0, 4057.3333333333335], [3185.0, 4032.0], [3169.0, 4041.0], [3097.0, 4032.6666666666665], [3161.0, 4054.0], [3297.0, 4050.0], [3273.0, 4044.0], [3313.0, 3697.0], [3305.0, 3718.0], [3209.0, 4051.0], [3201.0, 4073.0], [3217.0, 4053.5], [3257.0, 4062.0], [3249.0, 4047.0], [3241.0, 4042.5], [3233.0, 4044.0], [3281.0, 4049.0], [3265.0, 4050.6666666666665], [3441.0, 4049.0], [3449.0, 4059.0], [3433.0, 4057.5], [3425.0, 4063.5], [3353.0, 4055.6], [3345.0, 4048.0], [3361.0, 4061.0], [3417.0, 4080.5], [3409.0, 4058.0], [3481.0, 4046.0], [3577.0, 4053.0], [3521.0, 4055.5], [3529.0, 4064.0], [3537.0, 4046.0], [3473.0, 4060.0], [3465.0, 4058.0], [3457.0, 4038.0], [3513.0, 4058.5], [3505.0, 4068.0], [3545.0, 3667.0], [3681.0, 4051.0], [3609.0, 4062.0], [3649.0, 4163.0], [3673.0, 4057.0], [3689.0, 4051.75], [3593.0, 4059.5], [3585.0, 4039.0], [3641.0, 4063.0], [3633.0, 4060.0], [3625.0, 4059.0], [3617.0, 4060.0], [3825.0, 4063.0], [3833.0, 4067.6666666666665], [3777.0, 4058.0], [3801.0, 4060.6666666666665], [3817.0, 4040.0], [3809.0, 4043.0], [3769.0, 4052.5], [3761.0, 4056.0], [3753.0, 4064.0], [3921.0, 4035.0], [3913.0, 4047.0], [3905.0, 4060.3333333333335], [3849.0, 3632.0], [3841.0, 4065.0], [3897.0, 4045.5], [4049.0, 3360.0], [4057.0, 3370.0], [4081.0, 3398.0], [4073.0, 3431.0], [4065.0, 3312.0], [4306.0, 3354.0], [4146.0, 3252.0], [4130.0, 3343.0], [4098.0, 3377.0], [4498.0, 2885.0], [4482.0, 2929.5], [4514.0, 2823.0], [4530.0, 2810.0], [4578.0, 2736.0], [4562.0, 2769.0], [4466.0, 3059.0], [4818.0, 2175.0], [4738.0, 2232.5], [4754.0, 2277.0], [4786.0, 2241.5], [4802.0, 2232.0], [4626.0, 2605.5], [4610.0, 2661.0], [4722.0, 2292.6666666666665], [4706.0, 2338.0], [4898.0, 2058.0], [4978.0, 1834.0], [4994.0, 1738.0], [4914.0, 2036.0], [4962.0, 1798.0], [4946.0, 1919.0], [4930.0, 1870.0], [4147.0, 3255.0], [4323.0, 3263.0], [4307.0, 3310.0], [4131.0, 3330.0], [4115.0, 3301.5], [4099.0, 3266.0], [4499.0, 2866.0], [4483.0, 2927.0], [4515.0, 2766.0], [4531.0, 2808.0], [4595.0, 2697.0], [4563.0, 2770.0], [4547.0, 2773.0], [4835.0, 2150.5], [4739.0, 2233.0], [4755.0, 2201.0], [4771.0, 2260.5], [4803.0, 2210.0], [4627.0, 2648.0], [4723.0, 2286.0], [4707.0, 2342.0], [4995.0, 1824.0], [4899.0, 2059.0], [4915.0, 2110.0], [4963.0, 1896.0], [4947.0, 1847.0], [4931.0, 1904.0], [1033.0, 4740.0], [1061.0, 4710.0], [1073.0, 4702.0], [1037.0, 4228.0], [1029.0, 4767.0], [1025.0, 4763.0], [1065.0, 4711.0], [1057.0, 4712.0], [1053.0, 4215.0], [1049.0, 4727.0], [1045.0, 4234.0], [1041.0, 4232.0], [1949.0, 4062.0], [1941.0, 4065.0], [1937.0, 4065.0], [2041.0, 4073.5], [2037.0, 4075.5], [2033.0, 4066.5], [2029.0, 4062.0], [2025.0, 4059.0], [2162.0, 4056.0], [2170.0, 4046.0], [2138.0, 4047.5], [2074.0, 4070.0], [2058.0, 4055.3333333333335], [2050.0, 4060.5], [2210.0, 3871.0], [2202.0, 4043.0], [2194.0, 4056.0], [2186.0, 4056.6666666666665], [2178.0, 4054.5], [2410.0, 4060.0], [2418.0, 4055.5], [2402.0, 4050.0], [2674.0, 4068.0], [2682.0, 4065.0], [2666.0, 4057.0], [2658.0, 4057.190476190476], [2642.0, 4079.0], [2794.0, 4058.5], [2810.0, 4057.6666666666665], [2802.0, 4051.0], [2730.0, 4054.0], [2722.0, 4066.0], [2930.0, 4042.0], [2938.0, 4042.0], [2842.0, 4052.0], [2882.0, 4056.3333333333335], [2874.0, 4067.0], [2866.0, 4057.5], [2858.0, 4059.0], [2850.0, 4066.5], [2946.0, 4037.6666666666665], [3042.0, 4058.6666666666665], [2986.0, 3740.0], [2954.0, 4039.5], [2970.0, 4034.0], [2978.0, 4044.6666666666665], [3026.0, 4049.0], [3018.0, 4045.0], [3186.0, 4056.6666666666665], [3178.0, 4056.5], [3170.0, 4045.0], [3098.0, 4036.3333333333335], [3162.0, 4062.0], [3226.0, 4038.0], [3306.0, 3698.0], [3218.0, 4041.0], [3258.0, 4055.3333333333335], [3234.0, 4047.0], [3290.0, 4057.5], [3274.0, 4049.5], [3266.0, 4049.0], [3434.0, 4057.5], [3450.0, 4066.5], [3410.0, 4074.0], [3442.0, 4051.0], [3426.0, 4063.0], [3362.0, 4049.0], [3346.0, 4057.0], [3354.0, 4052.25], [3418.0, 4077.5], [3474.0, 4050.0], [3578.0, 4037.0], [3522.0, 4072.0], [3458.0, 4057.75], [3482.0, 4044.5], [3514.0, 4058.0], [3498.0, 4039.0], [3490.0, 4037.0], [3538.0, 4059.5], [3610.0, 4058.0], [3650.0, 3643.0], [3698.0, 4055.3333333333335], [3690.0, 4058.0], [3602.0, 4044.5], [3586.0, 4056.0], [3634.0, 4063.0], [3626.0, 4058.5], [3618.0, 4056.0], [3674.0, 4061.0], [3786.0, 4059.3333333333335], [3778.0, 4070.0], [3794.0, 4058.5], [3802.0, 4066.3333333333335], [3826.0, 4073.0], [3810.0, 4056.0], [3770.0, 4075.0], [3762.0, 4082.0], [3906.0, 4051.0], [3922.0, 4037.0], [3930.0, 4027.0], [3914.0, 4036.6666666666665], [3842.0, 4055.0], [3850.0, 3613.0], [3890.0, 4039.0], [3882.0, 4063.0], [4090.0, 3316.0], [4058.0, 3466.0], [4082.0, 3405.0], [4074.0, 3428.0], [4066.0, 3336.0], [4324.0, 3260.0], [4308.0, 3308.0], [4148.0, 3249.0], [4132.0, 3315.0], [4116.0, 3356.0], [4500.0, 2867.0], [4484.0, 2925.0], [4516.0, 2824.0], [4532.0, 2804.0], [4596.0, 2607.0], [4580.0, 2657.0], [4564.0, 2766.0], [4772.0, 2243.0], [4788.0, 2230.5], [4836.0, 2148.0], [4820.0, 2168.0], [4804.0, 2214.0], [4612.0, 2668.5], [4708.0, 2410.0], [4996.0, 1769.0], [4884.0, 2093.7297297297296], [4916.0, 2040.0], [4964.0, 1816.0], [4948.0, 1917.0], [4149.0, 3248.0], [4309.0, 3344.0], [4325.0, 3250.0], [4133.0, 3322.0], [4117.0, 3227.0], [4101.0, 3375.5], [4597.0, 2694.5], [4485.0, 2924.0], [4501.0, 2865.0], [4517.0, 2815.0], [4581.0, 2687.0], [4565.0, 2766.0], [4549.0, 2802.5], [4469.0, 3058.0], [4437.0, 3239.0], [4821.0, 2173.0], [4837.0, 2132.0], [4741.0, 2234.5], [4757.0, 2288.0], [4773.0, 2277.0], [4789.0, 2252.0], [4805.0, 2203.0], [4613.0, 2559.0], [4725.0, 2287.0], [4709.0, 2318.0], [4981.0, 1830.0], [4901.0, 2092.0], [4917.0, 1889.0], [4965.0, 1870.0], [4949.0, 1918.0], [4933.0, 1906.5], [2163.0, 4064.0], [2171.0, 4047.0], [2155.0, 4055.0], [2059.0, 4054.0], [2067.0, 4060.6666666666665], [2075.0, 4064.0], [2083.0, 4067.0], [2211.0, 3876.0], [2203.0, 4053.5], [2195.0, 4045.5], [2187.0, 4050.0], [2179.0, 4054.0], [2371.0, 4067.0], [2379.0, 4038.666666666666], [2419.0, 4063.0], [2411.0, 4056.3333333333335], [2403.0, 4036.0], [2363.0, 4045.0], [2395.0, 4055.0], [2387.0, 4049.0], [2683.0, 4064.5], [2675.0, 4060.0], [2659.0, 4060.7714285714283], [2643.0, 4053.0], [2635.0, 4056.0], [2619.0, 4074.0], [2715.0, 4058.0], [2803.0, 4050.75], [2795.0, 4058.0], [2787.0, 4060.5], [2691.0, 4067.3333333333335], [2747.0, 4055.0], [2739.0, 4059.5], [2731.0, 4056.0], [2723.0, 4064.5], [2827.0, 4067.0], [2939.0, 4045.5], [2843.0, 4063.0], [2835.0, 4063.0], [2819.0, 4053.0], [2883.0, 4067.0], [2875.0, 4049.0], [2867.0, 4071.0], [2859.0, 4050.0], [2851.0, 4068.0], [3059.0, 4043.0], [3027.0, 4049.5], [3051.0, 4049.0], [2963.0, 4037.8], [2955.0, 4049.5], [2947.0, 4043.25], [2979.0, 4045.0], [3035.0, 4053.0], [3019.0, 4056.0], [3195.0, 4052.0], [3179.0, 4041.0], [3171.0, 4058.5], [3099.0, 4038.5], [3091.0, 4030.0], [3163.0, 4051.0], [3211.0, 4042.0], [3299.0, 4060.0], [3307.0, 3705.0], [3203.0, 4055.3333333333335], [3219.0, 4069.0], [3227.0, 4041.0], [3251.0, 4038.0], [3243.0, 4053.0], [3235.0, 4039.0], [3291.0, 4050.3333333333335], [3283.0, 4050.6], [3275.0, 4055.0], [3267.0, 4053.0], [3435.0, 4055.0], [3443.0, 4042.0], [3403.0, 4057.0], [3451.0, 4037.0], [3427.0, 4070.0], [3363.0, 4054.0], [3347.0, 4057.0], [3339.0, 4056.0], [3355.0, 4059.0], [3419.0, 4074.0], [3563.0, 3674.0], [3483.0, 4050.5], [3531.0, 4061.5], [3539.0, 4057.5], [3571.0, 4073.0], [3475.0, 4045.3333333333335], [3467.0, 4056.0], [3459.0, 4066.0], [3515.0, 4042.0], [3507.0, 4051.0], [3499.0, 4062.0], [3491.0, 4055.5], [3691.0, 4054.5], [3651.0, 4166.0], [3675.0, 4055.0], [3699.0, 4053.5], [3683.0, 4055.5], [3611.0, 4068.5], [3603.0, 4041.3333333333335], [3595.0, 4064.0], [3643.0, 4064.0], [3635.0, 4062.5], [3627.0, 4065.3333333333335], [3619.0, 4066.0], [3819.0, 4051.25], [3835.0, 4051.0], [3779.0, 4060.0], [3787.0, 4067.0], [3811.0, 4041.0], [3771.0, 4063.0], [3763.0, 4078.0], [3755.0, 4076.0], [3747.0, 4064.5], [3907.0, 4048.0], [3923.0, 4047.5], [3851.0, 3613.0], [3843.0, 4067.0], [3899.0, 4047.3333333333335], [4051.0, 3366.0], [4043.0, 3553.0458715596337], [4059.0, 3343.0], [4091.0, 3375.0], [4083.0, 3396.0], [4075.0, 3292.0], [4067.0, 3440.0], [4310.0, 3306.0], [4134.0, 3279.0], [4102.0, 3379.0], [4502.0, 2864.0], [4486.0, 2916.0], [4518.0, 2764.0], [4534.0, 2801.0], [4598.0, 2675.0], [4566.0, 2765.0], [4470.0, 3059.3333333333335], [4454.0, 3175.78125], [4838.0, 2130.0], [4774.0, 2172.0], [4806.0, 2212.0], [4614.0, 2664.0], [4726.0, 2277.0], [4710.0, 2336.0], [4886.0, 2073.75], [4902.0, 2018.0], [4918.0, 1975.0], [4966.0, 1889.0], [4950.0, 1872.0], [4934.0, 1891.0], [4311.0, 3343.0], [4135.0, 3263.0], [4119.0, 3299.0], [4103.0, 3369.0], [4487.0, 2914.0], [4503.0, 2860.0], [4599.0, 2586.0], [4519.0, 2860.0], [4535.0, 2798.0], [4583.0, 2684.0], [4567.0, 2764.0], [4551.0, 2786.0], [4455.0, 3088.0], [4823.0, 2170.0], [4839.0, 2130.0], [4743.0, 2271.0], [4759.0, 2285.5], [4775.0, 2268.0], [4791.0, 2205.0], [4807.0, 2207.0], [4663.0, 2650.0], [4727.0, 2279.0], [4711.0, 2322.0], [4887.0, 2102.0], [4919.0, 1979.0], [4983.0, 1832.0], [4951.0, 1836.0], [541.0, 5169.0], [543.0, 5169.0], [529.0, 5232.0], [531.0, 5194.0], [539.0, 5211.5], [537.0, 5205.0], [527.0, 5265.0], [515.0, 5325.0], [513.0, 5324.0], [519.0, 5314.0], [517.0, 5301.0], [525.0, 5275.0], [523.0, 5303.0], [521.0, 5314.0], [533.0, 5226.0], [569.0, 5108.0], [573.0, 5098.0], [561.0, 5127.0], [571.0, 5099.0], [559.0, 5135.0], [545.0, 5151.0], [549.0, 5141.0], [547.0, 5139.0], [551.0, 5158.0], [557.0, 5146.0], [555.0, 5145.5], [553.0, 5150.0], [567.0, 5135.0], [563.0, 5135.0], [863.0, 4884.0], [861.0, 4509.333333333332], [875.0, 4352.0], [865.0, 4877.0], [867.0, 4873.0], [873.0, 4861.0], [871.0, 4866.0], [869.0, 4381.0], [925.0, 4077.5], [927.0, 4077.0], [913.0, 4067.0], [923.0, 4066.0], [921.0, 4073.6666666666665], [917.0, 4080.0], [953.0, 4074.0], [957.0, 4065.3333333333335], [945.0, 4067.5], [955.0, 4063.0], [943.0, 4066.0], [929.0, 4064.0], [931.0, 4067.0], [933.0, 4064.0], [935.0, 4064.6666666666665], [941.0, 4075.0], [939.0, 4078.0], [937.0, 4083.0], [951.0, 4066.6666666666665], [949.0, 4063.0], [967.0, 4065.5], [985.0, 4836.0], [963.0, 4072.0], [975.0, 4063.0], [973.0, 4073.0], [983.0, 4068.8], [981.0, 4079.0], [979.0, 4068.666666666667], [1023.0, 4792.0], [1009.0, 4063.0], [1021.0, 4061.5714285714284], [1019.0, 4060.6666666666665], [1007.0, 4065.0], [1005.0, 4060.0], [1003.0, 4060.5], [1015.0, 4056.0], [1013.0, 4058.3333333333335], [1011.0, 4064.0], [1034.0, 4233.0], [1074.0, 4204.0], [1086.0, 4396.999999999999], [1038.0, 4726.0], [1026.0, 4242.0], [1050.0, 4721.0], [1046.0, 4728.0], [1042.0, 4730.0], [1070.0, 4461.0], [1066.0, 4710.0], [1058.0, 4709.0], [1710.0, 4113.0], [1962.0, 4063.25], [1958.0, 4068.0], [1954.0, 4061.0], [1946.0, 4063.0], [2046.0, 4074.5], [2042.0, 4074.0], [2038.0, 4076.0], [2034.0, 4067.0], [2030.0, 4062.0], [2022.0, 4058.0], [2172.0, 4048.5], [2164.0, 4046.0], [2156.0, 4055.25], [2084.0, 4059.0], [2060.0, 4065.2], [2204.0, 4052.0], [2196.0, 4058.0], [2180.0, 4058.0], [2420.0, 4059.5], [2380.0, 4039.333333333333], [2412.0, 4061.0], [2404.0, 4043.3333333333335], [2396.0, 4057.3333333333335], [2388.0, 4056.0], [2668.0, 4064.0], [2684.0, 4073.0], [2660.0, 4053.0], [2612.0, 4077.0], [2676.0, 4068.0], [2636.0, 4045.5], [2628.0, 4062.6666666666665], [2740.0, 4064.0], [2812.0, 4060.3333333333335], [2796.0, 4054.5], [2780.0, 4054.0], [2732.0, 4062.5], [2724.0, 4072.0], [2932.0, 4042.5], [2884.0, 4052.0], [2876.0, 4044.0], [2844.0, 4057.0], [2828.0, 4063.0], [2820.0, 4057.0], [3044.0, 4048.0], [3020.0, 4045.0], [3060.0, 4062.0], [3052.0, 4046.5], [2972.0, 4046.0], [2964.0, 4044.0], [2948.0, 4054.0], [2980.0, 4047.3333333333335], [3036.0, 4057.0], [3028.0, 4046.0], [3188.0, 4044.0], [3196.0, 4064.5], [3180.0, 4054.0], [3092.0, 4034.0], [3164.0, 4040.0], [3156.0, 3935.3333333333335], [3148.0, 4063.0], [3220.0, 4062.5], [3300.0, 4063.0], [3268.0, 4058.0], [3228.0, 4034.0], [3212.0, 4051.0], [3204.0, 4055.5], [3260.0, 4043.0], [3252.0, 4047.0], [3244.0, 4049.0], [3236.0, 4048.0], [3292.0, 4055.0], [3284.0, 4036.0], [3276.0, 4051.0], [3436.0, 4059.5], [3444.0, 4042.0], [3428.0, 4068.5], [3420.0, 4048.5], [3412.0, 4068.0], [3340.0, 4062.0], [3348.0, 4048.0], [3356.0, 4059.0], [3468.0, 4068.0], [3572.0, 4068.5], [3532.0, 4065.0], [3524.0, 4067.3333333333335], [3460.0, 4057.5], [3476.0, 4061.0], [3484.0, 4075.0], [3516.0, 4065.25], [3508.0, 4052.3333333333335], [3500.0, 4060.0], [3492.0, 4047.5], [3652.0, 4164.0], [3700.0, 4053.3333333333335], [3692.0, 4056.0], [3596.0, 4043.0], [3636.0, 4061.0], [3676.0, 4055.0], [3828.0, 4053.25], [3780.0, 4040.0], [3788.0, 4040.0], [3796.0, 4059.6666666666665], [3804.0, 4045.0], [3836.0, 4062.0], [3820.0, 4076.0], [3812.0, 4071.0], [3764.0, 4071.0], [3748.0, 4084.0], [3844.0, 4059.0], [3908.0, 4047.625], [3916.0, 4034.75], [3932.0, 4028.5], [3924.0, 4123.0], [3900.0, 4051.0], [3892.0, 4057.0], [3884.0, 4037.0], [3876.0, 4052.0], [4052.0, 3369.0], [4044.0, 3389.0], [4060.0, 3340.0], [4092.0, 3376.0], [4084.0, 3404.0], [4076.0, 3411.0], [4068.0, 3324.0], [4136.0, 3263.0], [4120.0, 3252.0], [4104.0, 3365.0], [4584.0, 2654.0], [4488.0, 2907.0], [4504.0, 2851.0], [4600.0, 2586.0], [4568.0, 2784.0], [4552.0, 2784.0], [4472.0, 3060.5], [4456.0, 3072.0], [4840.0, 2130.0], [4744.0, 2302.0], [4760.0, 2264.0], [4792.0, 2221.0], [4824.0, 2164.0], [4808.0, 2195.0], [4616.0, 2669.0], [4728.0, 2279.0], [4712.0, 2327.0], [4696.0, 2506.720588235294], [4888.0, 2115.0], [4984.0, 1866.0], [5000.0, 1742.5], [4920.0, 1957.0], [4968.0, 1885.5], [4952.0, 1814.0], [4936.0, 1899.5], [4313.0, 3303.0], [4137.0, 3268.0], [4121.0, 3227.0], [4105.0, 3372.0], [4489.0, 2906.0], [4601.0, 2580.0], [4505.0, 2843.0], [4537.0, 2838.0], [4569.0, 2739.0], [4457.0, 3066.0], [4745.0, 2224.0], [4841.0, 2143.0], [4761.0, 2268.0], [4777.0, 2262.0], [4809.0, 2212.0], [4617.0, 2656.0], [4713.0, 2383.0], [4969.0, 1812.0], [4905.0, 2066.0], [4921.0, 1933.0], [4953.0, 1922.0], [4937.0, 1874.0], [2157.0, 4055.0], [2165.0, 4056.0], [2077.0, 4066.0], [2069.0, 4055.0], [2061.0, 4077.5], [2133.0, 4047.6666666666665], [2085.0, 4064.0], [2213.0, 3857.5], [2205.0, 4051.0], [2197.0, 4056.5], [2189.0, 4052.5], [2181.0, 4053.5], [2421.0, 4063.0], [2397.0, 4056.5], [2389.0, 4054.0], [2381.0, 4055.4666666666667], [2373.0, 4059.0], [2685.0, 4067.5], [2677.0, 4061.0], [2661.0, 4072.0], [2645.0, 4061.1860465116283], [2621.0, 4059.0], [2613.0, 4068.6666666666665], [2805.0, 4057.0], [2797.0, 4057.0], [2813.0, 4053.0], [2781.0, 4065.0], [2749.0, 4058.5], [2717.0, 4057.5], [2741.0, 4066.0], [2725.0, 4062.25], [2933.0, 4046.0], [2877.0, 4058.0], [2941.0, 4048.0], [2845.0, 4067.0], [2837.0, 4046.0], [2885.0, 4066.75], [2869.0, 4054.5], [2861.0, 4055.0], [3061.0, 4052.0], [3021.0, 4050.0], [3045.0, 4043.0], [2949.0, 4052.0], [2957.0, 4042.0], [2973.0, 4042.3333333333335], [2981.0, 4046.75], [3037.0, 4045.0], [3029.0, 4048.0], [3013.0, 4052.6666666666665], [3197.0, 4061.0], [3141.0, 4058.0], [3189.0, 4049.3333333333335], [3181.0, 4056.0], [3173.0, 4057.0], [3165.0, 4075.0], [3221.0, 4042.5], [3309.0, 3693.0], [3261.0, 4034.0], [3253.0, 4055.0], [3245.0, 4055.0], [3285.0, 4031.0], [3277.0, 4044.3333333333335], [3269.0, 4048.6666666666665], [3453.0, 4039.0], [3445.0, 4048.0], [3365.0, 4053.5], [3357.0, 4059.5], [3421.0, 4047.0], [3413.0, 4058.0], [3485.0, 4050.0], [3581.0, 4045.0], [3525.0, 4048.0], [3533.0, 4058.0], [3469.0, 4046.0], [3461.0, 4064.5], [3509.0, 4054.0], [3501.0, 4045.0], [3541.0, 4066.5], [3685.0, 4057.0], [3701.0, 3638.0], [3669.0, 4050.0], [3677.0, 4059.5], [3613.0, 4055.6666666666665], [3605.0, 4048.5], [3597.0, 4052.5], [3645.0, 4064.0], [3637.0, 4058.0], [3629.0, 4063.0], [3621.0, 4065.0], [3821.0, 4048.0], [3781.0, 4064.0], [3789.0, 4053.0], [3797.0, 4063.3333333333335], [3805.0, 4066.6], [3837.0, 4047.0], [3813.0, 4070.5], [3773.0, 4072.0], [3765.0, 4049.0], [3757.0, 4068.0], [3749.0, 4077.0], [3917.0, 4038.0], [3933.0, 4030.5], [3925.0, 3596.0], [3909.0, 4035.0], [3893.0, 4033.0], [3885.0, 4036.0], [4045.0, 3366.0], [4093.0, 3247.0], [4053.0, 3361.0], [4061.0, 3340.0], [4085.0, 3400.0], [4077.0, 3413.0], [4069.0, 3322.0], [4298.0, 3413.63087248322], [4122.0, 3352.0], [4106.0, 3377.0], [4506.0, 2843.0], [4490.0, 2905.0], [4522.0, 2797.0], [4602.0, 2674.0], [4586.0, 2711.0], [4474.0, 3056.0], [4458.0, 3064.0], [4826.0, 2177.0], [4842.0, 2142.0], [4762.0, 2285.0], [4778.0, 2266.0], [4794.0, 2237.0], [4810.0, 2201.0], [4618.0, 2656.0], [4730.0, 2267.0], [4714.0, 2382.0], [4698.0, 2412.0], [4890.0, 2065.0], [4922.0, 1960.0], [4986.0, 1824.0], [4970.0, 1873.0], [4954.0, 1810.0], [4938.0, 1929.0], [4299.0, 3405.0], [4315.0, 3342.0], [4139.0, 3266.5], [4107.0, 3375.0], [4507.0, 2834.0], [4491.0, 2913.0], [4523.0, 2811.0], [4587.0, 2699.5], [4571.0, 2730.0], [4475.0, 3056.0], [4459.0, 3063.0], [4827.0, 2155.0], [4843.0, 2108.0], [4763.0, 2192.0], [4779.0, 2266.0], [4795.0, 2218.0], [4811.0, 2198.0], [4619.0, 2654.0], [4731.0, 2264.0], [4715.0, 2386.0], [4699.0, 2358.0], [4971.0, 1866.0], [4891.0, 2016.0], [4923.0, 1978.0], [4955.0, 1889.0], [1035.0, 4760.0], [1039.0, 4740.0], [1031.0, 4241.0], [1027.0, 4241.0], [1067.0, 4709.0], [1063.0, 4708.0], [1059.0, 4731.0], [1055.0, 4714.5], [1047.0, 4730.0], [1043.0, 4732.0], [1959.0, 4063.0], [1955.0, 4062.0], [1947.0, 4068.0], [1943.0, 4063.0], [2043.0, 4056.0], [2039.0, 4057.0], [2035.0, 4071.6666666666665], [2023.0, 4072.0], [2166.0, 4053.0], [2174.0, 4049.6666666666665], [2150.0, 4056.5], [2078.0, 4074.0], [2070.0, 4056.0], [2062.0, 4067.0], [2054.0, 4069.3333333333335], [2198.0, 4051.5], [2190.0, 4050.25], [2406.0, 4050.6666666666665], [2398.0, 4047.5], [2390.0, 4059.0], [2374.0, 4052.0], [2366.0, 4055.0], [2382.0, 4047.833333333333], [2526.0, 4055.0], [2686.0, 4064.0], [2678.0, 4073.0], [2670.0, 4075.0], [2662.0, 4061.0], [2614.0, 4073.0], [2638.0, 4067.0], [2806.0, 4056.0], [2790.0, 4071.0], [2718.0, 4060.0], [2734.0, 4063.0], [2726.0, 4054.0], [2830.0, 4058.5], [2942.0, 4037.5], [2934.0, 4031.0], [2926.0, 4033.0], [2822.0, 4061.0], [2886.0, 4064.0], [2878.0, 4060.0], [2862.0, 4062.0], [2854.0, 4064.5], [3046.0, 4043.5], [3022.0, 4050.0], [3062.0, 4045.5], [3054.0, 4042.5], [2950.0, 4048.0], [2958.0, 4037.333333333333], [2966.0, 4042.3333333333335], [2982.0, 3739.0], [3038.0, 4047.0], [3030.0, 4046.6666666666665], [3014.0, 4053.0], [3198.0, 4065.0], [3190.0, 4060.0], [3158.0, 4060.0], [3182.0, 4059.0], [3174.0, 4058.0], [3094.0, 4036.25], [3166.0, 4043.0], [3230.0, 4053.6666666666665], [3278.0, 4063.0], [3294.0, 4046.3333333333335], [3302.0, 4056.0], [3222.0, 4045.0], [3214.0, 4064.0], [3206.0, 4045.0], [3262.0, 4064.0], [3254.0, 4051.833333333333], [3246.0, 4056.0], [3238.0, 4048.0], [3286.0, 4061.0], [3270.0, 4053.0], [3454.0, 4055.0], [3414.0, 4059.0], [3438.0, 4041.0], [3430.0, 4079.0], [3342.0, 4059.0], [3350.0, 4048.5], [3422.0, 4047.0], [3462.0, 4071.0], [3566.0, 4058.0], [3582.0, 4048.0], [3574.0, 4066.6666666666665], [3518.0, 4051.0], [3478.0, 4041.5], [3486.0, 4039.0], [3510.0, 4059.0], [3502.0, 4051.5], [3494.0, 4058.6666666666665], [3534.0, 4052.0], [3606.0, 4046.5], [3702.0, 3628.0], [3662.0, 3660.0], [3670.0, 4059.0], [3694.0, 4046.0], [3646.0, 4066.0], [3598.0, 4054.0], [3590.0, 4053.0], [3638.0, 4064.3333333333335], [3630.0, 4066.0], [3622.0, 4059.5], [3830.0, 4054.0], [3838.0, 4062.0], [3782.0, 4051.0], [3790.0, 4069.0], [3798.0, 4079.0], [3806.0, 4061.0], [3814.0, 4066.0], [3774.0, 4053.5], [3766.0, 4052.0], [3758.0, 4075.3333333333335], [3926.0, 3593.0], [3934.0, 3605.0], [3918.0, 4035.0], [3902.0, 4028.0], [3846.0, 4068.5], [3894.0, 4038.0], [4046.0, 3363.0], [4094.0, 3374.0], [4054.0, 3476.0], [4062.0, 3339.0], [4086.0, 3385.0], [4078.0, 3403.0], [4070.0, 3423.0], [4300.0, 3401.0], [4316.0, 3282.0], [4140.0, 3256.0], [4124.0, 3302.5], [4604.0, 2671.0], [4508.0, 2842.0], [4492.0, 2905.0], [4524.0, 2807.0], [4540.0, 2804.75], [4588.0, 2688.0], [4572.0, 2737.0], [4556.0, 2784.0], [4460.0, 3064.0], [4828.0, 2152.0], [4748.0, 2240.0], [4764.0, 2266.0], [4780.0, 2253.0], [4796.0, 2219.0], [4844.0, 2088.0], [4812.0, 2193.0], [4620.0, 2659.0], [4732.0, 2263.0], [4716.0, 2402.0], [4700.0, 2355.0], [4892.0, 2072.0], [4908.0, 2100.0], [4924.0, 1922.0], [4972.0, 1893.0], [4940.0, 1933.5], [4301.0, 3400.0], [4125.0, 3354.0], [4109.0, 3307.0], [4493.0, 2905.0], [4589.0, 2700.0], [4509.0, 2830.0], [4541.0, 2799.0], [4605.0, 2673.0], [4573.0, 2738.0], [4557.0, 2786.0], [4829.0, 2150.0], [4749.0, 2306.0], [4845.0, 2043.0], [4765.0, 2263.0], [4781.0, 2234.0], [4797.0, 2232.0], [4813.0, 2189.0], [4621.0, 2643.0], [4733.0, 2250.0], [4717.0, 2278.0], [4701.0, 2364.0], [4909.0, 2084.0], [4973.0, 1878.0], [2167.0, 4043.0], [2175.0, 4053.0], [2159.0, 4056.6666666666665], [2103.0, 4063.090507726269], [2055.0, 4064.5], [2063.0, 4066.0], [2071.0, 4074.6666666666665], [2087.0, 4063.0], [2207.0, 4050.0], [2199.0, 4048.0], [2183.0, 4048.3333333333335], [2423.0, 4056.9999999999995], [2415.0, 4048.3333333333335], [2391.0, 4055.3333333333335], [2383.0, 4052.840425531915], [2687.0, 4071.5], [2671.0, 4057.5], [2663.0, 4068.0], [2655.0, 4067.0], [2607.0, 4070.0], [2807.0, 4052.0], [2799.0, 4057.6666666666665], [2815.0, 4056.0], [2791.0, 4055.0], [2783.0, 4061.0], [2743.0, 4061.4], [2735.0, 4057.3333333333335], [2727.0, 4052.0], [2847.0, 4068.0], [2943.0, 4036.3333333333335], [2935.0, 4040.5], [2831.0, 4054.0], [2823.0, 4053.3333333333335], [2887.0, 3757.0], [3047.0, 4048.0], [3015.0, 4058.0], [2975.0, 4032.5], [2967.0, 4040.0], [2983.0, 3744.0], [3039.0, 4055.0], [3031.0, 4044.0], [3023.0, 4047.0], [3183.0, 4058.0], [3175.0, 4050.0], [3167.0, 4077.0], [3151.0, 4062.3333333333335], [3143.0, 4054.0], [3311.0, 3700.0], [3279.0, 4047.5], [3303.0, 4054.0], [3255.0, 4059.0], [3207.0, 4056.0], [3215.0, 4068.0], [3231.0, 4045.3333333333335], [3247.0, 4041.0], [3239.0, 4040.0], [3287.0, 4057.0], [3407.0, 4058.0], [3455.0, 4052.0], [3415.0, 4061.0], [3447.0, 4049.0], [3439.0, 4058.5], [3431.0, 4082.0], [3359.0, 4060.0], [3423.0, 4050.0], [3487.0, 4051.0], [3527.0, 4048.0], [3535.0, 4064.0], [3567.0, 4067.0], [3479.0, 4055.0], [3471.0, 4055.5], [3463.0, 4064.0], [3511.0, 4057.5], [3503.0, 4047.0], [3495.0, 4043.0], [3543.0, 4062.0], [3615.0, 4051.0], [3679.0, 4051.3333333333335], [3695.0, 4051.0], [3687.0, 4056.0], [3607.0, 4049.6666666666665], [3591.0, 4065.0], [3647.0, 3931.0], [3639.0, 4066.0], [3831.0, 4052.25], [3839.0, 4047.0], [3791.0, 4072.0], [3807.0, 4049.0], [3823.0, 4049.5], [3815.0, 4050.3333333333335], [3775.0, 4058.0], [3767.0, 4053.0], [3751.0, 4065.0], [3911.0, 4042.4], [3919.0, 4061.0], [3847.0, 4070.0], [3903.0, 4032.0], [3895.0, 4045.0], [3887.0, 4038.3333333333335], [3879.0, 4038.0], [4095.0, 3246.0], [4047.0, 3364.0], [4087.0, 3391.0], [4055.0, 3471.0], [4063.0, 3451.0], [4079.0, 3408.0], [4071.0, 3425.0], [4142.0, 3269.0], [4302.0, 3406.0], [4318.0, 3304.0], [4126.0, 3346.0], [4110.0, 3254.0], [4606.0, 2667.0], [4494.0, 2896.0], [4590.0, 2697.0], [4510.0, 2837.0], [4526.0, 2781.0], [4558.0, 2806.0], [4462.0, 3061.0], [4766.0, 2261.0], [4750.0, 2313.0], [4782.0, 2232.0], [4798.0, 2216.0], [4622.0, 2656.0], [4734.0, 2250.0], [4702.0, 2356.0], [4990.0, 1822.75], [4974.0, 1883.0], [4894.0, 2027.0], [4926.0, 1929.0], [4958.0, 1881.0], [4942.0, 1879.5], [4143.0, 3267.0], [4319.0, 3270.0], [4303.0, 3319.0], [4127.0, 3244.0], [4111.0, 3257.0], [4511.0, 2836.0], [4607.0, 2664.0], [4527.0, 2812.0], [4543.0, 2767.5], [4575.0, 2645.0], [4559.0, 2788.0], [4479.0, 3055.25], [4831.0, 2158.5], [4751.0, 2306.0], [4767.0, 2281.0], [4783.0, 2162.0], [4799.0, 2226.0], [4815.0, 2190.0], [4623.0, 2645.0], [4735.0, 2326.0], [4703.0, 2362.0], [4895.0, 2065.0], [4991.0, 1767.0], [4911.0, 2081.5], [4927.0, 1869.0], [4959.0, 1886.0], [4943.0, 1915.0], [1.0, 6859.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2634.1162000000004, 3988.181199999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4404.55, "minX": 1.69977876E12, "maxY": 532853.8, "series": [{"data": [[1.69977876E12, 532853.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69977876E12, 4404.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977876E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3988.181199999996, "minX": 1.69977876E12, "maxY": 3988.181199999996, "series": [{"data": [[1.69977876E12, 3988.181199999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977876E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1489.7336000000014, "minX": 1.69977876E12, "maxY": 1489.7336000000014, "series": [{"data": [[1.69977876E12, 1489.7336000000014]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977876E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3096.2318000000055, "minX": 1.69977876E12, "maxY": 3096.2318000000055, "series": [{"data": [[1.69977876E12, 3096.2318000000055]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977876E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1726.0, "minX": 1.69977876E12, "maxY": 6942.0, "series": [{"data": [[1.69977876E12, 6942.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69977876E12, 5418.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69977876E12, 6101.900000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69977876E12, 5560.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69977876E12, 1726.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69977876E12, 3529.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977876E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2114.5, "minX": 1.0, "maxY": 6859.0, "series": [{"data": [[1.0, 6859.0], [284.0, 2114.5], [2321.0, 4898.5], [76.0, 5882.5], [1467.0, 3461.0], [400.0, 2825.0], [451.0, 5350.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2321.0, 4059.0], [1467.0, 4053.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2321.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6858.0, "series": [{"data": [[1.0, 6858.0], [284.0, 2034.5], [2321.0, 4897.0], [76.0, 5881.5], [1467.0, 3457.0], [400.0, 2810.5], [451.0, 5344.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2321.0, 0.0], [1467.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2321.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69977876E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69977876E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977876E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 32.15, "minX": 1.69977876E12, "maxY": 51.18333333333333, "series": [{"data": [[1.69977876E12, 32.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69977876E12, 51.18333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977876E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 32.15, "minX": 1.69977876E12, "maxY": 51.18333333333333, "series": [{"data": [[1.69977876E12, 32.15]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69977876E12, 51.18333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977876E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 32.15, "minX": 1.69977876E12, "maxY": 51.18333333333333, "series": [{"data": [[1.69977876E12, 32.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69977876E12, 51.18333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977876E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

