/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 6788.0, "series": [{"data": [[0.0, 31.0], [0.1, 117.0], [0.2, 129.0], [0.3, 136.0], [0.4, 140.0], [0.5, 239.0], [0.6, 246.0], [0.7, 248.0], [0.8, 251.0], [0.9, 254.0], [1.0, 256.0], [1.1, 258.0], [1.2, 259.0], [1.3, 260.0], [1.4, 263.0], [1.5, 264.0], [1.6, 265.0], [1.7, 268.0], [1.8, 283.0], [1.9, 304.0], [2.0, 307.0], [2.1, 317.0], [2.2, 319.0], [2.3, 326.0], [2.4, 356.0], [2.5, 358.0], [2.6, 366.0], [2.7, 368.0], [2.8, 372.0], [2.9, 373.0], [3.0, 374.0], [3.1, 376.0], [3.2, 384.0], [3.3, 415.0], [3.4, 455.0], [3.5, 635.0], [3.6, 663.0], [3.7, 683.0], [3.8, 690.0], [3.9, 705.0], [4.0, 717.0], [4.1, 742.0], [4.2, 757.0], [4.3, 783.0], [4.4, 822.0], [4.5, 928.0], [4.6, 1140.0], [4.7, 1727.0], [4.8, 1743.0], [4.9, 1745.0], [5.0, 1749.0], [5.1, 1752.0], [5.2, 1754.0], [5.3, 1758.0], [5.4, 1771.0], [5.5, 1775.0], [5.6, 1781.0], [5.7, 1783.0], [5.8, 1784.0], [5.9, 1786.0], [6.0, 1789.0], [6.1, 1792.0], [6.2, 1795.0], [6.3, 1797.0], [6.4, 1800.0], [6.5, 1803.0], [6.6, 1811.0], [6.7, 1817.0], [6.8, 1820.0], [6.9, 1836.0], [7.0, 1877.0], [7.1, 1880.0], [7.2, 1888.0], [7.3, 1900.0], [7.4, 1930.0], [7.5, 1942.0], [7.6, 1953.0], [7.7, 1957.0], [7.8, 1970.0], [7.9, 2116.0], [8.0, 2149.0], [8.1, 2200.0], [8.2, 2293.0], [8.3, 2307.0], [8.4, 2320.0], [8.5, 2325.0], [8.6, 2347.0], [8.7, 2351.0], [8.8, 2355.0], [8.9, 2365.0], [9.0, 2375.0], [9.1, 2387.0], [9.2, 2396.0], [9.3, 2405.0], [9.4, 2419.0], [9.5, 2428.0], [9.6, 2445.0], [9.7, 2452.0], [9.8, 2457.0], [9.9, 2462.0], [10.0, 2469.0], [10.1, 2472.0], [10.2, 2483.0], [10.3, 2491.0], [10.4, 2494.0], [10.5, 2502.0], [10.6, 2504.0], [10.7, 2509.0], [10.8, 2522.0], [10.9, 2528.0], [11.0, 2531.0], [11.1, 2536.0], [11.2, 2542.0], [11.3, 2550.0], [11.4, 2552.0], [11.5, 2558.0], [11.6, 2563.0], [11.7, 2567.0], [11.8, 2570.0], [11.9, 2576.0], [12.0, 2585.0], [12.1, 2606.0], [12.2, 2636.0], [12.3, 2638.0], [12.4, 2640.0], [12.5, 2645.0], [12.6, 2649.0], [12.7, 2651.0], [12.8, 2654.0], [12.9, 2655.0], [13.0, 2657.0], [13.1, 2658.0], [13.2, 2660.0], [13.3, 2663.0], [13.4, 2668.0], [13.5, 2684.0], [13.6, 2687.0], [13.7, 2689.0], [13.8, 2697.0], [13.9, 2703.0], [14.0, 2709.0], [14.1, 2711.0], [14.2, 2714.0], [14.3, 2720.0], [14.4, 2721.0], [14.5, 2724.0], [14.6, 2726.0], [14.7, 2729.0], [14.8, 2731.0], [14.9, 2735.0], [15.0, 2738.0], [15.1, 2741.0], [15.2, 2742.0], [15.3, 2745.0], [15.4, 2747.0], [15.5, 2756.0], [15.6, 2773.0], [15.7, 2786.0], [15.8, 2793.0], [15.9, 2803.0], [16.0, 2804.0], [16.1, 2809.0], [16.2, 2812.0], [16.3, 2814.0], [16.4, 2816.0], [16.5, 2819.0], [16.6, 2822.0], [16.7, 2824.0], [16.8, 2833.0], [16.9, 2839.0], [17.0, 2850.0], [17.1, 2854.0], [17.2, 2855.0], [17.3, 2857.0], [17.4, 2863.0], [17.5, 2868.0], [17.6, 2883.0], [17.7, 2893.0], [17.8, 2896.0], [17.9, 2904.0], [18.0, 2924.0], [18.1, 2950.0], [18.2, 2965.0], [18.3, 2997.0], [18.4, 3031.0], [18.5, 3044.0], [18.6, 3083.0], [18.7, 3093.0], [18.8, 3094.0], [18.9, 3103.0], [19.0, 3131.0], [19.1, 3135.0], [19.2, 3173.0], [19.3, 3181.0], [19.4, 3183.0], [19.5, 3184.0], [19.6, 3187.0], [19.7, 3190.0], [19.8, 3194.0], [19.9, 3197.0], [20.0, 3207.0], [20.1, 3214.0], [20.2, 3217.0], [20.3, 3219.0], [20.4, 3220.0], [20.5, 3221.0], [20.6, 3223.0], [20.7, 3223.0], [20.8, 3224.0], [20.9, 3225.0], [21.0, 3226.0], [21.1, 3227.0], [21.2, 3229.0], [21.3, 3231.0], [21.4, 3233.0], [21.5, 3242.0], [21.6, 3249.0], [21.7, 3289.0], [21.8, 3370.0], [21.9, 3451.0], [22.0, 3503.0], [22.1, 3540.0], [22.2, 3579.0], [22.3, 3607.0], [22.4, 3616.0], [22.5, 3627.0], [22.6, 3637.0], [22.7, 3647.0], [22.8, 3657.0], [22.9, 3662.0], [23.0, 3673.0], [23.1, 3687.0], [23.2, 3703.0], [23.3, 3709.0], [23.4, 3726.0], [23.5, 3738.0], [23.6, 3759.0], [23.7, 3783.0], [23.8, 3802.0], [23.9, 3814.0], [24.0, 3820.0], [24.1, 3885.0], [24.2, 3893.0], [24.3, 3901.0], [24.4, 3962.0], [24.5, 3983.0], [24.6, 4007.0], [24.7, 4013.0], [24.8, 4025.0], [24.9, 4042.0], [25.0, 4049.0], [25.1, 4053.0], [25.2, 4057.0], [25.3, 4061.0], [25.4, 4066.0], [25.5, 4072.0], [25.6, 4074.0], [25.7, 4075.0], [25.8, 4077.0], [25.9, 4080.0], [26.0, 4083.0], [26.1, 4091.0], [26.2, 4092.0], [26.3, 4097.0], [26.4, 4101.0], [26.5, 4102.0], [26.6, 4108.0], [26.7, 4112.0], [26.8, 4120.0], [26.9, 4122.0], [27.0, 4125.0], [27.1, 4131.0], [27.2, 4135.0], [27.3, 4136.0], [27.4, 4137.0], [27.5, 4139.0], [27.6, 4139.0], [27.7, 4140.0], [27.8, 4140.0], [27.9, 4141.0], [28.0, 4143.0], [28.1, 4144.0], [28.2, 4145.0], [28.3, 4147.0], [28.4, 4150.0], [28.5, 4151.0], [28.6, 4154.0], [28.7, 4155.0], [28.8, 4157.0], [28.9, 4158.0], [29.0, 4159.0], [29.1, 4160.0], [29.2, 4160.0], [29.3, 4161.0], [29.4, 4161.0], [29.5, 4162.0], [29.6, 4163.0], [29.7, 4164.0], [29.8, 4164.0], [29.9, 4164.0], [30.0, 4165.0], [30.1, 4165.0], [30.2, 4166.0], [30.3, 4166.0], [30.4, 4167.0], [30.5, 4168.0], [30.6, 4168.0], [30.7, 4169.0], [30.8, 4169.0], [30.9, 4170.0], [31.0, 4170.0], [31.1, 4172.0], [31.2, 4172.0], [31.3, 4173.0], [31.4, 4175.0], [31.5, 4176.0], [31.6, 4178.0], [31.7, 4178.0], [31.8, 4179.0], [31.9, 4181.0], [32.0, 4182.0], [32.1, 4184.0], [32.2, 4186.0], [32.3, 4188.0], [32.4, 4189.0], [32.5, 4190.0], [32.6, 4190.0], [32.7, 4191.0], [32.8, 4192.0], [32.9, 4193.0], [33.0, 4194.0], [33.1, 4194.0], [33.2, 4195.0], [33.3, 4196.0], [33.4, 4197.0], [33.5, 4198.0], [33.6, 4199.0], [33.7, 4199.0], [33.8, 4201.0], [33.9, 4202.0], [34.0, 4203.0], [34.1, 4204.0], [34.2, 4204.0], [34.3, 4205.0], [34.4, 4206.0], [34.5, 4207.0], [34.6, 4209.0], [34.7, 4210.0], [34.8, 4211.0], [34.9, 4212.0], [35.0, 4212.0], [35.1, 4214.0], [35.2, 4215.0], [35.3, 4217.0], [35.4, 4217.0], [35.5, 4217.0], [35.6, 4218.0], [35.7, 4218.0], [35.8, 4219.0], [35.9, 4220.0], [36.0, 4221.0], [36.1, 4222.0], [36.2, 4223.0], [36.3, 4223.0], [36.4, 4224.0], [36.5, 4225.0], [36.6, 4226.0], [36.7, 4226.0], [36.8, 4227.0], [36.9, 4228.0], [37.0, 4229.0], [37.1, 4229.0], [37.2, 4230.0], [37.3, 4231.0], [37.4, 4232.0], [37.5, 4234.0], [37.6, 4234.0], [37.7, 4235.0], [37.8, 4235.0], [37.9, 4236.0], [38.0, 4237.0], [38.1, 4238.0], [38.2, 4240.0], [38.3, 4241.0], [38.4, 4242.0], [38.5, 4242.0], [38.6, 4244.0], [38.7, 4244.0], [38.8, 4245.0], [38.9, 4245.0], [39.0, 4246.0], [39.1, 4248.0], [39.2, 4248.0], [39.3, 4249.0], [39.4, 4250.0], [39.5, 4251.0], [39.6, 4252.0], [39.7, 4253.0], [39.8, 4253.0], [39.9, 4253.0], [40.0, 4254.0], [40.1, 4254.0], [40.2, 4255.0], [40.3, 4255.0], [40.4, 4256.0], [40.5, 4257.0], [40.6, 4257.0], [40.7, 4258.0], [40.8, 4258.0], [40.9, 4259.0], [41.0, 4259.0], [41.1, 4260.0], [41.2, 4260.0], [41.3, 4261.0], [41.4, 4262.0], [41.5, 4263.0], [41.6, 4263.0], [41.7, 4264.0], [41.8, 4265.0], [41.9, 4265.0], [42.0, 4266.0], [42.1, 4267.0], [42.2, 4267.0], [42.3, 4268.0], [42.4, 4269.0], [42.5, 4270.0], [42.6, 4270.0], [42.7, 4271.0], [42.8, 4271.0], [42.9, 4271.0], [43.0, 4272.0], [43.1, 4272.0], [43.2, 4273.0], [43.3, 4274.0], [43.4, 4274.0], [43.5, 4275.0], [43.6, 4275.0], [43.7, 4275.0], [43.8, 4276.0], [43.9, 4276.0], [44.0, 4276.0], [44.1, 4277.0], [44.2, 4277.0], [44.3, 4278.0], [44.4, 4279.0], [44.5, 4279.0], [44.6, 4280.0], [44.7, 4280.0], [44.8, 4280.0], [44.9, 4281.0], [45.0, 4282.0], [45.1, 4282.0], [45.2, 4283.0], [45.3, 4283.0], [45.4, 4284.0], [45.5, 4284.0], [45.6, 4285.0], [45.7, 4285.0], [45.8, 4286.0], [45.9, 4287.0], [46.0, 4287.0], [46.1, 4288.0], [46.2, 4288.0], [46.3, 4289.0], [46.4, 4289.0], [46.5, 4290.0], [46.6, 4290.0], [46.7, 4291.0], [46.8, 4291.0], [46.9, 4292.0], [47.0, 4292.0], [47.1, 4293.0], [47.2, 4294.0], [47.3, 4294.0], [47.4, 4294.0], [47.5, 4295.0], [47.6, 4295.0], [47.7, 4295.0], [47.8, 4296.0], [47.9, 4296.0], [48.0, 4297.0], [48.1, 4298.0], [48.2, 4299.0], [48.3, 4299.0], [48.4, 4299.0], [48.5, 4300.0], [48.6, 4300.0], [48.7, 4300.0], [48.8, 4301.0], [48.9, 4301.0], [49.0, 4302.0], [49.1, 4303.0], [49.2, 4303.0], [49.3, 4303.0], [49.4, 4304.0], [49.5, 4304.0], [49.6, 4306.0], [49.7, 4306.0], [49.8, 4307.0], [49.9, 4308.0], [50.0, 4309.0], [50.1, 4309.0], [50.2, 4311.0], [50.3, 4311.0], [50.4, 4312.0], [50.5, 4313.0], [50.6, 4314.0], [50.7, 4314.0], [50.8, 4314.0], [50.9, 4315.0], [51.0, 4316.0], [51.1, 4316.0], [51.2, 4316.0], [51.3, 4317.0], [51.4, 4317.0], [51.5, 4318.0], [51.6, 4318.0], [51.7, 4319.0], [51.8, 4320.0], [51.9, 4320.0], [52.0, 4320.0], [52.1, 4321.0], [52.2, 4321.0], [52.3, 4321.0], [52.4, 4322.0], [52.5, 4322.0], [52.6, 4322.0], [52.7, 4322.0], [52.8, 4322.0], [52.9, 4323.0], [53.0, 4323.0], [53.1, 4324.0], [53.2, 4324.0], [53.3, 4324.0], [53.4, 4325.0], [53.5, 4326.0], [53.6, 4326.0], [53.7, 4326.0], [53.8, 4327.0], [53.9, 4327.0], [54.0, 4328.0], [54.1, 4328.0], [54.2, 4329.0], [54.3, 4329.0], [54.4, 4329.0], [54.5, 4330.0], [54.6, 4330.0], [54.7, 4330.0], [54.8, 4331.0], [54.9, 4331.0], [55.0, 4332.0], [55.1, 4332.0], [55.2, 4333.0], [55.3, 4333.0], [55.4, 4334.0], [55.5, 4334.0], [55.6, 4335.0], [55.7, 4336.0], [55.8, 4336.0], [55.9, 4336.0], [56.0, 4337.0], [56.1, 4337.0], [56.2, 4338.0], [56.3, 4338.0], [56.4, 4339.0], [56.5, 4339.0], [56.6, 4340.0], [56.7, 4341.0], [56.8, 4341.0], [56.9, 4342.0], [57.0, 4342.0], [57.1, 4343.0], [57.2, 4343.0], [57.3, 4344.0], [57.4, 4344.0], [57.5, 4344.0], [57.6, 4345.0], [57.7, 4346.0], [57.8, 4346.0], [57.9, 4347.0], [58.0, 4347.0], [58.1, 4348.0], [58.2, 4349.0], [58.3, 4350.0], [58.4, 4350.0], [58.5, 4351.0], [58.6, 4351.0], [58.7, 4352.0], [58.8, 4352.0], [58.9, 4353.0], [59.0, 4354.0], [59.1, 4355.0], [59.2, 4356.0], [59.3, 4356.0], [59.4, 4357.0], [59.5, 4358.0], [59.6, 4358.0], [59.7, 4358.0], [59.8, 4359.0], [59.9, 4359.0], [60.0, 4359.0], [60.1, 4360.0], [60.2, 4361.0], [60.3, 4361.0], [60.4, 4362.0], [60.5, 4362.0], [60.6, 4363.0], [60.7, 4363.0], [60.8, 4364.0], [60.9, 4365.0], [61.0, 4365.0], [61.1, 4366.0], [61.2, 4367.0], [61.3, 4368.0], [61.4, 4368.0], [61.5, 4369.0], [61.6, 4370.0], [61.7, 4371.0], [61.8, 4371.0], [61.9, 4372.0], [62.0, 4373.0], [62.1, 4373.0], [62.2, 4374.0], [62.3, 4374.0], [62.4, 4375.0], [62.5, 4376.0], [62.6, 4377.0], [62.7, 4378.0], [62.8, 4379.0], [62.9, 4379.0], [63.0, 4380.0], [63.1, 4381.0], [63.2, 4382.0], [63.3, 4382.0], [63.4, 4383.0], [63.5, 4383.0], [63.6, 4384.0], [63.7, 4386.0], [63.8, 4386.0], [63.9, 4387.0], [64.0, 4388.0], [64.1, 4389.0], [64.2, 4389.0], [64.3, 4391.0], [64.4, 4392.0], [64.5, 4393.0], [64.6, 4393.0], [64.7, 4394.0], [64.8, 4395.0], [64.9, 4396.0], [65.0, 4396.0], [65.1, 4396.0], [65.2, 4397.0], [65.3, 4397.0], [65.4, 4398.0], [65.5, 4398.0], [65.6, 4399.0], [65.7, 4400.0], [65.8, 4400.0], [65.9, 4401.0], [66.0, 4401.0], [66.1, 4402.0], [66.2, 4402.0], [66.3, 4402.0], [66.4, 4403.0], [66.5, 4403.0], [66.6, 4404.0], [66.7, 4405.0], [66.8, 4405.0], [66.9, 4406.0], [67.0, 4407.0], [67.1, 4408.0], [67.2, 4408.0], [67.3, 4409.0], [67.4, 4409.0], [67.5, 4409.0], [67.6, 4410.0], [67.7, 4410.0], [67.8, 4411.0], [67.9, 4411.0], [68.0, 4411.0], [68.1, 4412.0], [68.2, 4412.0], [68.3, 4413.0], [68.4, 4413.0], [68.5, 4414.0], [68.6, 4414.0], [68.7, 4416.0], [68.8, 4416.0], [68.9, 4417.0], [69.0, 4418.0], [69.1, 4418.0], [69.2, 4419.0], [69.3, 4419.0], [69.4, 4420.0], [69.5, 4420.0], [69.6, 4421.0], [69.7, 4421.0], [69.8, 4422.0], [69.9, 4422.0], [70.0, 4423.0], [70.1, 4423.0], [70.2, 4423.0], [70.3, 4424.0], [70.4, 4425.0], [70.5, 4425.0], [70.6, 4425.0], [70.7, 4426.0], [70.8, 4427.0], [70.9, 4427.0], [71.0, 4427.0], [71.1, 4428.0], [71.2, 4429.0], [71.3, 4429.0], [71.4, 4430.0], [71.5, 4431.0], [71.6, 4431.0], [71.7, 4431.0], [71.8, 4431.0], [71.9, 4432.0], [72.0, 4432.0], [72.1, 4432.0], [72.2, 4433.0], [72.3, 4433.0], [72.4, 4434.0], [72.5, 4435.0], [72.6, 4436.0], [72.7, 4437.0], [72.8, 4438.0], [72.9, 4439.0], [73.0, 4440.0], [73.1, 4440.0], [73.2, 4441.0], [73.3, 4442.0], [73.4, 4442.0], [73.5, 4443.0], [73.6, 4443.0], [73.7, 4444.0], [73.8, 4445.0], [73.9, 4445.0], [74.0, 4446.0], [74.1, 4447.0], [74.2, 4448.0], [74.3, 4449.0], [74.4, 4450.0], [74.5, 4451.0], [74.6, 4451.0], [74.7, 4453.0], [74.8, 4454.0], [74.9, 4456.0], [75.0, 4458.0], [75.1, 4459.0], [75.2, 4460.0], [75.3, 4461.0], [75.4, 4462.0], [75.5, 4463.0], [75.6, 4466.0], [75.7, 4466.0], [75.8, 4468.0], [75.9, 4470.0], [76.0, 4471.0], [76.1, 4472.0], [76.2, 4473.0], [76.3, 4474.0], [76.4, 4475.0], [76.5, 4476.0], [76.6, 4477.0], [76.7, 4477.0], [76.8, 4478.0], [76.9, 4479.0], [77.0, 4480.0], [77.1, 4480.0], [77.2, 4481.0], [77.3, 4482.0], [77.4, 4483.0], [77.5, 4484.0], [77.6, 4484.0], [77.7, 4485.0], [77.8, 4485.0], [77.9, 4486.0], [78.0, 4487.0], [78.1, 4488.0], [78.2, 4488.0], [78.3, 4489.0], [78.4, 4490.0], [78.5, 4491.0], [78.6, 4491.0], [78.7, 4492.0], [78.8, 4493.0], [78.9, 4493.0], [79.0, 4494.0], [79.1, 4495.0], [79.2, 4498.0], [79.3, 4499.0], [79.4, 4501.0], [79.5, 4504.0], [79.6, 4505.0], [79.7, 4507.0], [79.8, 4507.0], [79.9, 4509.0], [80.0, 4511.0], [80.1, 4513.0], [80.2, 4516.0], [80.3, 4522.0], [80.4, 4526.0], [80.5, 4529.0], [80.6, 4531.0], [80.7, 4534.0], [80.8, 4536.0], [80.9, 4538.0], [81.0, 4540.0], [81.1, 4543.0], [81.2, 4546.0], [81.3, 4548.0], [81.4, 4550.0], [81.5, 4553.0], [81.6, 4557.0], [81.7, 4560.0], [81.8, 4565.0], [81.9, 4566.0], [82.0, 4570.0], [82.1, 4573.0], [82.2, 4575.0], [82.3, 4578.0], [82.4, 4579.0], [82.5, 4583.0], [82.6, 4585.0], [82.7, 4589.0], [82.8, 4591.0], [82.9, 4595.0], [83.0, 4599.0], [83.1, 4603.0], [83.2, 4605.0], [83.3, 4606.0], [83.4, 4610.0], [83.5, 4613.0], [83.6, 4617.0], [83.7, 4619.0], [83.8, 4621.0], [83.9, 4623.0], [84.0, 4628.0], [84.1, 4637.0], [84.2, 4646.0], [84.3, 4650.0], [84.4, 4657.0], [84.5, 4663.0], [84.6, 4666.0], [84.7, 4668.0], [84.8, 4672.0], [84.9, 4678.0], [85.0, 4687.0], [85.1, 4689.0], [85.2, 4691.0], [85.3, 4692.0], [85.4, 4695.0], [85.5, 4701.0], [85.6, 4705.0], [85.7, 4708.0], [85.8, 4713.0], [85.9, 4722.0], [86.0, 4731.0], [86.1, 4734.0], [86.2, 4737.0], [86.3, 4742.0], [86.4, 4768.0], [86.5, 4813.0], [86.6, 4823.0], [86.7, 4832.0], [86.8, 4843.0], [86.9, 4848.0], [87.0, 4860.0], [87.1, 4871.0], [87.2, 4876.0], [87.3, 4888.0], [87.4, 4893.0], [87.5, 4900.0], [87.6, 4917.0], [87.7, 4931.0], [87.8, 4935.0], [87.9, 4940.0], [88.0, 4948.0], [88.1, 4957.0], [88.2, 4959.0], [88.3, 4964.0], [88.4, 4969.0], [88.5, 4984.0], [88.6, 5000.0], [88.7, 5004.0], [88.8, 5009.0], [88.9, 5020.0], [89.0, 5025.0], [89.1, 5030.0], [89.2, 5035.0], [89.3, 5038.0], [89.4, 5044.0], [89.5, 5053.0], [89.6, 5063.0], [89.7, 5066.0], [89.8, 5070.0], [89.9, 5094.0], [90.0, 5111.0], [90.1, 5117.0], [90.2, 5121.0], [90.3, 5126.0], [90.4, 5133.0], [90.5, 5136.0], [90.6, 5140.0], [90.7, 5143.0], [90.8, 5148.0], [90.9, 5149.0], [91.0, 5151.0], [91.1, 5154.0], [91.2, 5160.0], [91.3, 5167.0], [91.4, 5169.0], [91.5, 5178.0], [91.6, 5184.0], [91.7, 5190.0], [91.8, 5193.0], [91.9, 5196.0], [92.0, 5203.0], [92.1, 5211.0], [92.2, 5220.0], [92.3, 5227.0], [92.4, 5247.0], [92.5, 5302.0], [92.6, 5320.0], [92.7, 5328.0], [92.8, 5337.0], [92.9, 5340.0], [93.0, 5352.0], [93.1, 5361.0], [93.2, 5373.0], [93.3, 5382.0], [93.4, 5399.0], [93.5, 5416.0], [93.6, 5428.0], [93.7, 5458.0], [93.8, 5463.0], [93.9, 5472.0], [94.0, 5480.0], [94.1, 5485.0], [94.2, 5495.0], [94.3, 5501.0], [94.4, 5507.0], [94.5, 5515.0], [94.6, 5519.0], [94.7, 5522.0], [94.8, 5528.0], [94.9, 5535.0], [95.0, 5538.0], [95.1, 5550.0], [95.2, 5556.0], [95.3, 5558.0], [95.4, 5563.0], [95.5, 5566.0], [95.6, 5570.0], [95.7, 5573.0], [95.8, 5585.0], [95.9, 5600.0], [96.0, 5607.0], [96.1, 5612.0], [96.2, 5621.0], [96.3, 5631.0], [96.4, 5638.0], [96.5, 5647.0], [96.6, 5659.0], [96.7, 5667.0], [96.8, 5696.0], [96.9, 5700.0], [97.0, 5714.0], [97.1, 5725.0], [97.2, 5733.0], [97.3, 5744.0], [97.4, 5750.0], [97.5, 5757.0], [97.6, 5765.0], [97.7, 5786.0], [97.8, 5801.0], [97.9, 5811.0], [98.0, 5822.0], [98.1, 5841.0], [98.2, 5848.0], [98.3, 5949.0], [98.4, 5993.0], [98.5, 6228.0], [98.6, 6251.0], [98.7, 6309.0], [98.8, 6343.0], [98.9, 6393.0], [99.0, 6425.0], [99.1, 6463.0], [99.2, 6497.0], [99.3, 6518.0], [99.4, 6538.0], [99.5, 6557.0], [99.6, 6603.0], [99.7, 6635.0], [99.8, 6678.0], [99.9, 6687.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 863.0, "series": [{"data": [[0.0, 4.0], [600.0, 19.0], [700.0, 25.0], [800.0, 6.0], [900.0, 4.0], [1000.0, 1.0], [1100.0, 4.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [1700.0, 85.0], [1800.0, 44.0], [1900.0, 27.0], [2000.0, 1.0], [2100.0, 13.0], [2300.0, 48.0], [2200.0, 9.0], [2400.0, 61.0], [2500.0, 82.0], [2600.0, 88.0], [2700.0, 102.0], [2800.0, 98.0], [2900.0, 23.0], [3000.0, 25.0], [3100.0, 57.0], [3200.0, 88.0], [3300.0, 8.0], [3400.0, 5.0], [3500.0, 15.0], [3600.0, 43.0], [3700.0, 33.0], [3800.0, 24.0], [3900.0, 14.0], [4000.0, 92.0], [4100.0, 367.0], [4200.0, 734.0], [4300.0, 863.0], [4400.0, 682.0], [4500.0, 185.0], [4600.0, 124.0], [4700.0, 50.0], [4800.0, 50.0], [4900.0, 55.0], [5000.0, 66.0], [5100.0, 102.0], [5300.0, 46.0], [5200.0, 27.0], [5400.0, 44.0], [5500.0, 80.0], [5600.0, 49.0], [5700.0, 46.0], [5800.0, 23.0], [6000.0, 3.0], [5900.0, 8.0], [6200.0, 11.0], [6300.0, 12.0], [6400.0, 15.0], [6600.0, 16.0], [6500.0, 18.0], [6700.0, 4.0], [100.0, 17.0], [200.0, 71.0], [300.0, 68.0], [400.0, 10.0], [500.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 65.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2576.0, "series": [{"data": [[0.0, 170.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 65.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2189.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2576.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2364.163399999994, "minX": 1.69977744E12, "maxY": 2364.163399999994, "series": [{"data": [[1.69977744E12, 2364.163399999994]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977744E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.0, "minX": 1.0, "maxY": 6788.0, "series": [{"data": [[2.0, 6753.0], [3.0, 5802.0], [4.0, 5780.0], [5.0, 5912.0], [6.0, 5786.0], [7.0, 6687.0], [9.0, 6297.0], [11.0, 6709.0], [18.0, 34.0], [119.0, 5822.0], [121.0, 120.21052631578951], [143.0, 5528.0], [142.0, 5958.930769230771], [151.0, 5545.0], [150.0, 6465.0], [149.0, 5623.0], [148.0, 5505.0], [147.0, 5589.0], [146.0, 5552.0], [145.0, 5659.0], [144.0, 5641.0], [159.0, 5600.0], [158.0, 6419.0], [157.0, 5536.0], [156.0, 5513.5], [154.0, 6425.0], [153.0, 5654.0], [152.0, 6432.0], [166.0, 5473.0], [165.0, 5602.0], [164.0, 5548.0], [162.0, 5480.0], [161.0, 5496.0], [160.0, 5607.0], [175.0, 6341.0], [174.0, 5556.0], [173.0, 5578.0], [172.0, 5458.0], [171.0, 5572.0], [169.0, 5557.0], [168.0, 5517.5], [183.0, 6393.0], [182.0, 5573.0], [181.0, 5981.0], [179.0, 5518.0], [178.0, 5556.0], [177.0, 6343.0], [176.0, 5521.0], [191.0, 5878.0], [189.0, 5537.0], [188.0, 6347.0], [187.0, 5515.0], [186.0, 6338.0], [185.0, 5543.0], [184.0, 6411.0], [195.0, 415.5652173913044], [194.0, 334.92647058823525], [196.0, 1223.0], [197.0, 1408.4], [199.0, 5561.0], [198.0, 5522.0], [193.0, 5520.0], [192.0, 6394.0], [205.0, 5511.0], [204.0, 5506.0], [203.0, 5535.0], [202.0, 5512.0], [201.0, 5504.5], [215.0, 5498.0], [214.0, 6208.0], [213.0, 5496.0], [212.0, 6361.0], [211.0, 5383.0], [210.0, 5516.0], [209.0, 6345.0], [208.0, 5729.666666666667], [223.0, 5428.0], [222.0, 5485.5], [220.0, 5488.0], [219.0, 5499.0], [218.0, 6272.5], [216.0, 5370.0], [231.0, 5472.0], [229.0, 6312.0], [228.0, 5398.0], [227.0, 5473.0], [226.0, 5364.0], [224.0, 6317.0], [239.0, 6245.0], [238.0, 6228.5], [236.0, 6309.0], [235.0, 5462.0], [234.0, 5436.0], [233.0, 5440.0], [232.0, 5464.0], [247.0, 2945.0], [246.0, 5337.0], [245.0, 5413.0], [243.0, 5463.5], [241.0, 5367.0], [240.0, 5353.0], [255.0, 5320.0], [254.0, 5314.0], [253.0, 6281.0], [252.0, 5471.0], [251.0, 5337.0], [250.0, 5805.0], [248.0, 6234.0], [269.0, 5274.0], [260.0, 2053.333333333333], [261.0, 2077.0], [271.0, 5360.0], [268.0, 5369.0], [259.0, 5339.0], [258.0, 5400.0], [257.0, 5842.0], [263.0, 5316.0], [262.0, 5295.0], [267.0, 5416.0], [266.0, 5373.0], [265.0, 5379.0], [264.0, 5382.0], [281.0, 5352.0], [282.0, 5339.0], [280.0, 5316.0], [279.0, 5340.0], [278.0, 5337.0], [277.0, 5326.0], [276.0, 5336.0], [274.0, 5288.5], [272.0, 5346.0], [399.0, 5826.0], [398.0, 5034.0], [397.0, 5103.0], [396.0, 5090.0], [395.0, 5106.0], [393.0, 5150.0], [392.0, 5241.172727272726], [403.0, 5078.0], [414.0, 5059.0], [415.0, 5792.0], [412.0, 5066.0], [409.0, 5043.0], [408.0, 5065.0], [407.0, 5070.0], [406.0, 5426.5], [404.0, 5073.0], [402.0, 5065.0], [401.0, 5073.0], [400.0, 5070.0], [430.0, 5038.0], [431.0, 4963.0], [429.0, 5041.0], [428.0, 5020.0], [427.0, 5047.0], [426.0, 5034.0], [425.0, 5044.0], [424.0, 4988.0], [423.0, 5055.0], [416.0, 5063.0], [419.0, 5003.0], [418.0, 5424.5], [422.0, 5044.0], [420.0, 5038.0], [446.0, 5001.0], [444.0, 5005.0], [435.0, 5030.0], [434.0, 5030.0], [432.0, 5036.0], [443.0, 5786.0], [442.0, 5021.0], [441.0, 5027.0], [440.0, 5025.0], [439.0, 5025.0], [438.0, 5025.0], [437.0, 5030.0], [436.0, 5034.0], [462.0, 4988.0], [463.0, 4974.0], [461.0, 4992.0], [460.0, 5757.0], [459.0, 5762.0], [458.0, 5760.0], [457.0, 5000.0], [456.0, 5766.0], [455.0, 5725.0], [448.0, 5008.5], [450.0, 5014.0], [449.0, 5742.0], [454.0, 5764.0], [453.0, 5771.0], [452.0, 5428.0], [478.0, 5717.0], [479.0, 5724.0], [477.0, 5725.0], [476.0, 5724.0], [475.0, 4889.5], [473.0, 4895.0], [472.0, 5733.0], [471.0, 5628.0], [464.0, 5750.0], [488.0, 4878.0], [492.0, 5696.0], [483.0, 5047.25], [491.0, 4862.0], [490.0, 4874.0], [489.0, 4875.0], [487.0, 4878.0], [486.0, 5659.0], [485.0, 4823.0], [484.0, 5714.0], [636.0, 4557.0], [634.0, 4914.57042253521], [650.0, 4537.0], [648.0, 5473.0], [646.0, 4553.0], [644.0, 4552.0], [640.0, 5352.0], [678.0, 698.5], [692.0, 635.0], [694.0, 4538.0], [690.0, 654.0], [686.0, 668.0], [684.0, 681.0], [682.0, 679.5], [680.0, 684.0], [732.0, 577.0], [730.0, 506.0], [706.0, 4535.0], [738.0, 523.0], [764.0, 2835.5], [736.0, 4599.0], [750.0, 4505.0], [748.0, 4512.0], [746.0, 4585.0], [752.0, 4511.333333333333], [756.0, 4516.8], [758.0, 4485.0], [766.0, 3036.0], [762.0, 2647.5], [760.0, 4481.0], [742.0, 4460.0], [794.0, 729.5], [798.0, 686.0], [784.0, 737.0], [786.0, 742.0], [788.0, 1116.0], [796.0, 701.0], [792.0, 714.0], [774.0, 2998.5], [772.0, 2808.0], [770.0, 2637.0], [768.0, 2639.5], [782.0, 745.0], [780.0, 3179.0], [778.0, 5417.0], [776.0, 2598.5], [790.0, 714.0], [824.0, 4391.0], [830.0, 4494.0], [818.0, 4459.5], [826.0, 4491.0], [806.0, 4428.0], [804.0, 4422.0], [814.0, 4371.0], [812.0, 4374.0], [808.0, 4499.0], [822.0, 4484.5], [856.0, 4402.0], [860.0, 4473.0], [848.0, 4388.0], [858.0, 4436.0], [832.0, 4459.0], [836.0, 4492.0], [838.0, 4378.0], [846.0, 4405.0], [844.0, 4402.5], [842.0, 4359.0], [840.0, 4356.0], [852.0, 4387.5], [850.0, 4379.666666666667], [894.0, 4441.0], [880.0, 4355.0], [892.0, 4409.0], [890.0, 4408.0], [876.0, 4359.0], [886.0, 4355.0], [884.0, 4358.0], [912.0, 4343.0], [916.0, 4358.833333333333], [898.0, 4473.0], [902.0, 4336.0], [908.0, 4435.5], [904.0, 4381.5], [1272.0, 4357.0], [1268.0, 4398.0], [1264.0, 4286.0], [1260.0, 4405.0], [1332.0, 4332.666666666667], [1320.0, 4427.0], [1292.0, 4395.5], [1288.0, 4405.0], [1280.0, 4332.5], [1296.0, 4380.333333333333], [1324.0, 4430.0], [1312.0, 4296.0], [1400.0, 4275.0], [1376.0, 4433.666666666667], [1380.0, 4315.0], [1384.0, 4412.0], [1404.0, 4293.0], [1396.0, 4283.0], [1392.0, 4343.0], [1344.0, 4363.0], [1348.0, 4428.0], [1352.0, 4411.0], [1356.0, 4537.5], [1368.0, 4290.0], [1388.0, 4373.5], [1464.0, 4274.0], [1468.0, 4267.0], [1440.0, 4275.0], [1444.0, 4431.0], [1448.0, 4437.0], [1456.0, 4261.0], [1420.0, 4364.333333333333], [1416.0, 4411.0], [1412.0, 4300.5], [1408.0, 4341.0], [1436.0, 4272.0], [1432.0, 4320.666666666667], [1428.0, 4341.0], [1528.0, 4433.0], [1532.0, 4383.0], [1504.0, 4419.0], [1508.0, 4364.333333333333], [1512.0, 4337.0], [1524.0, 4340.0], [1520.0, 4423.0], [1500.0, 4429.25], [1496.0, 4408.5], [1492.0, 4386.0], [1488.0, 4362.0], [1516.0, 4399.0], [1544.0, 4582.0], [1560.0, 4572.0], [1536.0, 4420.0], [1548.0, 4432.0], [1740.0, 4840.0], [1764.0, 4135.0], [1736.0, 4049.0], [1732.0, 4964.0], [1772.0, 4302.0], [1768.0, 4164.0], [1760.0, 4156.0], [1748.0, 5008.0], [1744.0, 5011.0], [1844.0, 4317.0], [1852.0, 4294.0], [1828.0, 4356.0], [1848.0, 4292.0], [1840.0, 4260.333333333333], [1804.0, 4120.0], [1800.0, 4125.0], [1820.0, 4142.0], [1816.0, 4133.0], [1812.0, 4131.5], [1808.0, 4122.0], [1836.0, 4095.0], [1864.0, 4324.0], [1896.0, 4287.0], [1860.0, 4303.0], [1856.0, 4289.0], [1880.0, 4327.0], [1876.0, 4303.0], [1872.0, 4320.0], [1900.0, 4329.0], [1892.0, 4958.0], [1888.0, 4928.5], [1968.0, 4065.0], [1976.0, 4150.5], [1952.0, 4073.0], [1956.0, 4077.0], [1980.0, 4232.5], [1972.0, 4233.0], [1920.0, 4320.5], [1932.0, 4283.0], [1948.0, 4066.0], [1944.0, 4280.4], [1964.0, 4053.0], [1992.0, 4271.0], [2024.0, 4257.5], [2020.0, 4237.0], [1996.0, 4277.0], [1988.0, 4245.0], [1984.0, 4290.0], [2012.0, 4237.0], [2008.0, 4284.0], [2004.0, 4242.0], [2000.0, 4273.0], [2112.0, 4208.5], [2128.0, 4170.5], [2120.0, 4187.5], [2096.0, 4173.0], [2064.0, 4230.0], [2712.0, 4328.0], [2792.0, 4300.0], [2760.0, 4273.0], [2808.0, 4320.0], [2752.0, 4362.0], [2704.0, 4441.0], [2696.0, 4372.0], [2688.0, 4371.5], [2744.0, 4294.0], [2728.0, 4331.0], [2720.0, 4348.0], [2776.0, 4290.666666666667], [2768.0, 4260.0], [2840.0, 4380.0], [2936.0, 4306.0], [2928.0, 4401.0], [2912.0, 4438.5], [2872.0, 4322.0], [2864.0, 4313.5], [2856.0, 4355.666666666667], [2848.0, 4376.5], [2904.0, 4337.5], [2896.0, 4261.0], [2888.0, 4300.0], [2880.0, 4312.0], [2952.0, 4235.0], [3064.0, 4307.0], [3024.0, 4335.0], [2944.0, 4272.0], [2960.0, 4253.5], [2968.0, 4317.5], [3000.0, 4344.0], [2992.0, 4338.0], [2984.0, 4333.5], [3136.0, 4288.0], [3168.0, 4355.0], [3096.0, 4338.5], [3088.0, 4340.0], [3072.0, 4346.0], [3272.0, 4245.0], [3264.0, 4196.0], [3280.0, 4266.0], [3312.0, 4236.0], [3216.0, 4272.5], [3256.0, 4193.0], [3248.0, 4224.0], [3288.0, 4275.0], [3424.0, 4197.0], [3432.0, 4166.5], [3400.0, 4211.0], [3416.0, 4217.0], [3408.0, 4208.0], [3352.0, 4175.0], [3344.0, 4227.0], [3384.0, 4245.666666666667], [3360.0, 4300.0], [3456.0, 4233.0], [3680.0, 1793.6666666666667], [3600.0, 1743.0], [3648.0, 1785.25], [3696.0, 1875.0], [3624.0, 3818.0], [3616.0, 3901.0], [3632.0, 3813.0], [3640.0, 3775.0], [3824.0, 4613.0], [3816.0, 4621.5], [3768.0, 4713.0], [3808.0, 3376.0], [3792.0, 4663.0], [3784.0, 4678.0], [3776.0, 4704.333333333333], [3800.0, 4653.0], [3960.0, 2971.0], [3976.0, 4170.0], [3968.0, 4191.0], [4144.0, 2462.0], [4176.0, 2357.0], [4160.0, 3040.5], [4544.0, 2491.0], [4528.0, 2531.0], [4352.0, 3026.561983471075], [4464.0, 2570.5], [4448.0, 2674.0], [4432.0, 2697.714285714286], [4416.0, 2563.0], [4560.0, 2450.0], [4480.0, 2610.5], [4496.0, 2523.0], [4512.0, 2563.0], [4592.0, 2351.0], [4576.0, 2393.0], [4608.0, 1908.6666666666667], [4193.0, 2299.0], [4145.0, 2452.0], [4177.0, 2334.0], [4513.0, 2559.0], [4529.0, 2528.0], [4497.0, 2615.0], [4545.0, 2483.0], [4385.0, 2743.0], [4465.0, 2658.0], [4449.0, 2663.0], [4561.0, 2470.0], [4577.0, 2387.0], [4641.0, 2024.0], [2121.0, 4162.0], [2113.0, 4203.0], [2105.0, 4179.0], [2089.0, 4157.0], [2073.0, 4229.0], [2689.0, 4383.583333333333], [2697.0, 4451.0], [2737.0, 4333.0], [2729.0, 4331.0], [2721.0, 4347.0], [2777.0, 4247.333333333333], [2769.0, 4264.0], [2761.0, 4273.0], [2753.0, 4260.0], [2929.0, 4263.5], [2905.0, 4229.0], [2889.0, 4303.0], [2881.0, 4307.0], [2921.0, 4407.0], [2913.0, 4405.333333333333], [2841.0, 4398.0], [2833.0, 4397.0], [2825.0, 4292.0], [2873.0, 4320.0], [2857.0, 4361.0], [2849.0, 4385.5], [2961.0, 4295.0], [3025.0, 4407.5], [3017.0, 4411.0], [3057.0, 4302.333333333333], [2953.0, 4266.5], [3001.0, 4343.0], [2993.0, 4347.0], [2985.0, 4328.0], [2977.0, 4271.666666666667], [3033.0, 4268.25], [3169.0, 4230.0], [3193.0, 4235.0], [3185.0, 4208.0], [3177.0, 4289.0], [3089.0, 4341.0], [3081.0, 4265.0], [3073.0, 4283.0], [3129.0, 4202.0], [3121.0, 4204.0], [3105.0, 4196.0], [3321.0, 4283.0], [3265.0, 4204.0], [3281.0, 4263.0], [3289.0, 4272.333333333333], [3297.0, 4314.5], [3225.0, 4260.0], [3217.0, 4264.0], [3209.0, 4201.0], [3201.0, 4253.0], [3257.0, 4195.5], [3241.0, 4275.5], [3449.0, 4230.0], [3441.0, 4184.0], [3393.0, 4214.0], [3401.0, 4188.0], [3417.0, 4199.0], [3353.0, 4194.333333333333], [3345.0, 4165.0], [3337.0, 4238.5], [3329.0, 4200.333333333333], [3457.0, 4226.0], [3689.0, 1805.6666666666667], [3681.0, 1797.8999999999999], [3697.0, 1879.0], [3641.0, 3843.0], [3633.0, 3812.0], [3625.0, 3890.0], [3617.0, 3899.0], [3769.0, 4709.0], [3817.0, 3367.0], [3793.0, 4664.0], [3785.0, 4671.0], [3801.0, 4653.0], [3833.0, 3288.5], [3961.0, 4209.0], [3953.0, 3308.652173913043], [3985.0, 2884.0], [3977.0, 4171.0], [3969.0, 2943.0], [4146.0, 3687.0], [4178.0, 2343.0], [4162.0, 2397.0], [4594.0, 2350.5], [4546.0, 2484.0], [4530.0, 2526.0], [4466.0, 2643.25], [4562.0, 2457.0], [4498.0, 2608.0], [4514.0, 2558.0], [4578.0, 2388.0], [4195.0, 2296.5], [4131.0, 3062.972602739725], [4179.0, 2329.0], [4163.0, 2394.0], [4531.0, 2144.0], [4515.0, 2550.0], [4499.0, 2599.0], [4547.0, 2137.0], [4563.0, 2456.0], [4579.0, 2378.0], [1277.0, 4303.666666666667], [1269.0, 4277.0], [1265.0, 4411.0], [1333.0, 4384.0], [1341.0, 4382.333333333333], [1313.0, 4351.0], [1317.0, 4340.333333333333], [1321.0, 4429.0], [1337.0, 4352.0], [1289.0, 4264.5], [1285.0, 4411.0], [1281.0, 4356.333333333333], [1309.0, 4347.0], [1305.0, 4307.0], [1301.0, 4280.5], [1405.0, 4377.0], [1401.0, 4325.0], [1377.0, 4294.0], [1397.0, 4254.0], [1393.0, 4411.0], [1369.0, 4356.333333333333], [1349.0, 4413.0], [1389.0, 4329.0], [1385.0, 4414.0], [1417.0, 4336.5], [1469.0, 4296.5], [1465.0, 4265.0], [1461.0, 4267.0], [1437.0, 4279.0], [1409.0, 4396.0], [1413.0, 4402.0], [1421.0, 4346.0], [1433.0, 4271.0], [1429.0, 4263.0], [1425.0, 4367.0], [1453.0, 4517.0], [1449.0, 4441.0], [1477.0, 4278.0], [1521.0, 4320.0], [1505.0, 4381.0], [1529.0, 4392.0], [1473.0, 4412.0], [1481.0, 4284.0], [1485.0, 4357.5], [1501.0, 4313.0], [1497.0, 4326.0], [1493.0, 4388.0], [1489.0, 4396.0], [1517.0, 4422.0], [1513.0, 4431.0], [1561.0, 4460.0], [1565.0, 1367.0], [1557.0, 4505.5], [1553.0, 4578.5], [1545.0, 4420.0], [1541.0, 4525.666666666667], [1777.0, 4201.333333333333], [1769.0, 4146.0], [1737.0, 4843.0], [1733.0, 5031.0], [1745.0, 4962.0], [1773.0, 4225.5], [1761.0, 4157.0], [1849.0, 4329.0], [1825.0, 4363.5], [1829.0, 4346.0], [1833.0, 4225.0], [1853.0, 4347.0], [1845.0, 4254.333333333333], [1841.0, 4202.333333333333], [1797.0, 4234.0], [1801.0, 4116.5], [1805.0, 4110.0], [1821.0, 4373.0], [1817.0, 4136.0], [1813.0, 4134.0], [1809.0, 4125.0], [1837.0, 4350.0], [1861.0, 4311.0], [1893.0, 4893.0], [1869.0, 4325.0], [1865.0, 4331.5], [1857.0, 4297.5], [1897.0, 4322.0], [1889.0, 4963.0], [1885.0, 4314.25], [1881.0, 4296.0], [1877.0, 4910.0], [1873.0, 4344.0], [1929.0, 4299.0], [1977.0, 4234.0], [1969.0, 4061.0], [1933.0, 4281.0], [1925.0, 4313.0], [1921.0, 4309.0], [1945.0, 4875.0], [1941.0, 4275.5], [1937.0, 4280.0], [1965.0, 4057.0], [1961.0, 4147.0], [1957.0, 4075.0], [2021.0, 4237.0], [2017.0, 4254.0], [1997.0, 4278.0], [1993.0, 4279.0], [1985.0, 4289.0], [2009.0, 4274.0], [2114.0, 4199.0], [2122.0, 4160.0], [2058.0, 4238.0], [2066.0, 4227.0], [2106.0, 4151.0], [2098.0, 4188.0], [2074.0, 4239.0], [2786.0, 4421.0], [2802.0, 4300.0], [2714.0, 4328.5], [2706.0, 4435.0], [2690.0, 4297.0], [2778.0, 4297.5], [2754.0, 4393.0], [2746.0, 4293.0], [2722.0, 4347.0], [2938.0, 4305.5], [2906.0, 4232.0], [2898.0, 4263.0], [2882.0, 4316.0], [2930.0, 4328.0], [2922.0, 4440.0], [2818.0, 4396.0], [2866.0, 4328.0], [2858.0, 4428.0], [2850.0, 4397.0], [2962.0, 4241.0], [3066.0, 4288.0], [3018.0, 4403.0], [3058.0, 4318.0], [2946.0, 4252.666666666667], [2970.0, 4313.0], [3002.0, 4370.0], [2986.0, 4288.0], [2978.0, 4280.0], [3082.0, 4286.666666666667], [3170.0, 4381.0], [3138.0, 4290.0], [3098.0, 4326.333333333333], [3074.0, 4346.0], [3130.0, 4213.5], [3122.0, 4199.0], [3114.0, 4295.0], [3322.0, 4280.0], [3266.0, 4242.5], [3274.0, 4250.0], [3282.0, 4265.0], [3314.0, 4160.0], [3258.0, 4203.0], [3250.0, 4298.75], [3242.0, 4186.0], [3234.0, 4227.0], [3290.0, 4326.0], [3450.0, 4181.6], [3434.0, 4161.5], [3402.0, 4202.0], [3442.0, 4187.0], [3426.0, 4205.0], [3386.0, 4223.5], [3362.0, 4301.0], [3458.0, 4222.0], [3690.0, 1817.6666666666667], [3610.0, 1887.0], [3650.0, 1767.5], [3698.0, 1826.7142857142856], [3666.0, 1818.0], [3626.0, 3890.0], [3618.0, 3901.0], [3634.0, 5040.0], [3826.0, 3366.5], [3834.0, 4539.0], [3810.0, 4621.5], [3786.0, 4673.0], [3778.0, 4692.5], [3794.0, 4666.0], [3802.0, 4651.0], [3962.0, 2956.0], [3954.0, 2965.0], [3978.0, 2911.0], [3970.0, 2929.0], [4132.0, 2493.0], [4148.0, 3059.0], [4180.0, 3583.0], [4164.0, 2400.0], [4532.0, 2512.0], [4452.0, 2612.0], [4500.0, 2522.0], [4516.0, 2552.0], [4580.0, 2374.0], [4644.0, 1789.5], [4612.0, 1970.0], [4133.0, 2494.0], [4149.0, 3677.0], [4181.0, 2320.0], [4165.0, 2411.0], [4565.0, 2458.0], [4501.0, 2606.0], [4517.0, 2550.0], [4533.0, 2510.0], [4405.0, 2749.6451612903224], [4469.0, 2651.5], [4453.0, 2664.0], [4549.0, 2469.0], [4581.0, 2376.0], [4645.0, 1834.0], [2115.0, 4196.5], [2075.0, 4227.5], [2123.0, 4170.0], [2107.0, 4560.0], [2091.0, 4169.0], [2067.0, 4247.0], [2059.0, 4235.0], [2331.0, 1462.0], [2683.0, 4434.2433734939805], [2715.0, 4358.0], [2763.0, 4358.5], [2811.0, 4371.0], [2803.0, 4304.0], [2707.0, 4435.0], [2699.0, 4450.0], [2691.0, 4379.0], [2755.0, 4236.333333333333], [2739.0, 4383.0], [2731.0, 4333.0], [2923.0, 4366.333333333333], [2931.0, 4395.0], [2899.0, 4275.0], [2891.0, 4398.0], [2915.0, 4394.75], [2835.0, 4382.0], [2843.0, 4381.5], [2859.0, 4399.0], [2851.0, 4381.0], [2955.0, 4272.5], [3067.0, 4305.0], [3011.0, 4404.0], [2971.0, 4294.0], [2947.0, 4252.0], [3003.0, 4356.5], [2995.0, 4348.5], [2987.0, 4417.0], [3195.0, 4251.0], [3147.0, 4298.0], [3155.0, 4363.0], [3163.0, 4358.0], [3187.0, 4247.0], [3179.0, 4204.0], [3091.0, 4326.0], [3083.0, 4307.0], [3123.0, 4217.0], [3107.0, 4294.0], [3211.0, 4267.0], [3267.0, 4247.0], [3291.0, 4326.0], [3227.0, 4259.0], [3203.0, 4389.0], [3259.0, 4189.0], [3251.0, 4218.0], [3243.0, 4274.0], [3443.0, 4231.0], [3435.0, 4168.0], [3403.0, 4195.5], [3419.0, 4228.0], [3451.0, 4234.0], [3427.0, 4167.0], [3355.0, 4234.0], [3347.0, 4190.0], [3339.0, 4199.0], [3331.0, 4222.0], [3363.0, 4296.0], [3459.0, 4205.0], [3651.0, 1790.3333333333333], [3643.0, 1768.875], [3667.0, 1780.0], [3675.0, 1782.0], [3635.0, 5035.0], [3627.0, 3887.0], [3619.0, 3896.0], [3827.0, 4612.0], [3819.0, 3994.0], [3811.0, 3371.0], [3771.0, 4710.5], [3787.0, 4667.0], [3779.0, 4699.0], [3795.0, 4666.0], [3803.0, 4646.0], [3963.0, 4209.0], [3979.0, 2917.0], [4134.0, 2491.0], [4150.0, 2436.0], [4182.0, 2325.0], [4166.0, 2375.0], [4566.0, 2454.5], [4534.0, 2516.0], [4406.0, 2697.5], [4470.0, 2650.0], [4454.0, 2657.0], [4550.0, 2471.0], [4486.0, 2569.0], [4502.0, 2594.0], [4582.0, 2369.0], [4630.0, 1801.0], [4135.0, 3725.0], [4183.0, 2313.0], [4151.0, 2415.0], [4199.0, 2523.75], [4167.0, 2382.0], [4503.0, 2593.0], [4599.0, 1891.0], [4519.0, 2549.5], [4535.0, 2500.0], [4423.0, 2701.714285714286], [4551.0, 2468.0], [4647.0, 1791.0], [639.0, 5443.5], [637.0, 4548.0], [635.0, 4570.0], [645.0, 5324.0], [651.0, 5333.0], [667.0, 5328.0], [649.0, 4548.0], [647.0, 4545.0], [643.0, 4552.0], [641.0, 5326.0], [689.0, 657.6666666666666], [691.0, 642.5], [677.0, 703.0], [679.0, 690.0], [685.0, 683.0], [683.0, 683.0], [731.0, 771.5], [739.0, 2725.0], [749.0, 4584.5], [747.0, 4547.5], [745.0, 4448.0], [767.0, 3036.5], [753.0, 4529.0], [755.0, 4526.0], [759.0, 4476.0], [765.0, 2709.5], [763.0, 2665.5], [761.0, 2973.0], [743.0, 4446.0], [741.0, 4515.2531645569625], [797.0, 1076.0], [799.0, 684.0], [785.0, 751.0], [787.0, 741.0], [789.0, 725.0], [795.0, 713.0], [775.0, 3089.5], [773.0, 3081.0], [771.0, 2683.5], [769.0, 3150.5], [783.0, 755.0], [781.0, 762.0], [779.0, 2365.333333333333], [777.0, 2598.0], [791.0, 715.0], [829.0, 4427.5], [831.0, 4366.0], [817.0, 4398.0], [819.0, 4429.333333333333], [827.0, 4362.0], [825.0, 4349.0], [805.0, 4497.0], [803.0, 4384.0], [815.0, 4365.5], [811.0, 4379.0], [809.0, 4380.0], [821.0, 4368.0], [859.0, 4439.0], [861.0, 4495.6], [857.0, 4446.666666666667], [847.0, 4449.333333333333], [833.0, 4366.0], [835.0, 4431.5], [837.0, 4365.5], [843.0, 4381.0], [841.0, 4370.5], [855.0, 4425.25], [853.0, 4393.0], [881.0, 4360.0], [895.0, 4411.0], [883.0, 4350.0], [893.0, 4438.5], [889.0, 4378.666666666667], [877.0, 4362.0], [887.0, 4344.5], [885.0, 4339.0], [897.0, 4474.25], [915.0, 4348.666666666667], [913.0, 4414.5], [911.0, 4409.0], [901.0, 4332.0], [899.0, 4339.0], [903.0, 4410.0], [909.0, 4467.0], [907.0, 4433.0], [905.0, 4339.0], [1278.0, 4272.5], [1274.0, 4289.0], [1266.0, 4282.0], [1258.0, 4429.0], [1286.0, 4332.0], [1342.0, 4350.0], [1334.0, 4425.0], [1290.0, 4272.0], [1282.0, 4371.5], [1310.0, 4296.0], [1306.0, 4310.666666666667], [1302.0, 4290.0], [1298.0, 4276.333333333333], [1326.0, 4331.0], [1322.0, 4304.0], [1314.0, 4300.0], [1402.0, 4270.0], [1406.0, 4341.5], [1378.0, 4299.0], [1382.0, 4338.0], [1386.0, 4413.0], [1398.0, 4321.0], [1394.0, 4332.5], [1374.0, 4333.0], [1346.0, 4403.5], [1350.0, 4409.0], [1354.0, 4324.0], [1358.0, 4375.666666666667], [1366.0, 4436.0], [1390.0, 4341.0], [1462.0, 4284.0], [1458.0, 4265.0], [1470.0, 4334.0], [1442.0, 4417.25], [1446.0, 4438.0], [1466.0, 4414.0], [1418.0, 4416.5], [1414.0, 4265.0], [1410.0, 4264.0], [1438.0, 4433.0], [1434.0, 4269.0], [1430.0, 4339.5], [1426.0, 4401.0], [1454.0, 4251.0], [1450.0, 4603.0], [1526.0, 4424.0], [1534.0, 4428.0], [1506.0, 4420.0], [1510.0, 4381.333333333333], [1522.0, 4411.0], [1486.0, 4387.0], [1482.0, 4327.0], [1478.0, 4344.5], [1474.0, 4290.666666666667], [1494.0, 4394.0], [1490.0, 4361.5], [1514.0, 4408.0], [1558.0, 4590.0], [1554.0, 4533.0], [1550.0, 4427.5], [1546.0, 4502.5], [1542.0, 4328.0], [1538.0, 4518.0], [1742.0, 4949.5], [1778.0, 4300.0], [1738.0, 4844.0], [1734.0, 4848.0], [1774.0, 4313.0], [1762.0, 4160.0], [1758.0, 4204.666666666667], [1746.0, 5008.0], [1842.0, 4145.0], [1854.0, 4337.0], [1826.0, 4364.0], [1834.0, 4348.5], [1850.0, 4292.0], [1806.0, 4102.0], [1802.0, 4128.0], [1798.0, 4316.0], [1822.0, 4372.0], [1818.0, 4143.0], [1814.0, 4136.0], [1810.0, 4131.0], [1838.0, 4244.0], [1910.0, 4330.0], [1918.0, 4309.5], [1870.0, 4306.0], [1862.0, 4358.0], [1886.0, 4967.0], [1882.0, 4314.0], [1874.0, 4323.5], [1902.0, 4302.0], [1898.0, 4339.0], [1894.0, 4300.0], [1890.0, 4896.0], [1978.0, 4234.0], [1982.0, 4267.0], [1954.0, 4149.0], [1958.0, 4081.0], [1974.0, 4222.5], [1970.0, 4155.5], [1950.0, 4076.5], [1922.0, 4306.0], [1930.0, 4308.0], [1926.0, 4314.0], [1934.0, 4279.0], [1946.0, 4869.0], [1942.0, 4286.0], [1938.0, 4300.0], [1962.0, 4056.0], [1990.0, 4291.0], [2014.0, 4245.5], [2026.0, 4245.5], [1998.0, 4261.0], [1994.0, 4271.0], [1986.0, 4292.5], [2010.0, 4283.5], [2006.0, 4242.0], [2002.0, 4259.5], [2124.0, 4161.5], [2100.0, 4163.0], [2076.0, 4216.5], [2068.0, 4221.0], [2684.0, 4367.0], [2716.0, 4319.0], [2804.0, 4344.0], [2796.0, 4316.0], [2788.0, 4360.0], [2708.0, 4349.5], [2700.0, 4452.0], [2692.0, 4354.297872340427], [2748.0, 4297.0], [2772.0, 4278.0], [2940.0, 4277.5], [2908.0, 4285.5], [2932.0, 4393.0], [2836.0, 4379.0], [2828.0, 4383.0], [2844.0, 4371.0], [2900.0, 4273.0], [3060.0, 4275.333333333333], [2972.0, 4320.0], [3012.0, 4410.0], [3020.0, 4408.0], [3068.0, 4286.0], [3052.0, 4248.0], [3044.0, 4422.0], [3004.0, 4368.0], [2948.0, 4237.0], [2956.0, 4260.0], [2964.0, 4277.5], [2996.0, 4357.0], [2980.0, 4317.333333333333], [3172.0, 4312.0], [3180.0, 4234.0], [3140.0, 4290.0], [3148.0, 4365.0], [3100.0, 4366.5], [3092.0, 4334.0], [3084.0, 4331.0], [3076.0, 4307.5], [3132.0, 4235.0], [3164.0, 4359.0], [3316.0, 4163.0], [3324.0, 4263.75], [3276.0, 4262.5], [3284.0, 4274.0], [3204.0, 4199.0], [3220.0, 4231.0], [3260.0, 4189.0], [3252.0, 4218.0], [3244.0, 4211.0], [3236.0, 4314.0], [3292.0, 4341.0], [3452.0, 4231.0], [3396.0, 4188.0], [3404.0, 4209.0], [3420.0, 4176.0], [3436.0, 4167.333333333333], [3348.0, 4201.666666666667], [3340.0, 4191.5], [3332.0, 4192.5], [3388.0, 4191.0], [3380.0, 4224.0], [3364.0, 4295.0], [3692.0, 1797.0], [3612.0, 4152.675496688744], [3668.0, 1818.0], [3628.0, 3820.0], [3620.0, 3897.0], [3636.0, 5029.0], [3644.0, 1748.0], [3820.0, 4617.0], [3828.0, 3360.0], [3812.0, 4624.0], [3788.0, 4672.0], [3780.0, 4687.0], [3796.0, 4657.0], [3804.0, 4649.0], [3836.0, 3907.0], [3964.0, 2958.0], [3956.0, 3606.0], [3980.0, 2904.0], [3972.0, 3553.5], [4200.0, 2200.0], [4136.0, 2476.0], [4152.0, 2428.0], [4184.0, 2324.0], [4168.0, 3612.0], [4552.0, 2472.0], [4520.0, 2536.0], [4536.0, 2509.0], [4408.0, 2721.1874999999995], [4360.0, 2873.2173913043475], [4472.0, 2653.0], [4568.0, 2452.5], [4488.0, 2660.0], [4600.0, 1883.0], [4584.0, 2360.0], [4616.0, 2048.333333333333], [4632.0, 1955.0], [4201.0, 2198.0], [4137.0, 2476.0], [4153.0, 2412.0], [4185.0, 2325.0], [4169.0, 2375.0], [4585.0, 2355.0], [4505.0, 2553.0], [4521.0, 2548.0], [4489.0, 2607.0], [4537.0, 2502.0], [4409.0, 2613.0], [4377.0, 2780.75], [4553.0, 2469.0], [4569.0, 2113.5], [4601.0, 1868.0], [4649.0, 1844.3333333333333], [2117.0, 4192.333333333333], [2109.0, 4187.333333333333], [2101.0, 4171.666666666667], [2077.0, 4818.0], [2685.0, 4371.444444444444], [2813.0, 4372.0], [2765.0, 4291.0], [2797.0, 4302.0], [2709.0, 4314.0], [2701.0, 4449.0], [2693.0, 4339.333333333334], [2733.0, 4404.5], [2781.0, 4297.5], [2757.0, 4396.0], [2941.0, 4246.5], [2917.0, 4420.0], [2909.0, 4270.0], [2901.0, 4331.0], [2893.0, 4331.333333333333], [2885.0, 4296.0], [2925.0, 4375.666666666667], [2845.0, 4382.0], [2837.0, 4392.0], [2869.0, 4324.0], [2861.0, 4375.0], [2853.0, 4380.666666666667], [3069.0, 4316.333333333333], [3029.0, 4341.5], [3061.0, 4316.0], [2949.0, 4323.0], [3005.0, 4374.666666666667], [2997.0, 4341.0], [3037.0, 4253.5], [3197.0, 4276.0], [3189.0, 4244.0], [3157.0, 4362.0], [3093.0, 4374.5], [3085.0, 4318.0], [3133.0, 4231.0], [3125.0, 4218.0], [3309.0, 4165.0], [3325.0, 2972.0], [3269.0, 4252.0], [3277.0, 4259.0], [3285.0, 4271.5], [3317.0, 4168.5], [3229.0, 4256.0], [3261.0, 4260.0], [3253.0, 4218.0], [3245.0, 4243.5], [3237.0, 4270.78431372549], [3293.0, 4318.0], [3445.0, 4192.5], [3397.0, 4204.0], [3405.0, 4205.0], [3453.0, 4235.0], [3437.0, 4242.0], [3357.0, 4309.5], [3341.0, 4194.0], [3333.0, 4225.0], [3389.0, 4257.0], [3365.0, 4310.0], [3461.0, 4203.0], [3613.0, 4018.0], [3597.0, 1749.0], [3669.0, 1849.5], [3637.0, 5025.0], [3621.0, 3893.0], [3837.0, 4531.0], [3813.0, 4623.0], [3781.0, 3451.0], [3797.0, 3409.0], [3805.0, 3389.0], [3965.0, 2958.0], [3973.0, 4176.0], [4138.0, 2469.0], [4202.0, 2194.0], [4170.0, 2366.0], [4554.0, 2462.0], [4522.0, 2544.0], [4538.0, 2503.0], [4410.0, 2730.0], [4394.0, 2850.75], [4474.0, 2636.25], [4490.0, 2655.166666666667], [4506.0, 2585.0], [4602.0, 1834.0], [4634.0, 1915.5555555555554], [4139.0, 2469.0], [4155.0, 2421.0], [4187.0, 2319.0], [4171.0, 2356.0], [4507.0, 2494.0], [4603.0, 1821.0], [4523.0, 2538.0], [4539.0, 2502.0], [4411.0, 2654.0], [4475.0, 2567.0], [4443.0, 2697.8], [4587.0, 2352.5], [4571.0, 2426.0], [4651.0, 1846.3333333333333], [1279.0, 4266.0], [1275.0, 4265.0], [1271.0, 4277.0], [1267.0, 4400.0], [1339.0, 4371.666666666667], [1343.0, 4396.0], [1315.0, 4415.0], [1319.0, 4301.0], [1335.0, 4427.0], [1331.0, 4350.5], [1295.0, 4340.0], [1291.0, 4267.0], [1283.0, 4338.0], [1311.0, 4294.5], [1307.0, 4294.0], [1303.0, 4308.0], [1299.0, 4402.0], [1327.0, 4283.0], [1323.0, 4301.0], [1379.0, 4299.0], [1395.0, 4430.0], [1347.0, 4365.0], [1351.0, 4404.0], [1383.0, 4343.0], [1459.0, 4261.0], [1471.0, 4273.5], [1447.0, 4437.5], [1443.0, 4432.5], [1467.0, 4278.5], [1411.0, 4333.0], [1415.0, 4340.0], [1423.0, 4386.666666666667], [1435.0, 4272.0], [1455.0, 4474.333333333333], [1451.0, 4415.0], [1527.0, 4320.0], [1531.0, 4425.0], [1535.0, 4415.5], [1511.0, 4419.0], [1507.0, 4393.0], [1523.0, 4426.0], [1503.0, 4352.5], [1475.0, 4279.0], [1479.0, 4283.0], [1483.0, 4389.0], [1491.0, 4402.0], [1519.0, 4425.0], [1515.0, 4362.333333333333], [1539.0, 4406.0], [1559.0, 4573.0], [1555.0, 4572.0], [1547.0, 4422.0], [1543.0, 4572.0], [1743.0, 4833.0], [1779.0, 4310.25], [1739.0, 4958.0], [1735.0, 4962.0], [1731.0, 4410.802222222224], [1747.0, 4944.0], [1775.0, 4155.0], [1771.0, 4143.0], [1767.0, 4155.333333333333], [1763.0, 4150.5], [1851.0, 4292.0], [1855.0, 4311.0], [1827.0, 4359.0], [1831.0, 4350.5], [1847.0, 4287.0], [1843.0, 4233.5], [1823.0, 4363.0], [1803.0, 4120.0], [1807.0, 4112.0], [1819.0, 4140.0], [1815.0, 4130.0], [1839.0, 4140.0], [1911.0, 4277.0], [1871.0, 4318.5], [1919.0, 4289.0], [1867.0, 4366.0], [1859.0, 4298.0], [1903.0, 4337.0], [1899.0, 4334.0], [1891.0, 4911.0], [1875.0, 4333.0], [1931.0, 4305.5], [1935.0, 4303.333333333333], [1959.0, 4080.0], [1971.0, 4141.5], [1927.0, 4288.0], [1923.0, 4316.0], [1947.0, 4875.0], [1939.0, 4276.0], [1967.0, 4060.0], [1955.0, 4074.0], [1991.0, 4290.0], [2019.0, 4229.0], [2027.0, 4240.0], [2023.0, 4249.0], [1987.0, 4290.0], [2015.0, 4236.0], [2011.0, 4254.0], [2007.0, 4241.0], [2003.0, 4244.0], [2126.0, 4169.0], [2118.0, 4184.0], [2110.0, 4203.0], [2062.0, 4255.714285714285], [2070.0, 4222.5], [2078.0, 4813.0], [2686.0, 4380.000000000001], [2718.0, 4356.0], [2702.0, 4444.0], [2774.0, 4296.0], [2766.0, 4249.0], [2758.0, 4334.0], [2750.0, 4297.0], [2734.0, 4383.0], [2886.0, 4431.0], [2942.0, 4225.0], [2910.0, 4271.0], [2902.0, 4428.0], [2894.0, 4253.0], [2934.0, 4278.5], [2918.0, 4443.0], [2846.0, 4380.0], [2838.0, 4389.0], [2822.0, 4377.0], [2862.0, 4295.0], [2854.0, 4403.5], [3062.0, 4291.0], [3070.0, 4283.0], [3022.0, 4411.0], [3038.0, 4306.0], [3030.0, 4364.75], [3046.0, 4240.0], [2950.0, 4315.5], [2958.0, 4278.0], [2966.0, 4276.5], [2974.0, 4275.333333333333], [2998.0, 4362.0], [2990.0, 4339.666666666667], [2982.0, 4293.0], [3102.0, 4393.0], [3086.0, 4320.0], [3190.0, 4230.5], [3198.0, 4253.0], [3142.0, 4234.0], [3182.0, 4228.0], [3094.0, 4344.666666666667], [3078.0, 4289.0], [3134.0, 4205.0], [3126.0, 4218.0], [3118.0, 4194.0], [3110.0, 4191.0], [3150.0, 4366.0], [3270.0, 4249.0], [3278.0, 4284.5], [3326.0, 4156.0], [3262.0, 4263.0], [3206.0, 4254.0], [3230.0, 4241.5], [3222.0, 4373.0], [3254.0, 4205.0], [3238.0, 4231.5], [3294.0, 4316.0], [3430.0, 4170.0], [3446.0, 4184.0], [3454.0, 4237.0], [3398.0, 4203.333333333333], [3406.0, 4208.0], [3422.0, 4232.5], [3358.0, 4300.0], [3350.0, 4186.25], [3342.0, 4196.0], [3390.0, 4201.0], [3382.0, 4199.5], [3366.0, 4309.0], [3462.0, 4202.0], [3614.0, 4009.0], [3646.0, 1756.0], [3598.0, 1735.0], [3678.0, 1781.0], [3630.0, 3212.3333333333335], [3638.0, 2425.3333333333335], [3822.0, 4617.5], [3758.0, 1827.0], [3766.0, 4089.592], [3814.0, 4623.0], [3838.0, 3264.0], [3782.0, 4682.0], [3806.0, 4631.0], [3830.0, 4605.0], [3966.0, 4195.0], [3958.0, 3592.0], [3982.0, 3527.5], [3974.0, 2924.0], [4108.0, 1755.0], [4188.0, 2316.0], [4140.0, 3709.0], [4156.0, 2415.0], [4604.0, 1884.0], [4556.0, 2466.0], [4524.0, 2535.0], [4540.0, 2488.0], [4412.0, 2649.0], [4364.0, 2858.75], [4492.0, 2657.0], [4508.0, 2490.0], [4588.0, 2349.0], [4572.0, 2423.0], [4620.0, 1856.3333333333333], [4652.0, 1798.0], [4141.0, 2446.0], [4157.0, 2404.0], [4189.0, 2293.0], [4173.0, 2367.0], [4557.0, 2469.5], [4525.0, 2536.0], [4509.0, 2559.0], [4413.0, 2555.0], [4477.0, 2660.0], [4445.0, 2665.375], [4429.0, 2639.0], [4605.0, 2133.181818181818], [4589.0, 2348.0], [4573.0, 2405.0], [4637.0, 1785.5], [2127.0, 4188.666666666667], [2111.0, 4212.0], [2071.0, 4220.0], [2063.0, 4230.666666666668], [2687.0, 4365.8], [2719.0, 4350.0], [2799.0, 4363.0], [2711.0, 4331.0], [2703.0, 4442.0], [2695.0, 4371.5], [2783.0, 4194.0], [2775.0, 4275.0], [2767.0, 4261.0], [2751.0, 4300.5], [2743.0, 4379.0], [2727.0, 4330.0], [2943.0, 4270.0], [2911.0, 4322.0], [2903.0, 4336.0], [2887.0, 4298.0], [2935.0, 4363.0], [2927.0, 4402.0], [2919.0, 4423.333333333333], [2879.0, 4435.0], [2831.0, 4316.0], [2839.0, 4370.0], [2847.0, 4389.0], [2967.0, 4274.5], [3047.0, 4241.0], [3015.0, 4424.0], [2975.0, 4284.0], [2959.0, 4234.0], [2951.0, 4313.0], [3007.0, 4375.666666666667], [2999.0, 4365.0], [2991.0, 4353.0], [3039.0, 4396.0], [3175.0, 4291.5], [3183.0, 4230.0], [3143.0, 4377.0], [3151.0, 4353.0], [3159.0, 4359.0], [3103.0, 4195.0], [3095.0, 4386.0], [3079.0, 4343.0], [3119.0, 4203.0], [3271.0, 4248.0], [3279.0, 4281.5], [3327.0, 4158.0], [3287.0, 4257.0], [3319.0, 4179.0], [3255.0, 4202.0], [3247.0, 4278.5], [3295.0, 4317.0], [3439.0, 4175.666666666667], [3455.0, 4227.0], [3407.0, 4227.0], [3447.0, 4190.0], [3431.0, 4191.0], [3343.0, 4193.5], [3335.0, 4178.0], [3383.0, 4204.0], [3367.0, 4304.0], [3495.0, 1744.0], [3599.0, 1748.0], [3615.0, 4007.0], [3647.0, 1752.0], [3687.0, 1753.0], [3639.0, 4900.0], [3631.0, 3881.0], [3623.0, 3856.5], [3775.0, 4704.0], [3823.0, 4616.0], [3767.0, 4731.0], [3791.0, 4669.0], [3783.0, 4691.0], [3799.0, 4648.5], [3807.0, 4630.0], [3831.0, 4605.0], [3967.0, 2950.0], [3959.0, 2971.0], [3983.0, 2900.0], [3975.0, 4173.0], [4142.0, 2452.0], [4158.0, 3660.0], [4174.0, 2355.0], [4558.0, 2458.0], [4414.0, 2645.0], [4526.0, 2534.0], [4542.0, 2500.0], [4478.0, 2647.0], [4446.0, 2627.0], [4510.0, 2576.0], [4590.0, 2347.0], [4574.0, 2400.0], [4638.0, 1787.0], [4143.0, 2439.0], [4175.0, 3596.0], [4607.0, 1870.0], [4527.0, 2531.0], [4511.0, 2571.0], [4495.0, 2621.3333333333335], [4543.0, 2493.0], [4415.0, 2643.0], [4447.0, 2700.0], [4559.0, 2458.0], [4591.0, 2347.0], [4575.0, 2392.0], [4623.0, 1883.0], [4639.0, 1787.5], [1.0, 6788.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2364.162399999996, 3993.7024000000015]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4652.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5454.0, "minX": 1.69977744E12, "maxY": 818500.5333333333, "series": [{"data": [[1.69977744E12, 818500.5333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69977744E12, 5454.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977744E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3993.7024000000015, "minX": 1.69977744E12, "maxY": 3993.7024000000015, "series": [{"data": [[1.69977744E12, 3993.7024000000015]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977744E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1752.5029999999992, "minX": 1.69977744E12, "maxY": 1752.5029999999992, "series": [{"data": [[1.69977744E12, 1752.5029999999992]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977744E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2858.892000000011, "minX": 1.69977744E12, "maxY": 2858.892000000011, "series": [{"data": [[1.69977744E12, 2858.892000000011]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977744E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.69977744E12, "maxY": 6788.0, "series": [{"data": [[1.69977744E12, 6788.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69977744E12, 5555.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69977744E12, 6575.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69977744E12, 5763.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69977744E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69977744E12, 3896.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977744E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 259.0, "minX": 85.0, "maxY": 5723.5, "series": [{"data": [[266.0, 2472.0], [275.0, 2813.0], [2265.0, 4598.5], [548.0, 5183.0], [85.0, 1777.0], [354.0, 3180.0], [182.0, 5723.5], [792.0, 4140.0], [116.0, 259.0], [117.0, 635.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2265.0, 4347.0], [548.0, 4533.5], [792.0, 4237.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2265.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 85.0, "maxY": 5722.5, "series": [{"data": [[266.0, 2441.5], [275.0, 2810.0], [2265.0, 4583.0], [548.0, 5181.0], [85.0, 1777.0], [354.0, 3175.5], [182.0, 5722.5], [792.0, 4025.0], [116.0, 258.5], [117.0, 634.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2265.0, 0.0], [548.0, 0.0], [792.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2265.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69977744E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69977744E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977744E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 40.4, "minX": 1.69977744E12, "maxY": 42.93333333333333, "series": [{"data": [[1.69977744E12, 40.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69977744E12, 42.93333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977744E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 40.4, "minX": 1.69977744E12, "maxY": 42.93333333333333, "series": [{"data": [[1.69977744E12, 40.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69977744E12, 42.93333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977744E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 40.4, "minX": 1.69977744E12, "maxY": 42.93333333333333, "series": [{"data": [[1.69977744E12, 40.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69977744E12, 42.93333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977744E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

