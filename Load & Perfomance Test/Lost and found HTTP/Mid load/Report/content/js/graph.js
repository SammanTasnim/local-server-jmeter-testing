/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "maxY": 3512.0, "series": [{"data": [[0.0, 20.0], [0.1, 21.0], [0.2, 31.0], [0.3, 31.0], [0.4, 45.0], [0.5, 49.0], [0.6, 53.0], [0.7, 60.0], [0.8, 60.0], [0.9, 60.0], [1.0, 62.0], [1.1, 66.0], [1.2, 66.0], [1.3, 67.0], [1.4, 68.0], [1.5, 68.0], [1.6, 68.0], [1.7, 69.0], [1.8, 70.0], [1.9, 73.0], [2.0, 74.0], [2.1, 74.0], [2.2, 76.0], [2.3, 77.0], [2.4, 77.0], [2.5, 78.0], [2.6, 79.0], [2.7, 81.0], [2.8, 81.0], [2.9, 88.0], [3.0, 90.0], [3.1, 100.0], [3.2, 126.0], [3.3, 142.0], [3.4, 170.0], [3.5, 175.0], [3.6, 180.0], [3.7, 181.0], [3.8, 191.0], [3.9, 197.0], [4.0, 198.0], [4.1, 200.0], [4.2, 204.0], [4.3, 208.0], [4.4, 216.0], [4.5, 218.0], [4.6, 220.0], [4.7, 220.0], [4.8, 221.0], [4.9, 238.0], [5.0, 239.0], [5.1, 242.0], [5.2, 243.0], [5.3, 254.0], [5.4, 257.0], [5.5, 269.0], [5.6, 273.0], [5.7, 279.0], [5.8, 281.0], [5.9, 282.0], [6.0, 292.0], [6.1, 306.0], [6.2, 310.0], [6.3, 310.0], [6.4, 316.0], [6.5, 334.0], [6.6, 335.0], [6.7, 336.0], [6.8, 339.0], [6.9, 350.0], [7.0, 356.0], [7.1, 366.0], [7.2, 367.0], [7.3, 380.0], [7.4, 398.0], [7.5, 406.0], [7.6, 409.0], [7.7, 412.0], [7.8, 413.0], [7.9, 427.0], [8.0, 433.0], [8.1, 444.0], [8.2, 447.0], [8.3, 451.0], [8.4, 451.0], [8.5, 462.0], [8.6, 465.0], [8.7, 479.0], [8.8, 488.0], [8.9, 494.0], [9.0, 496.0], [9.1, 535.0], [9.2, 587.0], [9.3, 589.0], [9.4, 590.0], [9.5, 593.0], [9.6, 593.0], [9.7, 594.0], [9.8, 595.0], [9.9, 596.0], [10.0, 597.0], [10.1, 599.0], [10.2, 602.0], [10.3, 609.0], [10.4, 626.0], [10.5, 632.0], [10.6, 632.0], [10.7, 638.0], [10.8, 641.0], [10.9, 652.0], [11.0, 660.0], [11.1, 662.0], [11.2, 663.0], [11.3, 665.0], [11.4, 669.0], [11.5, 673.0], [11.6, 691.0], [11.7, 716.0], [11.8, 717.0], [11.9, 741.0], [12.0, 821.0], [12.1, 825.0], [12.2, 827.0], [12.3, 829.0], [12.4, 829.0], [12.5, 834.0], [12.6, 836.0], [12.7, 838.0], [12.8, 838.0], [12.9, 839.0], [13.0, 840.0], [13.1, 840.0], [13.2, 841.0], [13.3, 843.0], [13.4, 847.0], [13.5, 848.0], [13.6, 848.0], [13.7, 849.0], [13.8, 852.0], [13.9, 853.0], [14.0, 855.0], [14.1, 859.0], [14.2, 859.0], [14.3, 859.0], [14.4, 864.0], [14.5, 868.0], [14.6, 870.0], [14.7, 870.0], [14.8, 870.0], [14.9, 872.0], [15.0, 872.0], [15.1, 873.0], [15.2, 874.0], [15.3, 874.0], [15.4, 874.0], [15.5, 875.0], [15.6, 876.0], [15.7, 876.0], [15.8, 878.0], [15.9, 878.0], [16.0, 882.0], [16.1, 885.0], [16.2, 893.0], [16.3, 894.0], [16.4, 896.0], [16.5, 897.0], [16.6, 898.0], [16.7, 900.0], [16.8, 909.0], [16.9, 911.0], [17.0, 913.0], [17.1, 913.0], [17.2, 914.0], [17.3, 914.0], [17.4, 918.0], [17.5, 925.0], [17.6, 925.0], [17.7, 929.0], [17.8, 932.0], [17.9, 932.0], [18.0, 948.0], [18.1, 948.0], [18.2, 952.0], [18.3, 958.0], [18.4, 960.0], [18.5, 980.0], [18.6, 986.0], [18.7, 988.0], [18.8, 997.0], [18.9, 998.0], [19.0, 999.0], [19.1, 999.0], [19.2, 1004.0], [19.3, 1004.0], [19.4, 1006.0], [19.5, 1006.0], [19.6, 1007.0], [19.7, 1007.0], [19.8, 1008.0], [19.9, 1008.0], [20.0, 1009.0], [20.1, 1009.0], [20.2, 1011.0], [20.3, 1011.0], [20.4, 1011.0], [20.5, 1012.0], [20.6, 1013.0], [20.7, 1013.0], [20.8, 1014.0], [20.9, 1016.0], [21.0, 1016.0], [21.1, 1017.0], [21.2, 1020.0], [21.3, 1021.0], [21.4, 1022.0], [21.5, 1023.0], [21.6, 1025.0], [21.7, 1025.0], [21.8, 1025.0], [21.9, 1025.0], [22.0, 1026.0], [22.1, 1027.0], [22.2, 1028.0], [22.3, 1031.0], [22.4, 1031.0], [22.5, 1031.0], [22.6, 1032.0], [22.7, 1033.0], [22.8, 1035.0], [22.9, 1035.0], [23.0, 1038.0], [23.1, 1040.0], [23.2, 1040.0], [23.3, 1045.0], [23.4, 1047.0], [23.5, 1052.0], [23.6, 1053.0], [23.7, 1055.0], [23.8, 1057.0], [23.9, 1057.0], [24.0, 1059.0], [24.1, 1059.0], [24.2, 1060.0], [24.3, 1062.0], [24.4, 1063.0], [24.5, 1066.0], [24.6, 1066.0], [24.7, 1066.0], [24.8, 1066.0], [24.9, 1068.0], [25.0, 1068.0], [25.1, 1069.0], [25.2, 1071.0], [25.3, 1072.0], [25.4, 1081.0], [25.5, 1088.0], [25.6, 1092.0], [25.7, 1092.0], [25.8, 1095.0], [25.9, 1097.0], [26.0, 1097.0], [26.1, 1098.0], [26.2, 1105.0], [26.3, 1108.0], [26.4, 1110.0], [26.5, 1110.0], [26.6, 1114.0], [26.7, 1124.0], [26.8, 1131.0], [26.9, 1133.0], [27.0, 1146.0], [27.1, 1147.0], [27.2, 1149.0], [27.3, 1154.0], [27.4, 1154.0], [27.5, 1156.0], [27.6, 1159.0], [27.7, 1165.0], [27.8, 1169.0], [27.9, 1170.0], [28.0, 1171.0], [28.1, 1173.0], [28.2, 1177.0], [28.3, 1183.0], [28.4, 1187.0], [28.5, 1188.0], [28.6, 1193.0], [28.7, 1199.0], [28.8, 1200.0], [28.9, 1201.0], [29.0, 1214.0], [29.1, 1225.0], [29.2, 1225.0], [29.3, 1227.0], [29.4, 1232.0], [29.5, 1233.0], [29.6, 1235.0], [29.7, 1245.0], [29.8, 1247.0], [29.9, 1250.0], [30.0, 1252.0], [30.1, 1253.0], [30.2, 1254.0], [30.3, 1278.0], [30.4, 1282.0], [30.5, 1285.0], [30.6, 1290.0], [30.7, 1299.0], [30.8, 1312.0], [30.9, 1332.0], [31.0, 1345.0], [31.1, 1377.0], [31.2, 1383.0], [31.3, 1394.0], [31.4, 1404.0], [31.5, 1411.0], [31.6, 1412.0], [31.7, 1414.0], [31.8, 1418.0], [31.9, 1446.0], [32.0, 1449.0], [32.1, 1451.0], [32.2, 1453.0], [32.3, 1454.0], [32.4, 1456.0], [32.5, 1457.0], [32.6, 1457.0], [32.7, 1458.0], [32.8, 1462.0], [32.9, 1462.0], [33.0, 1463.0], [33.1, 1463.0], [33.2, 1465.0], [33.3, 1469.0], [33.4, 1470.0], [33.5, 1470.0], [33.6, 1471.0], [33.7, 1471.0], [33.8, 1471.0], [33.9, 1473.0], [34.0, 1474.0], [34.1, 1476.0], [34.2, 1478.0], [34.3, 1484.0], [34.4, 1487.0], [34.5, 1487.0], [34.6, 1489.0], [34.7, 1490.0], [34.8, 1497.0], [34.9, 1500.0], [35.0, 1500.0], [35.1, 1502.0], [35.2, 1503.0], [35.3, 1505.0], [35.4, 1506.0], [35.5, 1506.0], [35.6, 1506.0], [35.7, 1508.0], [35.8, 1510.0], [35.9, 1512.0], [36.0, 1514.0], [36.1, 1515.0], [36.2, 1518.0], [36.3, 1518.0], [36.4, 1520.0], [36.5, 1525.0], [36.6, 1529.0], [36.7, 1530.0], [36.8, 1530.0], [36.9, 1530.0], [37.0, 1532.0], [37.1, 1537.0], [37.2, 1541.0], [37.3, 1547.0], [37.4, 1547.0], [37.5, 1548.0], [37.6, 1551.0], [37.7, 1553.0], [37.8, 1556.0], [37.9, 1562.0], [38.0, 1565.0], [38.1, 1566.0], [38.2, 1566.0], [38.3, 1567.0], [38.4, 1570.0], [38.5, 1575.0], [38.6, 1579.0], [38.7, 1581.0], [38.8, 1581.0], [38.9, 1581.0], [39.0, 1583.0], [39.1, 1584.0], [39.2, 1584.0], [39.3, 1585.0], [39.4, 1585.0], [39.5, 1585.0], [39.6, 1586.0], [39.7, 1588.0], [39.8, 1592.0], [39.9, 1592.0], [40.0, 1594.0], [40.1, 1594.0], [40.2, 1595.0], [40.3, 1595.0], [40.4, 1597.0], [40.5, 1602.0], [40.6, 1602.0], [40.7, 1603.0], [40.8, 1606.0], [40.9, 1606.0], [41.0, 1610.0], [41.1, 1610.0], [41.2, 1613.0], [41.3, 1614.0], [41.4, 1616.0], [41.5, 1619.0], [41.6, 1619.0], [41.7, 1621.0], [41.8, 1621.0], [41.9, 1622.0], [42.0, 1623.0], [42.1, 1623.0], [42.2, 1624.0], [42.3, 1624.0], [42.4, 1625.0], [42.5, 1625.0], [42.6, 1625.0], [42.7, 1628.0], [42.8, 1630.0], [42.9, 1631.0], [43.0, 1631.0], [43.1, 1632.0], [43.2, 1634.0], [43.3, 1635.0], [43.4, 1635.0], [43.5, 1638.0], [43.6, 1638.0], [43.7, 1639.0], [43.8, 1639.0], [43.9, 1640.0], [44.0, 1641.0], [44.1, 1641.0], [44.2, 1642.0], [44.3, 1642.0], [44.4, 1643.0], [44.5, 1645.0], [44.6, 1645.0], [44.7, 1646.0], [44.8, 1649.0], [44.9, 1649.0], [45.0, 1650.0], [45.1, 1650.0], [45.2, 1650.0], [45.3, 1651.0], [45.4, 1652.0], [45.5, 1652.0], [45.6, 1653.0], [45.7, 1653.0], [45.8, 1653.0], [45.9, 1653.0], [46.0, 1653.0], [46.1, 1655.0], [46.2, 1656.0], [46.3, 1657.0], [46.4, 1657.0], [46.5, 1657.0], [46.6, 1657.0], [46.7, 1658.0], [46.8, 1658.0], [46.9, 1659.0], [47.0, 1660.0], [47.1, 1660.0], [47.2, 1660.0], [47.3, 1660.0], [47.4, 1661.0], [47.5, 1661.0], [47.6, 1661.0], [47.7, 1661.0], [47.8, 1663.0], [47.9, 1664.0], [48.0, 1665.0], [48.1, 1666.0], [48.2, 1666.0], [48.3, 1666.0], [48.4, 1668.0], [48.5, 1668.0], [48.6, 1668.0], [48.7, 1669.0], [48.8, 1669.0], [48.9, 1670.0], [49.0, 1671.0], [49.1, 1672.0], [49.2, 1672.0], [49.3, 1672.0], [49.4, 1672.0], [49.5, 1673.0], [49.6, 1674.0], [49.7, 1674.0], [49.8, 1675.0], [49.9, 1675.0], [50.0, 1678.0], [50.1, 1679.0], [50.2, 1679.0], [50.3, 1680.0], [50.4, 1680.0], [50.5, 1681.0], [50.6, 1681.0], [50.7, 1682.0], [50.8, 1682.0], [50.9, 1683.0], [51.0, 1684.0], [51.1, 1684.0], [51.2, 1685.0], [51.3, 1685.0], [51.4, 1685.0], [51.5, 1687.0], [51.6, 1688.0], [51.7, 1688.0], [51.8, 1688.0], [51.9, 1690.0], [52.0, 1690.0], [52.1, 1690.0], [52.2, 1690.0], [52.3, 1692.0], [52.4, 1693.0], [52.5, 1693.0], [52.6, 1694.0], [52.7, 1695.0], [52.8, 1695.0], [52.9, 1696.0], [53.0, 1698.0], [53.1, 1701.0], [53.2, 1703.0], [53.3, 1703.0], [53.4, 1707.0], [53.5, 1707.0], [53.6, 1709.0], [53.7, 1711.0], [53.8, 1714.0], [53.9, 1714.0], [54.0, 1715.0], [54.1, 1718.0], [54.2, 1718.0], [54.3, 1718.0], [54.4, 1720.0], [54.5, 1722.0], [54.6, 1723.0], [54.7, 1723.0], [54.8, 1725.0], [54.9, 1726.0], [55.0, 1726.0], [55.1, 1728.0], [55.2, 1728.0], [55.3, 1732.0], [55.4, 1734.0], [55.5, 1734.0], [55.6, 1735.0], [55.7, 1735.0], [55.8, 1737.0], [55.9, 1737.0], [56.0, 1737.0], [56.1, 1738.0], [56.2, 1740.0], [56.3, 1740.0], [56.4, 1742.0], [56.5, 1743.0], [56.6, 1744.0], [56.7, 1744.0], [56.8, 1746.0], [56.9, 1747.0], [57.0, 1748.0], [57.1, 1749.0], [57.2, 1749.0], [57.3, 1749.0], [57.4, 1750.0], [57.5, 1750.0], [57.6, 1752.0], [57.7, 1752.0], [57.8, 1753.0], [57.9, 1754.0], [58.0, 1755.0], [58.1, 1756.0], [58.2, 1756.0], [58.3, 1757.0], [58.4, 1757.0], [58.5, 1758.0], [58.6, 1758.0], [58.7, 1758.0], [58.8, 1759.0], [58.9, 1760.0], [59.0, 1760.0], [59.1, 1762.0], [59.2, 1762.0], [59.3, 1762.0], [59.4, 1763.0], [59.5, 1764.0], [59.6, 1764.0], [59.7, 1765.0], [59.8, 1765.0], [59.9, 1765.0], [60.0, 1766.0], [60.1, 1766.0], [60.2, 1767.0], [60.3, 1768.0], [60.4, 1768.0], [60.5, 1769.0], [60.6, 1769.0], [60.7, 1769.0], [60.8, 1769.0], [60.9, 1769.0], [61.0, 1770.0], [61.1, 1770.0], [61.2, 1770.0], [61.3, 1770.0], [61.4, 1771.0], [61.5, 1772.0], [61.6, 1772.0], [61.7, 1772.0], [61.8, 1774.0], [61.9, 1775.0], [62.0, 1776.0], [62.1, 1776.0], [62.2, 1776.0], [62.3, 1776.0], [62.4, 1776.0], [62.5, 1777.0], [62.6, 1777.0], [62.7, 1777.0], [62.8, 1777.0], [62.9, 1778.0], [63.0, 1778.0], [63.1, 1778.0], [63.2, 1778.0], [63.3, 1778.0], [63.4, 1779.0], [63.5, 1780.0], [63.6, 1781.0], [63.7, 1782.0], [63.8, 1783.0], [63.9, 1783.0], [64.0, 1785.0], [64.1, 1785.0], [64.2, 1785.0], [64.3, 1785.0], [64.4, 1786.0], [64.5, 1786.0], [64.6, 1787.0], [64.7, 1787.0], [64.8, 1787.0], [64.9, 1788.0], [65.0, 1788.0], [65.1, 1789.0], [65.2, 1789.0], [65.3, 1789.0], [65.4, 1789.0], [65.5, 1789.0], [65.6, 1789.0], [65.7, 1789.0], [65.8, 1789.0], [65.9, 1791.0], [66.0, 1791.0], [66.1, 1791.0], [66.2, 1791.0], [66.3, 1791.0], [66.4, 1792.0], [66.5, 1793.0], [66.6, 1794.0], [66.7, 1794.0], [66.8, 1795.0], [66.9, 1796.0], [67.0, 1796.0], [67.1, 1796.0], [67.2, 1798.0], [67.3, 1798.0], [67.4, 1799.0], [67.5, 1799.0], [67.6, 1799.0], [67.7, 1800.0], [67.8, 1801.0], [67.9, 1801.0], [68.0, 1802.0], [68.1, 1802.0], [68.2, 1802.0], [68.3, 1803.0], [68.4, 1803.0], [68.5, 1803.0], [68.6, 1805.0], [68.7, 1806.0], [68.8, 1807.0], [68.9, 1807.0], [69.0, 1807.0], [69.1, 1807.0], [69.2, 1808.0], [69.3, 1809.0], [69.4, 1810.0], [69.5, 1810.0], [69.6, 1810.0], [69.7, 1810.0], [69.8, 1810.0], [69.9, 1811.0], [70.0, 1811.0], [70.1, 1812.0], [70.2, 1812.0], [70.3, 1812.0], [70.4, 1812.0], [70.5, 1813.0], [70.6, 1813.0], [70.7, 1814.0], [70.8, 1814.0], [70.9, 1815.0], [71.0, 1815.0], [71.1, 1816.0], [71.2, 1816.0], [71.3, 1817.0], [71.4, 1818.0], [71.5, 1819.0], [71.6, 1820.0], [71.7, 1821.0], [71.8, 1821.0], [71.9, 1822.0], [72.0, 1822.0], [72.1, 1822.0], [72.2, 1822.0], [72.3, 1823.0], [72.4, 1823.0], [72.5, 1824.0], [72.6, 1824.0], [72.7, 1824.0], [72.8, 1826.0], [72.9, 1827.0], [73.0, 1827.0], [73.1, 1829.0], [73.2, 1829.0], [73.3, 1829.0], [73.4, 1829.0], [73.5, 1830.0], [73.6, 1830.0], [73.7, 1830.0], [73.8, 1831.0], [73.9, 1831.0], [74.0, 1831.0], [74.1, 1831.0], [74.2, 1831.0], [74.3, 1832.0], [74.4, 1832.0], [74.5, 1833.0], [74.6, 1833.0], [74.7, 1833.0], [74.8, 1834.0], [74.9, 1835.0], [75.0, 1835.0], [75.1, 1836.0], [75.2, 1836.0], [75.3, 1836.0], [75.4, 1836.0], [75.5, 1836.0], [75.6, 1837.0], [75.7, 1837.0], [75.8, 1837.0], [75.9, 1838.0], [76.0, 1838.0], [76.1, 1838.0], [76.2, 1839.0], [76.3, 1840.0], [76.4, 1840.0], [76.5, 1841.0], [76.6, 1841.0], [76.7, 1844.0], [76.8, 1844.0], [76.9, 1845.0], [77.0, 1846.0], [77.1, 1846.0], [77.2, 1847.0], [77.3, 1847.0], [77.4, 1848.0], [77.5, 1848.0], [77.6, 1848.0], [77.7, 1848.0], [77.8, 1849.0], [77.9, 1849.0], [78.0, 1849.0], [78.1, 1849.0], [78.2, 1850.0], [78.3, 1850.0], [78.4, 1850.0], [78.5, 1851.0], [78.6, 1851.0], [78.7, 1851.0], [78.8, 1851.0], [78.9, 1852.0], [79.0, 1852.0], [79.1, 1852.0], [79.2, 1853.0], [79.3, 1853.0], [79.4, 1854.0], [79.5, 1854.0], [79.6, 1855.0], [79.7, 1855.0], [79.8, 1855.0], [79.9, 1855.0], [80.0, 1856.0], [80.1, 1856.0], [80.2, 1856.0], [80.3, 1857.0], [80.4, 1857.0], [80.5, 1857.0], [80.6, 1857.0], [80.7, 1857.0], [80.8, 1858.0], [80.9, 1858.0], [81.0, 1858.0], [81.1, 1859.0], [81.2, 1859.0], [81.3, 1859.0], [81.4, 1859.0], [81.5, 1860.0], [81.6, 1860.0], [81.7, 1860.0], [81.8, 1861.0], [81.9, 1861.0], [82.0, 1861.0], [82.1, 1861.0], [82.2, 1862.0], [82.3, 1863.0], [82.4, 1863.0], [82.5, 1863.0], [82.6, 1864.0], [82.7, 1865.0], [82.8, 1865.0], [82.9, 1865.0], [83.0, 1865.0], [83.1, 1866.0], [83.2, 1866.0], [83.3, 1866.0], [83.4, 1868.0], [83.5, 1868.0], [83.6, 1868.0], [83.7, 1868.0], [83.8, 1870.0], [83.9, 1870.0], [84.0, 1871.0], [84.1, 1872.0], [84.2, 1872.0], [84.3, 1873.0], [84.4, 1873.0], [84.5, 1873.0], [84.6, 1875.0], [84.7, 1875.0], [84.8, 1876.0], [84.9, 1876.0], [85.0, 1877.0], [85.1, 1877.0], [85.2, 1877.0], [85.3, 1877.0], [85.4, 1878.0], [85.5, 1878.0], [85.6, 1878.0], [85.7, 1879.0], [85.8, 1879.0], [85.9, 1879.0], [86.0, 1880.0], [86.1, 1880.0], [86.2, 1881.0], [86.3, 1881.0], [86.4, 1881.0], [86.5, 1881.0], [86.6, 1881.0], [86.7, 1881.0], [86.8, 1882.0], [86.9, 1883.0], [87.0, 1884.0], [87.1, 1884.0], [87.2, 1884.0], [87.3, 1884.0], [87.4, 1884.0], [87.5, 1885.0], [87.6, 1885.0], [87.7, 1885.0], [87.8, 1886.0], [87.9, 1887.0], [88.0, 1887.0], [88.1, 1887.0], [88.2, 1887.0], [88.3, 1888.0], [88.4, 1888.0], [88.5, 1888.0], [88.6, 1889.0], [88.7, 1889.0], [88.8, 1890.0], [88.9, 1890.0], [89.0, 1891.0], [89.1, 1891.0], [89.2, 1891.0], [89.3, 1892.0], [89.4, 1893.0], [89.5, 1893.0], [89.6, 1893.0], [89.7, 1893.0], [89.8, 1894.0], [89.9, 1895.0], [90.0, 1895.0], [90.1, 1895.0], [90.2, 1895.0], [90.3, 1898.0], [90.4, 1899.0], [90.5, 1900.0], [90.6, 1900.0], [90.7, 1902.0], [90.8, 1902.0], [90.9, 1903.0], [91.0, 1903.0], [91.1, 1904.0], [91.2, 1904.0], [91.3, 1904.0], [91.4, 1904.0], [91.5, 1905.0], [91.6, 1906.0], [91.7, 1907.0], [91.8, 1907.0], [91.9, 1907.0], [92.0, 1907.0], [92.1, 1908.0], [92.2, 1909.0], [92.3, 1909.0], [92.4, 1909.0], [92.5, 1910.0], [92.6, 1911.0], [92.7, 1912.0], [92.8, 1913.0], [92.9, 1913.0], [93.0, 1915.0], [93.1, 1916.0], [93.2, 1918.0], [93.3, 1918.0], [93.4, 1919.0], [93.5, 1920.0], [93.6, 1921.0], [93.7, 1922.0], [93.8, 1922.0], [93.9, 1926.0], [94.0, 1928.0], [94.1, 1929.0], [94.2, 1931.0], [94.3, 1931.0], [94.4, 1932.0], [94.5, 1932.0], [94.6, 1933.0], [94.7, 1933.0], [94.8, 1933.0], [94.9, 1934.0], [95.0, 1936.0], [95.1, 1936.0], [95.2, 1938.0], [95.3, 1938.0], [95.4, 1941.0], [95.5, 1942.0], [95.6, 1943.0], [95.7, 1945.0], [95.8, 1946.0], [95.9, 1946.0], [96.0, 1949.0], [96.1, 1952.0], [96.2, 1953.0], [96.3, 1953.0], [96.4, 1954.0], [96.5, 1954.0], [96.6, 1957.0], [96.7, 1960.0], [96.8, 1962.0], [96.9, 1962.0], [97.0, 1964.0], [97.1, 1966.0], [97.2, 1967.0], [97.3, 1971.0], [97.4, 1971.0], [97.5, 1971.0], [97.6, 1973.0], [97.7, 1975.0], [97.8, 1975.0], [97.9, 1980.0], [98.0, 1983.0], [98.1, 1984.0], [98.2, 1987.0], [98.3, 1987.0], [98.4, 1987.0], [98.5, 1991.0], [98.6, 1994.0], [98.7, 1996.0], [98.8, 1996.0], [98.9, 1998.0], [99.0, 2005.0], [99.1, 2006.0], [99.2, 2007.0], [99.3, 2017.0], [99.4, 2018.0], [99.5, 2045.0], [99.6, 2048.0], [99.7, 2068.0], [99.8, 2076.0], [99.9, 2169.0], [100.0, 3512.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 228.0, "series": [{"data": [[0.0, 30.0], [2100.0, 1.0], [600.0, 15.0], [700.0, 3.0], [200.0, 21.0], [800.0, 47.0], [3500.0, 1.0], [900.0, 25.0], [1000.0, 69.0], [1100.0, 26.0], [300.0, 14.0], [1200.0, 20.0], [1300.0, 6.0], [1400.0, 35.0], [1500.0, 56.0], [100.0, 10.0], [400.0, 16.0], [1600.0, 126.0], [1700.0, 146.0], [1800.0, 228.0], [1900.0, 85.0], [500.0, 11.0], [2000.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 650.0, "series": [{"data": [[0.0, 91.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 259.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 650.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 393.4599999999998, "minX": 1.69977756E12, "maxY": 393.4599999999998, "series": [{"data": [[1.69977756E12, 393.4599999999998]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977756E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.0, "maxY": 3512.0, "series": [{"data": [[2.0, 1973.0], [3.0, 1936.0], [4.0, 1954.0], [6.0, 1927.5], [7.0, 2068.0], [8.0, 1913.0], [9.0, 975.0], [10.0, 997.5], [11.0, 1063.0], [12.0, 1030.5], [13.0, 989.0], [14.0, 717.0], [15.0, 1893.0], [16.0, 76.5], [17.0, 1961.0], [18.0, 689.6666666666666], [19.0, 73.0], [20.0, 1894.5], [21.0, 1877.0], [22.0, 1894.0], [23.0, 374.33333333333337], [24.0, 975.5], [25.0, 986.5], [26.0, 962.0], [27.0, 1900.0], [28.0, 506.0], [29.0, 982.0], [30.0, 974.5], [31.0, 992.5], [33.0, 1962.0], [35.0, 1907.0], [34.0, 1953.0], [37.0, 1946.0], [36.0, 1938.0], [39.0, 1983.0], [38.0, 1936.0], [41.0, 1934.0], [42.0, 1960.5], [45.0, 1984.0], [44.0, 1992.5], [47.0, 1931.0], [48.0, 1952.0], [51.0, 1975.0], [50.0, 1966.0], [53.0, 1937.0], [55.0, 1893.0], [54.0, 1962.0], [57.0, 1928.0], [56.0, 1902.0], [59.0, 1888.0], [58.0, 1895.0], [61.0, 1887.0], [60.0, 1919.0], [63.0, 1881.0], [62.0, 1881.0], [66.0, 81.0], [67.0, 1449.25], [64.0, 1907.0], [71.0, 1859.0], [70.0, 1878.0], [69.0, 1881.0], [68.0, 1881.0], [72.0, 1858.0], [80.0, 62.0], [106.0, 89.0], [135.0, 1797.0], [133.0, 1750.0], [132.0, 1749.0], [131.0, 1749.0], [130.0, 1750.0], [129.0, 1758.0], [128.0, 1819.178571428571], [142.0, 1794.0], [140.0, 1819.0], [139.0, 1835.0], [138.0, 1737.0], [137.0, 1843.0], [151.0, 1715.0], [150.0, 1778.5], [148.0, 1861.0], [147.0, 1837.0], [146.0, 1748.0], [145.0, 1799.0], [144.0, 1825.0], [159.0, 1824.0], [158.0, 1815.0], [157.0, 1840.0], [156.0, 1831.0], [155.0, 1703.0], [154.0, 1833.0], [153.0, 1812.0], [152.0, 1709.0], [160.0, 220.0], [167.0, 1685.0], [166.0, 1696.0], [165.0, 1692.0], [164.0, 1695.0], [163.0, 1695.0], [162.0, 1714.0], [161.0, 1863.5], [172.0, 897.0], [173.0, 901.5], [175.0, 1669.0], [174.0, 1661.0], [171.0, 1673.0], [170.0, 1672.0], [169.0, 1679.0], [168.0, 1684.0], [183.0, 1640.0], [182.0, 1645.0], [181.0, 1650.0], [180.0, 1649.0], [179.0, 1682.0], [177.0, 1693.0], [176.0, 1650.0], [191.0, 1707.0], [190.0, 1670.0], [189.0, 1707.0], [188.0, 1653.0], [187.0, 1693.0], [186.0, 1653.0], [185.0, 1634.0], [184.0, 1643.0], [198.0, 1659.0], [197.0, 1668.0], [196.0, 1681.0], [194.0, 1684.0], [193.0, 1635.0], [192.0, 1619.0], [200.0, 1144.3333333333333], [207.0, 1672.0], [206.0, 1671.0], [205.0, 1680.0], [204.0, 1675.0], [203.0, 1680.0], [202.0, 1685.0], [201.0, 1638.0], [214.0, 180.0], [210.0, 1664.0], [209.0, 1665.0], [224.0, 175.0], [231.0, 200.0], [230.0, 181.0], [234.0, 191.0], [247.0, 220.0], [248.0, 208.5], [250.0, 203.0], [249.0, 221.0], [252.0, 197.0], [261.0, 218.0], [278.0, 242.0], [283.0, 216.0], [296.0, 243.0], [297.0, 238.0], [303.0, 239.0], [307.0, 273.6666666666667], [306.0, 255.5], [310.0, 281.0], [311.0, 352.0], [313.0, 349.0], [314.0, 282.0], [319.0, 1831.0], [318.0, 1839.2407407407409], [334.0, 1868.0], [327.0, 1075.0], [320.0, 1891.0], [322.0, 1884.0], [321.0, 1822.0], [330.0, 1091.0], [333.0, 1808.0], [332.0, 1812.0], [331.0, 1865.0], [329.0, 1829.0], [328.0, 1884.0], [325.0, 1809.0], [324.0, 1882.0], [351.0, 1845.0], [339.0, 840.3333333333333], [338.0, 1095.0], [336.0, 1833.0], [343.0, 1825.0], [341.0, 1860.0], [340.0, 1859.0], [347.0, 849.0], [349.0, 1837.0], [348.0, 1889.0], [346.0, 1789.0], [345.0, 1796.0], [344.0, 1778.0], [355.0, 882.6666666666666], [352.0, 1210.0], [354.0, 1822.0], [353.0, 1875.0], [367.0, 1813.0], [366.0, 1820.0], [365.0, 1823.0], [364.0, 1811.0], [363.0, 1815.0], [362.0, 1833.6666666666667], [359.0, 1883.0], [358.0, 1831.0], [357.0, 1811.0], [356.0, 1818.0], [381.0, 1795.0], [368.0, 380.0], [382.0, 1789.0], [380.0, 1807.0], [370.0, 1810.0], [369.0, 1906.0], [379.0, 1796.0], [378.0, 1803.0], [377.0, 1798.0], [376.0, 1801.0], [375.0, 1802.0], [374.0, 1802.0], [373.0, 1903.0], [372.0, 1828.3333333333333], [396.0, 1098.0], [388.0, 535.0], [389.0, 1353.3333333333333], [390.0, 412.5], [391.0, 1780.0], [387.0, 1796.0], [386.0, 1791.0], [385.0, 1788.0], [384.0, 1795.0], [398.0, 883.0], [399.0, 1106.5], [393.0, 1777.0], [397.0, 1769.0], [395.0, 1778.0], [394.0, 1791.0], [414.0, 1806.0], [405.0, 1107.0], [404.0, 1814.0], [406.0, 1108.0], [410.0, 463.5], [413.0, 1785.0], [412.0, 1782.0], [407.0, 1762.0], [401.0, 1769.0], [400.0, 1798.0], [403.0, 1766.0], [402.0, 1789.0], [411.0, 1807.0], [409.0, 1767.0], [408.0, 1765.0], [429.0, 1771.3333333333333], [431.0, 1827.0], [418.0, 1370.0], [416.0, 1782.5], [419.0, 1821.0], [426.0, 916.6666666666667], [430.0, 1785.0], [425.0, 1807.0], [424.0, 1770.0], [423.0, 1803.0], [422.0, 1863.0], [421.0, 1775.0], [420.0, 1836.0], [446.0, 1768.0], [447.0, 2169.0], [445.0, 1822.0], [444.0, 1778.0], [443.0, 1777.0], [442.0, 1848.0], [441.0, 1778.0], [440.0, 1813.5], [438.0, 2076.0], [433.0, 1816.0], [432.0, 1770.0], [435.0, 1789.0], [434.0, 1800.0], [437.0, 1776.0], [436.0, 1771.0], [452.0, 1777.0], [451.0, 1758.0], [450.0, 1759.0], [449.0, 1757.0], [448.0, 1768.0], [473.0, 595.0], [474.0, 587.0], [472.0, 594.6666666666666], [471.0, 641.0], [470.0, 597.5], [469.0, 741.0], [468.0, 598.25], [466.0, 652.0], [467.0, 632.0], [480.0, 590.0], [495.0, 626.0], [497.0, 670.3333333333334], [496.0, 662.0], [510.0, 638.0], [538.0, 1744.0], [524.0, 1177.0], [523.0, 905.75], [522.0, 1653.0], [521.0, 1943.0], [520.0, 1624.0], [525.0, 1145.0], [527.0, 1737.0], [519.0, 1625.0], [518.0, 1808.5757575757575], [526.0, 1616.0], [542.0, 1703.5], [531.0, 1631.0], [530.0, 1680.3333333333333], [533.0, 1711.0], [532.0, 1698.0], [535.0, 1718.0], [534.0, 1623.0], [541.0, 1660.0], [540.0, 1614.0], [537.0, 1732.0], [536.0, 1682.0], [571.0, 1076.7142857142858], [554.0, 1127.5], [553.0, 1718.2], [555.0, 1103.5], [556.0, 1097.0], [557.0, 1130.5], [559.0, 1496.3333333333333], [544.0, 1734.0], [558.0, 1641.0], [575.0, 1046.6666666666667], [561.0, 1093.7142857142856], [560.0, 1150.2], [563.0, 1078.875], [562.0, 1315.857142857143], [565.0, 1180.25], [564.0, 1211.6666666666667], [574.0, 1023.0], [572.0, 1110.5], [573.0, 1396.8], [570.0, 1545.3333333333333], [569.0, 1035.75], [568.0, 1169.5555555555557], [549.0, 1068.5], [548.0, 1802.0], [547.0, 1765.0], [545.0, 1468.3333333333333], [567.0, 1168.25], [566.0, 1221.375], [601.0, 1017.6666666666666], [606.0, 1241.0], [607.0, 1093.3333333333333], [594.0, 1147.0], [593.0, 1374.0], [592.0, 1232.3333333333333], [596.0, 1221.5], [595.0, 1220.5], [605.0, 1125.0], [604.0, 1163.3333333333333], [602.0, 1122.3333333333333], [603.0, 1603.0], [600.0, 1103.6666666666667], [583.0, 1250.1666666666665], [582.0, 990.5], [581.0, 1584.0], [580.0, 1192.25], [579.0, 1092.25], [578.0, 1042.25], [577.0, 1009.0], [576.0, 1407.5714285714287], [591.0, 1267.0], [590.0, 1373.3333333333333], [589.0, 1149.0], [588.0, 1242.5], [587.0, 1249.5], [586.0, 1400.0], [585.0, 1050.3333333333333], [584.0, 1338.0], [598.0, 1113.4], [599.0, 1476.3333333333333], [597.0, 1260.0], [614.0, 1228.5], [622.0, 1250.0], [618.0, 1079.75], [617.0, 1636.5], [619.0, 1562.0], [620.0, 995.7777777777778], [626.0, 945.7142857142858], [628.0, 1674.0], [627.0, 1639.0], [631.0, 1547.5], [629.0, 1556.0], [625.0, 1256.4285714285713], [624.0, 1070.5], [615.0, 1424.3333333333333], [632.0, 1525.0], [634.0, 1575.0], [633.0, 1500.0], [636.0, 1585.0], [635.0, 1514.0], [638.0, 1566.0], [637.0, 1505.0], [639.0, 1473.0], [621.0, 855.0], [613.0, 1006.0], [612.0, 1121.4], [611.0, 1281.75], [610.0, 1210.0], [609.0, 874.0], [608.0, 1174.0], [653.0, 1411.0], [658.0, 1377.0], [663.0, 1394.0], [664.0, 1452.6666666666667], [647.0, 1530.3333333333333], [644.0, 1456.0], [643.0, 1446.0], [642.0, 1541.0], [641.0, 1471.0], [640.0, 1462.0], [652.0, 1566.0], [651.0, 1579.0], [650.0, 1518.0], [649.0, 1584.0], [648.0, 1470.0], [686.0, 1477.5238095238096], [685.0, 1474.3333333333333], [683.0, 1470.25], [682.0, 1453.5], [679.0, 1451.0], [678.0, 1449.0], [1.0, 3512.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[393.4610000000003, 1452.4129999999973]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 686.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2250.0, "minX": 1.69977756E12, "maxY": 301350.0, "series": [{"data": [[1.69977756E12, 301350.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69977756E12, 2250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977756E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1452.4129999999973, "minX": 1.69977756E12, "maxY": 1452.4129999999973, "series": [{"data": [[1.69977756E12, 1452.4129999999973]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977756E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1437.9000000000005, "minX": 1.69977756E12, "maxY": 1437.9000000000005, "series": [{"data": [[1.69977756E12, 1437.9000000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977756E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.338000000000001, "minX": 1.69977756E12, "maxY": 14.338000000000001, "series": [{"data": [[1.69977756E12, 14.338000000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977756E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.69977756E12, "maxY": 3512.0, "series": [{"data": [[1.69977756E12, 3512.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69977756E12, 1895.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69977756E12, 2005.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69977756E12, 1936.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69977756E12, 20.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69977756E12, 1678.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977756E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 287.0, "minX": 120.0, "maxY": 1826.5, "series": [{"data": [[416.0, 1791.5], [220.0, 1826.5], [120.0, 287.0], [244.0, 1061.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 416.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 286.0, "minX": 120.0, "maxY": 1816.5, "series": [{"data": [[416.0, 1787.5], [220.0, 1816.5], [120.0, 286.0], [244.0, 1057.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 416.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69977756E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69977756E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977756E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69977756E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69977756E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977756E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69977756E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69977756E12, 16.666666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977756E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69977756E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69977756E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977756E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

