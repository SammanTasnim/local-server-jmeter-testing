/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 66.0, "minX": 0.0, "maxY": 7630.0, "series": [{"data": [[0.0, 66.0], [0.1, 194.0], [0.2, 195.0], [0.3, 197.0], [0.4, 199.0], [0.5, 203.0], [0.6, 205.0], [0.7, 206.0], [0.8, 207.0], [0.9, 208.0], [1.0, 212.0], [1.1, 215.0], [1.2, 217.0], [1.3, 219.0], [1.4, 221.0], [1.5, 227.0], [1.6, 232.0], [1.7, 236.0], [1.8, 237.0], [1.9, 240.0], [2.0, 243.0], [2.1, 244.0], [2.2, 246.0], [2.3, 251.0], [2.4, 254.0], [2.5, 257.0], [2.6, 261.0], [2.7, 265.0], [2.8, 273.0], [2.9, 278.0], [3.0, 282.0], [3.1, 291.0], [3.2, 301.0], [3.3, 307.0], [3.4, 316.0], [3.5, 323.0], [3.6, 331.0], [3.7, 350.0], [3.8, 358.0], [3.9, 364.0], [4.0, 372.0], [4.1, 374.0], [4.2, 380.0], [4.3, 384.0], [4.4, 387.0], [4.5, 389.0], [4.6, 399.0], [4.7, 412.0], [4.8, 449.0], [4.9, 467.0], [5.0, 761.0], [5.1, 769.0], [5.2, 776.0], [5.3, 778.0], [5.4, 781.0], [5.5, 788.0], [5.6, 793.0], [5.7, 844.0], [5.8, 876.0], [5.9, 1204.0], [6.0, 1246.0], [6.1, 1333.0], [6.2, 1374.0], [6.3, 1381.0], [6.4, 1382.0], [6.5, 1432.0], [6.6, 1555.0], [6.7, 1561.0], [6.8, 1564.0], [6.9, 1564.0], [7.0, 1567.0], [7.1, 1574.0], [7.2, 1578.0], [7.3, 1586.0], [7.4, 1588.0], [7.5, 1625.0], [7.6, 1648.0], [7.7, 1696.0], [7.8, 1704.0], [7.9, 1711.0], [8.0, 1715.0], [8.1, 1722.0], [8.2, 1724.0], [8.3, 1729.0], [8.4, 1737.0], [8.5, 1741.0], [8.6, 1752.0], [8.7, 1756.0], [8.8, 1759.0], [8.9, 1760.0], [9.0, 1764.0], [9.1, 1767.0], [9.2, 1772.0], [9.3, 1773.0], [9.4, 1783.0], [9.5, 1792.0], [9.6, 1798.0], [9.7, 1807.0], [9.8, 1812.0], [9.9, 1842.0], [10.0, 1849.0], [10.1, 1852.0], [10.2, 1853.0], [10.3, 1854.0], [10.4, 1859.0], [10.5, 1862.0], [10.6, 1866.0], [10.7, 1875.0], [10.8, 1878.0], [10.9, 1883.0], [11.0, 1888.0], [11.1, 1890.0], [11.2, 1892.0], [11.3, 1894.0], [11.4, 1894.0], [11.5, 1895.0], [11.6, 1895.0], [11.7, 1896.0], [11.8, 1898.0], [11.9, 1901.0], [12.0, 1909.0], [12.1, 1912.0], [12.2, 1922.0], [12.3, 1934.0], [12.4, 1937.0], [12.5, 1941.0], [12.6, 1943.0], [12.7, 1946.0], [12.8, 1948.0], [12.9, 1952.0], [13.0, 1958.0], [13.1, 1963.0], [13.2, 1967.0], [13.3, 1978.0], [13.4, 1982.0], [13.5, 1998.0], [13.6, 2003.0], [13.7, 2016.0], [13.8, 2037.0], [13.9, 2045.0], [14.0, 2050.0], [14.1, 2054.0], [14.2, 2056.0], [14.3, 2058.0], [14.4, 2068.0], [14.5, 2072.0], [14.6, 2079.0], [14.7, 2087.0], [14.8, 2095.0], [14.9, 2108.0], [15.0, 2111.0], [15.1, 2113.0], [15.2, 2115.0], [15.3, 2144.0], [15.4, 2155.0], [15.5, 2179.0], [15.6, 2180.0], [15.7, 2182.0], [15.8, 2185.0], [15.9, 2191.0], [16.0, 2198.0], [16.1, 2199.0], [16.2, 2202.0], [16.3, 2206.0], [16.4, 2211.0], [16.5, 2221.0], [16.6, 2224.0], [16.7, 2229.0], [16.8, 2232.0], [16.9, 2235.0], [17.0, 2236.0], [17.1, 2236.0], [17.2, 2238.0], [17.3, 2241.0], [17.4, 2243.0], [17.5, 2253.0], [17.6, 2257.0], [17.7, 2259.0], [17.8, 2263.0], [17.9, 2268.0], [18.0, 2273.0], [18.1, 2286.0], [18.2, 2290.0], [18.3, 2293.0], [18.4, 2301.0], [18.5, 2306.0], [18.6, 2311.0], [18.7, 2313.0], [18.8, 2315.0], [18.9, 2319.0], [19.0, 2322.0], [19.1, 2325.0], [19.2, 2327.0], [19.3, 2330.0], [19.4, 2336.0], [19.5, 2339.0], [19.6, 2340.0], [19.7, 2342.0], [19.8, 2344.0], [19.9, 2349.0], [20.0, 2352.0], [20.1, 2356.0], [20.2, 2364.0], [20.3, 2367.0], [20.4, 2371.0], [20.5, 2373.0], [20.6, 2376.0], [20.7, 2379.0], [20.8, 2383.0], [20.9, 2387.0], [21.0, 2392.0], [21.1, 2398.0], [21.2, 2399.0], [21.3, 2408.0], [21.4, 2412.0], [21.5, 2417.0], [21.6, 2418.0], [21.7, 2420.0], [21.8, 2423.0], [21.9, 2428.0], [22.0, 2431.0], [22.1, 2433.0], [22.2, 2438.0], [22.3, 2447.0], [22.4, 2454.0], [22.5, 2456.0], [22.6, 2460.0], [22.7, 2467.0], [22.8, 2471.0], [22.9, 2482.0], [23.0, 2487.0], [23.1, 2492.0], [23.2, 2497.0], [23.3, 2502.0], [23.4, 2505.0], [23.5, 2509.0], [23.6, 2514.0], [23.7, 2520.0], [23.8, 2522.0], [23.9, 2528.0], [24.0, 2534.0], [24.1, 2536.0], [24.2, 2541.0], [24.3, 2545.0], [24.4, 2551.0], [24.5, 2555.0], [24.6, 2561.0], [24.7, 2585.0], [24.8, 2602.0], [24.9, 2621.0], [25.0, 2630.0], [25.1, 2637.0], [25.2, 2645.0], [25.3, 2672.0], [25.4, 2719.0], [25.5, 2762.0], [25.6, 2775.0], [25.7, 2787.0], [25.8, 2796.0], [25.9, 2805.0], [26.0, 2811.0], [26.1, 2814.0], [26.2, 2847.0], [26.3, 2858.0], [26.4, 2864.0], [26.5, 2868.0], [26.6, 2872.0], [26.7, 2873.0], [26.8, 2877.0], [26.9, 2883.0], [27.0, 2889.0], [27.1, 2898.0], [27.2, 2902.0], [27.3, 2913.0], [27.4, 2925.0], [27.5, 2939.0], [27.6, 2949.0], [27.7, 2956.0], [27.8, 2960.0], [27.9, 2962.0], [28.0, 2965.0], [28.1, 2966.0], [28.2, 2968.0], [28.3, 2972.0], [28.4, 2975.0], [28.5, 2977.0], [28.6, 2979.0], [28.7, 2981.0], [28.8, 2983.0], [28.9, 2985.0], [29.0, 2988.0], [29.1, 2991.0], [29.2, 2994.0], [29.3, 3001.0], [29.4, 3005.0], [29.5, 3017.0], [29.6, 3029.0], [29.7, 3043.0], [29.8, 3050.0], [29.9, 3052.0], [30.0, 3058.0], [30.1, 3070.0], [30.2, 3080.0], [30.3, 3088.0], [30.4, 3094.0], [30.5, 3101.0], [30.6, 3103.0], [30.7, 3104.0], [30.8, 3105.0], [30.9, 3109.0], [31.0, 3112.0], [31.1, 3122.0], [31.2, 3134.0], [31.3, 3143.0], [31.4, 3145.0], [31.5, 3147.0], [31.6, 3150.0], [31.7, 3154.0], [31.8, 3157.0], [31.9, 3172.0], [32.0, 3177.0], [32.1, 3179.0], [32.2, 3182.0], [32.3, 3185.0], [32.4, 3187.0], [32.5, 3189.0], [32.6, 3192.0], [32.7, 3195.0], [32.8, 3196.0], [32.9, 3201.0], [33.0, 3207.0], [33.1, 3215.0], [33.2, 3228.0], [33.3, 3233.0], [33.4, 3243.0], [33.5, 3254.0], [33.6, 3260.0], [33.7, 3264.0], [33.8, 3268.0], [33.9, 3272.0], [34.0, 3276.0], [34.1, 3287.0], [34.2, 3303.0], [34.3, 3320.0], [34.4, 3326.0], [34.5, 3331.0], [34.6, 3342.0], [34.7, 3359.0], [34.8, 3371.0], [34.9, 3393.0], [35.0, 3399.0], [35.1, 3434.0], [35.2, 3471.0], [35.3, 3485.0], [35.4, 3525.0], [35.5, 3546.0], [35.6, 3572.0], [35.7, 3589.0], [35.8, 3599.0], [35.9, 3608.0], [36.0, 3651.0], [36.1, 3678.0], [36.2, 3693.0], [36.3, 3707.0], [36.4, 3713.0], [36.5, 3732.0], [36.6, 3738.0], [36.7, 3745.0], [36.8, 3748.0], [36.9, 3751.0], [37.0, 3754.0], [37.1, 3757.0], [37.2, 3760.0], [37.3, 3762.0], [37.4, 3769.0], [37.5, 3776.0], [37.6, 3780.0], [37.7, 3784.0], [37.8, 3788.0], [37.9, 3798.0], [38.0, 3812.0], [38.1, 3828.0], [38.2, 3840.0], [38.3, 3863.0], [38.4, 3867.0], [38.5, 3878.0], [38.6, 3884.0], [38.7, 3887.0], [38.8, 3908.0], [38.9, 3926.0], [39.0, 3933.0], [39.1, 3936.0], [39.2, 3942.0], [39.3, 3949.0], [39.4, 3954.0], [39.5, 3979.0], [39.6, 3985.0], [39.7, 3988.0], [39.8, 3994.0], [39.9, 3998.0], [40.0, 4012.0], [40.1, 4015.0], [40.2, 4019.0], [40.3, 4030.0], [40.4, 4032.0], [40.5, 4037.0], [40.6, 4042.0], [40.7, 4045.0], [40.8, 4052.0], [40.9, 4056.0], [41.0, 4065.0], [41.1, 4069.0], [41.2, 4073.0], [41.3, 4077.0], [41.4, 4078.0], [41.5, 4080.0], [41.6, 4084.0], [41.7, 4091.0], [41.8, 4093.0], [41.9, 4096.0], [42.0, 4102.0], [42.1, 4104.0], [42.2, 4107.0], [42.3, 4110.0], [42.4, 4119.0], [42.5, 4123.0], [42.6, 4130.0], [42.7, 4132.0], [42.8, 4135.0], [42.9, 4137.0], [43.0, 4139.0], [43.1, 4142.0], [43.2, 4145.0], [43.3, 4147.0], [43.4, 4150.0], [43.5, 4152.0], [43.6, 4155.0], [43.7, 4156.0], [43.8, 4159.0], [43.9, 4162.0], [44.0, 4164.0], [44.1, 4164.0], [44.2, 4165.0], [44.3, 4166.0], [44.4, 4168.0], [44.5, 4170.0], [44.6, 4171.0], [44.7, 4172.0], [44.8, 4174.0], [44.9, 4174.0], [45.0, 4175.0], [45.1, 4177.0], [45.2, 4178.0], [45.3, 4179.0], [45.4, 4182.0], [45.5, 4184.0], [45.6, 4186.0], [45.7, 4187.0], [45.8, 4190.0], [45.9, 4191.0], [46.0, 4192.0], [46.1, 4194.0], [46.2, 4197.0], [46.3, 4197.0], [46.4, 4199.0], [46.5, 4200.0], [46.6, 4201.0], [46.7, 4202.0], [46.8, 4204.0], [46.9, 4206.0], [47.0, 4208.0], [47.1, 4210.0], [47.2, 4212.0], [47.3, 4213.0], [47.4, 4214.0], [47.5, 4216.0], [47.6, 4218.0], [47.7, 4219.0], [47.8, 4220.0], [47.9, 4223.0], [48.0, 4224.0], [48.1, 4225.0], [48.2, 4226.0], [48.3, 4227.0], [48.4, 4228.0], [48.5, 4230.0], [48.6, 4231.0], [48.7, 4232.0], [48.8, 4234.0], [48.9, 4235.0], [49.0, 4236.0], [49.1, 4236.0], [49.2, 4237.0], [49.3, 4238.0], [49.4, 4239.0], [49.5, 4239.0], [49.6, 4239.0], [49.7, 4240.0], [49.8, 4241.0], [49.9, 4241.0], [50.0, 4242.0], [50.1, 4242.0], [50.2, 4243.0], [50.3, 4244.0], [50.4, 4245.0], [50.5, 4246.0], [50.6, 4246.0], [50.7, 4247.0], [50.8, 4247.0], [50.9, 4248.0], [51.0, 4249.0], [51.1, 4250.0], [51.2, 4251.0], [51.3, 4252.0], [51.4, 4252.0], [51.5, 4253.0], [51.6, 4253.0], [51.7, 4254.0], [51.8, 4255.0], [51.9, 4255.0], [52.0, 4256.0], [52.1, 4257.0], [52.2, 4257.0], [52.3, 4258.0], [52.4, 4258.0], [52.5, 4259.0], [52.6, 4259.0], [52.7, 4260.0], [52.8, 4261.0], [52.9, 4262.0], [53.0, 4263.0], [53.1, 4264.0], [53.2, 4264.0], [53.3, 4264.0], [53.4, 4265.0], [53.5, 4266.0], [53.6, 4267.0], [53.7, 4268.0], [53.8, 4268.0], [53.9, 4268.0], [54.0, 4269.0], [54.1, 4270.0], [54.2, 4271.0], [54.3, 4272.0], [54.4, 4273.0], [54.5, 4273.0], [54.6, 4274.0], [54.7, 4274.0], [54.8, 4275.0], [54.9, 4275.0], [55.0, 4276.0], [55.1, 4277.0], [55.2, 4277.0], [55.3, 4278.0], [55.4, 4278.0], [55.5, 4279.0], [55.6, 4279.0], [55.7, 4280.0], [55.8, 4281.0], [55.9, 4282.0], [56.0, 4282.0], [56.1, 4283.0], [56.2, 4283.0], [56.3, 4284.0], [56.4, 4285.0], [56.5, 4285.0], [56.6, 4286.0], [56.7, 4287.0], [56.8, 4287.0], [56.9, 4288.0], [57.0, 4289.0], [57.1, 4290.0], [57.2, 4290.0], [57.3, 4291.0], [57.4, 4292.0], [57.5, 4292.0], [57.6, 4293.0], [57.7, 4294.0], [57.8, 4294.0], [57.9, 4295.0], [58.0, 4296.0], [58.1, 4296.0], [58.2, 4297.0], [58.3, 4298.0], [58.4, 4299.0], [58.5, 4299.0], [58.6, 4300.0], [58.7, 4301.0], [58.8, 4302.0], [58.9, 4302.0], [59.0, 4303.0], [59.1, 4304.0], [59.2, 4304.0], [59.3, 4305.0], [59.4, 4305.0], [59.5, 4307.0], [59.6, 4308.0], [59.7, 4308.0], [59.8, 4309.0], [59.9, 4310.0], [60.0, 4310.0], [60.1, 4311.0], [60.2, 4312.0], [60.3, 4313.0], [60.4, 4314.0], [60.5, 4314.0], [60.6, 4315.0], [60.7, 4316.0], [60.8, 4317.0], [60.9, 4317.0], [61.0, 4318.0], [61.1, 4318.0], [61.2, 4319.0], [61.3, 4319.0], [61.4, 4320.0], [61.5, 4321.0], [61.6, 4322.0], [61.7, 4323.0], [61.8, 4324.0], [61.9, 4325.0], [62.0, 4326.0], [62.1, 4328.0], [62.2, 4329.0], [62.3, 4330.0], [62.4, 4331.0], [62.5, 4332.0], [62.6, 4333.0], [62.7, 4334.0], [62.8, 4335.0], [62.9, 4336.0], [63.0, 4337.0], [63.1, 4337.0], [63.2, 4338.0], [63.3, 4340.0], [63.4, 4341.0], [63.5, 4342.0], [63.6, 4343.0], [63.7, 4344.0], [63.8, 4345.0], [63.9, 4346.0], [64.0, 4347.0], [64.1, 4348.0], [64.2, 4348.0], [64.3, 4349.0], [64.4, 4350.0], [64.5, 4350.0], [64.6, 4351.0], [64.7, 4352.0], [64.8, 4353.0], [64.9, 4355.0], [65.0, 4356.0], [65.1, 4357.0], [65.2, 4359.0], [65.3, 4360.0], [65.4, 4361.0], [65.5, 4362.0], [65.6, 4362.0], [65.7, 4364.0], [65.8, 4364.0], [65.9, 4365.0], [66.0, 4366.0], [66.1, 4367.0], [66.2, 4367.0], [66.3, 4368.0], [66.4, 4370.0], [66.5, 4371.0], [66.6, 4372.0], [66.7, 4373.0], [66.8, 4373.0], [66.9, 4375.0], [67.0, 4376.0], [67.1, 4377.0], [67.2, 4378.0], [67.3, 4380.0], [67.4, 4380.0], [67.5, 4381.0], [67.6, 4381.0], [67.7, 4382.0], [67.8, 4383.0], [67.9, 4383.0], [68.0, 4384.0], [68.1, 4384.0], [68.2, 4385.0], [68.3, 4386.0], [68.4, 4387.0], [68.5, 4388.0], [68.6, 4388.0], [68.7, 4389.0], [68.8, 4389.0], [68.9, 4391.0], [69.0, 4392.0], [69.1, 4392.0], [69.2, 4393.0], [69.3, 4395.0], [69.4, 4396.0], [69.5, 4397.0], [69.6, 4397.0], [69.7, 4399.0], [69.8, 4400.0], [69.9, 4401.0], [70.0, 4402.0], [70.1, 4403.0], [70.2, 4404.0], [70.3, 4405.0], [70.4, 4406.0], [70.5, 4407.0], [70.6, 4408.0], [70.7, 4409.0], [70.8, 4410.0], [70.9, 4412.0], [71.0, 4416.0], [71.1, 4417.0], [71.2, 4420.0], [71.3, 4422.0], [71.4, 4425.0], [71.5, 4425.0], [71.6, 4428.0], [71.7, 4430.0], [71.8, 4431.0], [71.9, 4434.0], [72.0, 4436.0], [72.1, 4438.0], [72.2, 4439.0], [72.3, 4440.0], [72.4, 4441.0], [72.5, 4442.0], [72.6, 4444.0], [72.7, 4445.0], [72.8, 4446.0], [72.9, 4447.0], [73.0, 4448.0], [73.1, 4449.0], [73.2, 4450.0], [73.3, 4451.0], [73.4, 4452.0], [73.5, 4453.0], [73.6, 4453.0], [73.7, 4454.0], [73.8, 4455.0], [73.9, 4456.0], [74.0, 4456.0], [74.1, 4458.0], [74.2, 4459.0], [74.3, 4460.0], [74.4, 4461.0], [74.5, 4463.0], [74.6, 4464.0], [74.7, 4465.0], [74.8, 4465.0], [74.9, 4466.0], [75.0, 4467.0], [75.1, 4468.0], [75.2, 4469.0], [75.3, 4471.0], [75.4, 4471.0], [75.5, 4473.0], [75.6, 4473.0], [75.7, 4474.0], [75.8, 4475.0], [75.9, 4477.0], [76.0, 4478.0], [76.1, 4479.0], [76.2, 4480.0], [76.3, 4481.0], [76.4, 4482.0], [76.5, 4483.0], [76.6, 4486.0], [76.7, 4488.0], [76.8, 4490.0], [76.9, 4491.0], [77.0, 4492.0], [77.1, 4493.0], [77.2, 4495.0], [77.3, 4497.0], [77.4, 4498.0], [77.5, 4499.0], [77.6, 4500.0], [77.7, 4501.0], [77.8, 4503.0], [77.9, 4504.0], [78.0, 4505.0], [78.1, 4506.0], [78.2, 4507.0], [78.3, 4508.0], [78.4, 4510.0], [78.5, 4511.0], [78.6, 4513.0], [78.7, 4516.0], [78.8, 4517.0], [78.9, 4519.0], [79.0, 4520.0], [79.1, 4521.0], [79.2, 4522.0], [79.3, 4524.0], [79.4, 4525.0], [79.5, 4526.0], [79.6, 4528.0], [79.7, 4529.0], [79.8, 4529.0], [79.9, 4530.0], [80.0, 4530.0], [80.1, 4531.0], [80.2, 4532.0], [80.3, 4533.0], [80.4, 4534.0], [80.5, 4534.0], [80.6, 4535.0], [80.7, 4535.0], [80.8, 4536.0], [80.9, 4537.0], [81.0, 4538.0], [81.1, 4539.0], [81.2, 4540.0], [81.3, 4540.0], [81.4, 4541.0], [81.5, 4542.0], [81.6, 4542.0], [81.7, 4543.0], [81.8, 4545.0], [81.9, 4547.0], [82.0, 4548.0], [82.1, 4549.0], [82.2, 4551.0], [82.3, 4552.0], [82.4, 4554.0], [82.5, 4555.0], [82.6, 4558.0], [82.7, 4559.0], [82.8, 4561.0], [82.9, 4564.0], [83.0, 4565.0], [83.1, 4566.0], [83.2, 4568.0], [83.3, 4569.0], [83.4, 4571.0], [83.5, 4572.0], [83.6, 4573.0], [83.7, 4574.0], [83.8, 4577.0], [83.9, 4579.0], [84.0, 4581.0], [84.1, 4582.0], [84.2, 4583.0], [84.3, 4584.0], [84.4, 4587.0], [84.5, 4590.0], [84.6, 4593.0], [84.7, 4595.0], [84.8, 4597.0], [84.9, 4600.0], [85.0, 4604.0], [85.1, 4607.0], [85.2, 4613.0], [85.3, 4618.0], [85.4, 4624.0], [85.5, 4636.0], [85.6, 4640.0], [85.7, 4734.0], [85.8, 4882.0], [85.9, 4923.0], [86.0, 4986.0], [86.1, 5017.0], [86.2, 5028.0], [86.3, 5033.0], [86.4, 5042.0], [86.5, 5049.0], [86.6, 5061.0], [86.7, 5081.0], [86.8, 5121.0], [86.9, 5170.0], [87.0, 5245.0], [87.1, 5288.0], [87.2, 5318.0], [87.3, 5322.0], [87.4, 5332.0], [87.5, 5351.0], [87.6, 5360.0], [87.7, 5364.0], [87.8, 5368.0], [87.9, 5372.0], [88.0, 5376.0], [88.1, 5377.0], [88.2, 5381.0], [88.3, 5386.0], [88.4, 5391.0], [88.5, 5394.0], [88.6, 5397.0], [88.7, 5404.0], [88.8, 5406.0], [88.9, 5407.0], [89.0, 5411.0], [89.1, 5415.0], [89.2, 5417.0], [89.3, 5421.0], [89.4, 5424.0], [89.5, 5426.0], [89.6, 5428.0], [89.7, 5433.0], [89.8, 5443.0], [89.9, 5523.0], [90.0, 5534.0], [90.1, 5546.0], [90.2, 5566.0], [90.3, 5572.0], [90.4, 5575.0], [90.5, 5578.0], [90.6, 5582.0], [90.7, 5584.0], [90.8, 5591.0], [90.9, 5595.0], [91.0, 5598.0], [91.1, 5600.0], [91.2, 5603.0], [91.3, 5606.0], [91.4, 5607.0], [91.5, 5610.0], [91.6, 5613.0], [91.7, 5617.0], [91.8, 5620.0], [91.9, 5622.0], [92.0, 5623.0], [92.1, 5625.0], [92.2, 5628.0], [92.3, 5631.0], [92.4, 5634.0], [92.5, 5636.0], [92.6, 5637.0], [92.7, 5642.0], [92.8, 5642.0], [92.9, 5645.0], [93.0, 5650.0], [93.1, 5653.0], [93.2, 5658.0], [93.3, 5665.0], [93.4, 5668.0], [93.5, 5671.0], [93.6, 5676.0], [93.7, 5678.0], [93.8, 5685.0], [93.9, 5690.0], [94.0, 5704.0], [94.1, 5709.0], [94.2, 5711.0], [94.3, 5715.0], [94.4, 5717.0], [94.5, 5723.0], [94.6, 5729.0], [94.7, 5739.0], [94.8, 5744.0], [94.9, 5747.0], [95.0, 5752.0], [95.1, 5760.0], [95.2, 5761.0], [95.3, 5769.0], [95.4, 5775.0], [95.5, 5779.0], [95.6, 5786.0], [95.7, 5787.0], [95.8, 5790.0], [95.9, 5793.0], [96.0, 5798.0], [96.1, 5801.0], [96.2, 5806.0], [96.3, 5810.0], [96.4, 5820.0], [96.5, 5824.0], [96.6, 5834.0], [96.7, 5840.0], [96.8, 5846.0], [96.9, 5857.0], [97.0, 5866.0], [97.1, 5874.0], [97.2, 5884.0], [97.3, 5888.0], [97.4, 5893.0], [97.5, 5895.0], [97.6, 5897.0], [97.7, 5902.0], [97.8, 5909.0], [97.9, 5915.0], [98.0, 5921.0], [98.1, 5939.0], [98.2, 5946.0], [98.3, 5959.0], [98.4, 5972.0], [98.5, 5996.0], [98.6, 6005.0], [98.7, 6031.0], [98.8, 6056.0], [98.9, 6065.0], [99.0, 6074.0], [99.1, 6077.0], [99.2, 6085.0], [99.3, 6090.0], [99.4, 6104.0], [99.5, 6121.0], [99.6, 6143.0], [99.7, 6163.0], [99.8, 6178.0], [99.9, 6200.0], [100.0, 7630.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 607.0, "series": [{"data": [[0.0, 2.0], [700.0, 33.0], [800.0, 10.0], [1100.0, 4.0], [1200.0, 8.0], [1300.0, 20.0], [1400.0, 3.0], [1500.0, 48.0], [1600.0, 14.0], [1700.0, 94.0], [1800.0, 112.0], [1900.0, 84.0], [2000.0, 63.0], [2100.0, 65.0], [2200.0, 114.0], [2300.0, 141.0], [2400.0, 102.0], [2500.0, 77.0], [2600.0, 27.0], [2700.0, 26.0], [2800.0, 66.0], [2900.0, 105.0], [3000.0, 61.0], [3100.0, 119.0], [3300.0, 43.0], [3200.0, 64.0], [3400.0, 17.0], [3500.0, 23.0], [3600.0, 23.0], [3700.0, 81.0], [3800.0, 44.0], [3900.0, 56.0], [4000.0, 102.0], [4200.0, 607.0], [4100.0, 224.0], [4300.0, 561.0], [4400.0, 389.0], [4500.0, 364.0], [4600.0, 42.0], [4800.0, 8.0], [4700.0, 2.0], [4900.0, 7.0], [5000.0, 37.0], [5100.0, 8.0], [5300.0, 73.0], [5200.0, 11.0], [5400.0, 63.0], [5500.0, 61.0], [5600.0, 144.0], [5700.0, 104.0], [5800.0, 81.0], [5900.0, 43.0], [6000.0, 42.0], [6100.0, 26.0], [6200.0, 3.0], [6800.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [100.0, 20.0], [200.0, 136.0], [300.0, 73.0], [400.0, 17.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 78.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2709.0, "series": [{"data": [[0.0, 248.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 78.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2709.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1965.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2305.2685999999962, "minX": 1.69977804E12, "maxY": 2305.2685999999962, "series": [{"data": [[1.69977804E12, 2305.2685999999962]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977804E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 148.0, "minX": 1.0, "maxY": 7630.0, "series": [{"data": [[2.0, 7587.0], [3.0, 6817.0], [4.0, 5983.0], [5.0, 5897.0], [6.0, 5870.0], [7.0, 5936.0], [8.0, 5912.0], [9.0, 5921.0], [10.0, 5949.0], [12.0, 5839.5], [13.0, 5786.0], [15.0, 5857.0], [17.0, 5853.666666666667], [18.0, 5893.0], [19.0, 5787.0], [21.0, 5860.5], [23.0, 5783.0], [24.0, 5844.0], [25.0, 5894.0], [26.0, 5884.0], [27.0, 5897.0], [28.0, 5867.0], [29.0, 5842.0], [31.0, 5892.5], [33.0, 5747.0], [32.0, 5862.0], [35.0, 5869.0], [34.0, 5864.0], [37.0, 5863.0], [39.0, 5924.0], [38.0, 5905.0], [41.0, 5830.0], [40.0, 5835.0], [43.0, 5844.0], [42.0, 5827.0], [45.0, 5883.0], [44.0, 5885.0], [47.0, 5715.0], [46.0, 5847.0], [49.0, 5709.0], [48.0, 5709.0], [87.0, 255.33333333333334], [92.0, 256.0], [93.0, 257.0], [94.0, 256.0], [99.0, 255.0], [97.0, 252.0], [102.0, 278.0], [100.0, 259.5], [106.0, 243.75], [105.0, 244.25], [104.0, 247.5], [111.0, 237.0], [109.0, 239.0], [108.0, 228.5], [114.0, 244.0], [112.0, 250.5], [119.0, 237.0], [118.0, 233.0], [123.0, 148.0], [122.0, 234.0], [120.0, 234.0], [125.0, 231.0], [127.0, 220.0], [124.0, 239.5], [135.0, 237.0], [129.0, 227.5], [143.0, 243.0], [140.0, 214.0], [139.0, 216.0], [138.0, 245.0], [136.0, 239.0], [144.0, 216.66666666666666], [149.0, 5755.0], [167.0, 282.0], [180.0, 303.0], [199.0, 5836.5], [197.0, 5545.0], [196.0, 5593.0], [195.0, 5596.0], [194.0, 5567.5], [192.0, 5727.887323943661], [205.0, 307.0], [206.0, 6142.5], [204.0, 6094.0], [203.0, 6088.0], [202.0, 6177.0], [201.0, 5534.0], [200.0, 6178.0], [213.0, 3219.0], [215.0, 5567.0], [214.0, 6157.0], [212.0, 6063.0], [211.0, 6200.0], [210.0, 5575.0], [209.0, 5526.666666666667], [223.0, 6107.0], [222.0, 6055.5], [220.0, 6082.0], [219.0, 6121.0], [218.0, 6099.0], [217.0, 6096.5], [226.0, 315.0], [231.0, 6072.0], [230.0, 6079.666666666667], [227.0, 6061.0], [225.0, 6076.0], [224.0, 6086.0], [237.0, 6077.0], [236.0, 6123.0], [235.0, 6055.0], [233.0, 6058.0], [232.0, 6014.0], [247.0, 6102.0], [246.0, 6085.0], [245.0, 6090.0], [244.0, 6108.0], [243.0, 6081.0], [242.0, 6087.5], [240.0, 6069.666666666667], [250.0, 3137.5], [255.0, 6004.0], [254.0, 5999.0], [253.0, 6005.0], [252.0, 6047.0], [249.0, 6005.0], [248.0, 6086.0], [268.0, 6012.5], [270.0, 6065.0], [256.0, 3163.5], [257.0, 6031.0], [259.0, 5972.0], [258.0, 6094.0], [271.0, 5995.0], [269.0, 6077.0], [266.0, 5991.0], [264.0, 5993.0], [263.0, 5967.5], [261.0, 6046.5], [274.0, 5943.0], [284.0, 323.0], [278.0, 2195.666666666667], [282.0, 5753.0], [281.0, 5967.5], [279.0, 5919.0], [273.0, 5959.0], [272.0, 5957.0], [277.0, 5723.0], [276.0, 5944.0], [275.0, 5950.0], [329.0, 346.0], [328.0, 350.0], [336.0, 350.0], [361.0, 360.0], [389.0, 375.0], [393.0, 378.0], [401.0, 371.0], [431.0, 5686.0], [429.0, 5658.0], [428.0, 5765.102739726028], [446.0, 2983.5], [444.0, 354.5], [447.0, 362.0], [445.0, 4892.714285714286], [443.0, 2995.0], [442.0, 363.4], [441.0, 360.0], [438.0, 3022.5], [433.0, 5666.5], [435.0, 5645.0], [434.0, 5713.0], [437.0, 3006.5], [436.0, 362.5], [462.0, 334.5], [452.0, 1681.5], [453.0, 302.0], [451.0, 2099.666666666667], [458.0, 2999.75], [460.0, 344.5], [461.0, 5645.0], [459.0, 2108.333333333333], [457.0, 304.0], [456.0, 2960.5], [463.0, 5648.5], [455.0, 2975.5], [448.0, 3860.0], [450.0, 3851.6666666666665], [449.0, 331.0], [454.0, 3821.3333333333335], [477.0, 2936.5], [466.0, 947.2222222222222], [465.0, 2988.0], [464.0, 1386.6], [468.0, 330.0], [469.0, 3851.6666666666665], [471.0, 2936.5], [470.0, 2932.5], [475.0, 216.2], [479.0, 2909.5], [478.0, 2946.0], [476.0, 2949.75], [467.0, 2930.5], [474.0, 2944.0], [473.0, 2948.0], [472.0, 2918.5], [482.0, 2944.5], [493.0, 382.6666666666667], [487.0, 1440.6], [486.0, 5653.0], [489.0, 395.5], [490.0, 2997.75], [491.0, 5573.0], [485.0, 328.6521739130435], [488.0, 2063.0], [495.0, 5586.0], [484.0, 1305.4], [483.0, 1118.8333333333333], [492.0, 417.5], [481.0, 2036.0], [480.0, 5637.0], [504.0, 3033.0], [506.0, 2147.0], [500.0, 3884.0], [507.0, 2989.5], [503.0, 2997.5], [502.0, 3004.5], [501.0, 3039.0], [508.0, 5521.0], [498.0, 5622.0], [496.0, 5579.0], [505.0, 5602.0], [604.0, 784.0], [607.0, 781.0], [594.0, 808.0], [596.0, 867.0], [595.0, 844.0], [606.0, 781.0], [605.0, 780.0], [603.0, 787.0], [602.0, 788.0], [601.0, 835.0], [600.0, 861.0], [598.0, 876.0], [597.0, 875.0], [615.0, 827.0], [627.0, 772.5], [630.0, 768.5], [629.0, 746.0], [628.0, 759.5], [626.0, 769.0], [625.0, 774.0], [624.0, 770.0], [614.0, 808.0], [613.0, 778.0], [612.0, 778.5], [610.0, 779.0], [609.0, 778.0], [608.0, 781.0], [623.0, 789.0], [622.0, 781.0], [620.0, 776.0], [619.0, 790.0], [618.0, 793.0], [617.0, 790.0], [616.0, 792.0], [916.0, 4534.0], [927.0, 4415.0], [926.0, 4385.0], [919.0, 5170.0], [918.0, 5165.0], [917.0, 5155.0], [915.0, 5165.0], [914.0, 5157.0], [913.0, 5170.0], [912.0, 4834.638613861387], [957.0, 4382.0], [959.0, 4380.5], [944.0, 4397.0], [956.0, 4363.5], [954.0, 4380.0], [953.0, 4363.0], [952.0, 4387.5], [932.0, 4409.142857142857], [930.0, 4400.5], [928.0, 4421.0], [951.0, 4365.0], [950.0, 4367.0], [948.0, 4366.5], [945.0, 4441.0], [984.0, 4349.0], [990.0, 4357.8], [991.0, 5091.0], [977.0, 4344.0], [979.0, 4342.0], [978.0, 4351.0], [988.0, 4353.0], [987.0, 4349.0], [985.0, 4350.0], [969.0, 4388.4], [967.0, 4377.0], [966.0, 4387.0], [965.0, 4374.0], [964.0, 4373.0], [963.0, 4372.0], [962.0, 4371.0], [961.0, 4380.666666666667], [960.0, 4405.0], [968.0, 4377.0], [983.0, 4348.0], [982.0, 4346.0], [981.0, 4344.0], [980.0, 4344.0], [1021.0, 5038.5], [1022.0, 4447.0], [1008.0, 5074.0], [1010.0, 4436.0], [1009.0, 4449.0], [1019.0, 5070.0], [1018.0, 5046.0], [1017.0, 5045.0], [1016.0, 5052.0], [1006.0, 4350.571428571428], [995.0, 5081.5], [993.0, 5107.0], [1004.0, 4336.5], [1002.0, 4350.0], [1015.0, 4431.0], [1014.0, 4438.0], [1013.0, 5053.0], [1012.0, 4753.0], [1078.0, 4380.0], [1064.0, 5033.0], [1080.0, 4970.0], [1056.0, 5014.0], [1062.0, 5009.0], [1060.0, 4388.0], [1076.0, 4350.5], [1074.0, 5028.0], [1072.0, 4986.0], [1036.0, 4406.0], [1034.0, 4437.0], [1032.0, 5032.0], [1030.0, 5060.0], [1028.0, 5033.0], [1024.0, 5041.5], [1054.0, 5015.0], [1050.0, 4287.5], [1048.0, 4278.0], [1046.0, 4282.0], [1040.0, 4319.0], [1070.0, 4982.0], [1068.0, 5009.0], [1066.0, 5046.0], [1128.0, 4306.0], [1144.0, 4293.0], [1146.0, 4312.666666666667], [1122.0, 4330.5], [1120.0, 4285.0], [1126.0, 4395.0], [1124.0, 4390.0], [1142.0, 4297.5], [1140.0, 4297.5], [1136.0, 4311.0], [1102.0, 4287.0], [1100.0, 4317.0], [1118.0, 4302.666666666667], [1116.0, 4340.0], [1114.0, 4324.0], [1110.0, 4228.0], [1108.0, 4397.0], [1106.0, 4220.0], [1134.0, 4323.666666666667], [1132.0, 4294.5], [1130.0, 4308.0], [1298.0, 1381.0], [1444.0, 4548.0], [1470.0, 4520.0], [1464.0, 4550.0], [1462.0, 4545.0], [1458.0, 4397.0], [1438.0, 4378.0], [1418.0, 4075.0], [1422.0, 4055.0], [1420.0, 4072.0], [1436.0, 4500.0], [1430.0, 4050.0], [1426.0, 4045.0], [1424.0, 4062.0], [1454.0, 4482.0], [1448.0, 4528.0], [1446.0, 4537.0], [1442.0, 4490.0], [1440.0, 4485.2], [1510.0, 4487.0], [1532.0, 4374.0], [1528.0, 4505.0], [1524.0, 4435.5], [1520.0, 4502.5], [1500.0, 4392.0], [1476.0, 4507.5], [1472.0, 4466.0], [1484.0, 4499.0], [1478.0, 4499.0], [1492.0, 4409.0], [1490.0, 4434.5], [1488.0, 4488.0], [1518.0, 4499.0], [1514.0, 4488.0], [1512.0, 4494.5], [1508.0, 4472.5], [1504.0, 4429.5], [1588.0, 4486.0], [1598.0, 4529.0], [1586.0, 4479.0], [1550.0, 4517.0], [1548.0, 4516.0], [1546.0, 4530.0], [1544.0, 4523.5], [1540.0, 4385.0], [1538.0, 4536.0], [1536.0, 4532.0], [1582.0, 4473.5], [1576.0, 4455.0], [1574.0, 4446.0], [1570.0, 4403.0], [1564.0, 4484.5], [1562.0, 4528.0], [1560.0, 4537.0], [1556.0, 4534.0], [1554.0, 4512.0], [1552.0, 4456.5], [1614.0, 4393.0], [1652.0, 4381.0], [1658.0, 4395.0], [1648.0, 4381.0], [1642.0, 4375.5], [1638.0, 4461.0], [1630.0, 4450.0], [1624.0, 4441.0], [1620.0, 4389.0], [1612.0, 4388.0], [1610.0, 4387.333333333333], [1606.0, 4380.0], [1602.0, 4535.0], [1600.0, 4522.0], [1724.0, 4593.0], [1726.0, 4551.0], [1698.0, 4561.666666666667], [1702.0, 4551.333333333333], [1700.0, 4551.0], [1706.0, 4571.333333333333], [1704.0, 4583.0], [1722.0, 4555.5], [1720.0, 4574.0], [1718.0, 4573.0], [1716.0, 4543.0], [1714.0, 4543.0], [1668.0, 4448.0], [1664.0, 4434.0], [1694.0, 4540.75], [1692.0, 4539.75], [1690.0, 4534.5], [1686.0, 4474.0], [1684.0, 4507.0], [1682.0, 4444.0], [1680.0, 4493.0], [1710.0, 4546.0], [1708.0, 4581.0], [1778.0, 4331.0], [1764.0, 3994.0], [1782.0, 4503.0], [1790.0, 4408.0], [1762.0, 3991.0], [1760.0, 3983.0], [1780.0, 4309.0], [1776.0, 4405.0], [1740.0, 4604.5], [1738.0, 4581.25], [1736.0, 4584.0], [1732.0, 4568.5], [1730.0, 4568.5], [1728.0, 4552.0], [1756.0, 3998.0], [1754.0, 3998.0], [1752.0, 4632.0], [1750.0, 4596.0], [1748.0, 4614.0], [1746.0, 4594.0], [1744.0, 4602.666666666667], [1774.0, 4430.0], [1772.0, 4439.0], [1770.0, 4448.0], [1852.0, 4471.0], [1854.0, 4473.0], [1846.0, 4553.0], [1842.0, 4454.0], [1832.0, 4468.5], [1830.0, 4465.5], [1828.0, 4454.0], [1820.0, 4443.0], [1796.0, 4311.0], [1794.0, 4314.0], [1802.0, 4325.0], [1798.0, 4319.0], [1806.0, 4406.0], [1804.0, 4404.0], [1818.0, 4445.0], [1816.0, 4431.0], [1814.0, 4437.0], [1812.0, 4438.0], [1810.0, 4425.0], [1892.0, 4398.5], [1908.0, 4409.0], [1870.0, 4387.333333333333], [1866.0, 4499.5], [1864.0, 4493.0], [1862.0, 4492.0], [1856.0, 4474.0], [1902.0, 4403.0], [1900.0, 4410.0], [1894.0, 4408.0], [1880.0, 4340.0], [1876.0, 4338.0], [1874.0, 4329.0], [1872.0, 4346.0], [1972.0, 4555.0], [1980.0, 3953.0], [1982.0, 4000.0], [1952.0, 4529.0], [1956.0, 4532.666666666667], [1954.0, 4543.0], [1962.0, 4528.0], [1960.0, 4533.5], [1978.0, 3955.0], [1976.0, 4570.142857142857], [1974.0, 4570.333333333333], [1968.0, 4567.5], [1934.0, 4498.0], [1932.0, 4504.0], [1930.0, 4474.0], [1928.0, 4497.333333333333], [1922.0, 4511.0], [1950.0, 4509.5], [1948.0, 4501.666666666667], [1946.0, 4510.25], [1940.0, 4522.5], [1938.0, 4520.5], [1936.0, 4501.5], [1966.0, 4556.0], [1964.0, 4534.0], [2044.0, 4530.0], [2040.0, 4262.5], [2016.0, 3935.0], [2018.0, 3982.0], [2024.0, 4240.0], [2022.0, 4540.0], [2026.0, 3970.0], [2038.0, 4250.0], [2036.0, 4246.5], [2034.0, 4243.0], [1984.0, 3986.0], [1996.0, 4284.0], [1998.0, 4285.0], [2010.0, 4300.666666666667], [2006.0, 4299.0], [2004.0, 4275.0], [2000.0, 4269.0], [2432.0, 1563.4], [2908.0, 1639.75], [3060.0, 4078.0], [3020.0, 4138.0], [3068.0, 4056.0], [3008.0, 4155.0], [3012.0, 4151.0], [3016.0, 4143.0], [3024.0, 3942.3333333333335], [3028.0, 4129.0], [3032.0, 4121.0], [3036.0, 4106.0], [3064.0, 4076.0], [3056.0, 4078.0], [3052.0, 4076.0], [3048.0, 4100.0], [3044.0, 4108.0], [3040.0, 4109.0], [3004.0, 4158.0], [3000.0, 4186.0], [2996.0, 4165.0], [2992.0, 4172.0], [2984.0, 4196.0], [3196.0, 1710.3333333333333], [3108.0, 3985.0], [3072.0, 4044.6666666666665], [3076.0, 4032.0], [3092.0, 4015.0], [3084.0, 4018.0], [3324.0, 3014.0], [3320.0, 3362.5], [3288.0, 2133.25], [3284.0, 3696.0], [3280.0, 3359.0], [3292.0, 3116.0], [3316.0, 3079.0], [3312.0, 3086.0], [3308.0, 3050.0], [3304.0, 3091.5], [3300.0, 3677.0], [3296.0, 3106.0], [3260.0, 3729.5], [3256.0, 3446.5], [3432.0, 3139.0], [3404.0, 3177.0], [3408.0, 3275.0], [3412.0, 3149.5], [3416.0, 3155.0], [3420.0, 3148.0], [3444.0, 3087.0], [3392.0, 3184.0], [3440.0, 3105.0], [3436.0, 3114.0], [3424.0, 3150.0], [3356.0, 3195.0], [3348.0, 3224.0], [3344.0, 3394.5], [3336.0, 3220.0], [3332.0, 3122.5], [3328.0, 3229.0], [3388.0, 3182.0], [3384.0, 3188.0], [3380.0, 3197.0], [3376.0, 3192.0], [3368.0, 3186.0], [3364.0, 3319.6666666666665], [3360.0, 3197.0], [3580.0, 2872.0], [3592.0, 3013.0], [3628.0, 2719.0], [3596.0, 2877.0], [3604.0, 2806.0], [3608.0, 2788.0], [3620.0, 2760.0], [3616.0, 2794.0], [3612.0, 2811.0], [3828.0, 1803.0], [3816.0, 2062.0], [3812.0, 2342.0], [3820.0, 2330.0], [3768.0, 1997.0], [3780.0, 2570.7399999999993], [3784.0, 2399.0], [3788.0, 2664.0], [3792.0, 2380.0], [3800.0, 2650.0], [3804.0, 1854.0], [3832.0, 1794.0], [3824.0, 1810.0], [3856.0, 1758.0], [3868.0, 1737.0], [3924.0, 2150.0], [3920.0, 2180.5], [3916.0, 2186.0], [3908.0, 2182.75], [3864.0, 1745.0], [3860.0, 1753.5], [3852.0, 1764.0], [3848.0, 1766.0], [3844.0, 1773.5], [3840.0, 1783.0], [3900.0, 2195.0], [3896.0, 2200.0], [3892.0, 2203.0], [3888.0, 2214.0], [3884.0, 2223.0], [3880.0, 2227.0], [3872.0, 2243.0], [4092.0, 1535.8], [4044.0, 1374.0], [4036.0, 1382.0], [4136.0, 1204.0], [4120.0, 1998.0], [4112.0, 1246.0], [4104.0, 1770.5], [4128.0, 1857.5], [4144.0, 1958.0], [4248.0, 2509.0], [4344.0, 2271.0], [4336.0, 2377.0], [4328.0, 2392.0], [4312.0, 2470.0], [4152.0, 1901.0], [4368.0, 2299.0], [4472.0, 2259.0], [4313.0, 2312.0], [4337.0, 2405.0], [4345.0, 2328.0], [4241.0, 2452.0], [4249.0, 2636.0], [4329.0, 2286.0], [4153.0, 1891.0], [4145.0, 1692.0], [4137.0, 1715.0], [4129.0, 1982.0], [4121.0, 1233.0], [4113.0, 2010.0], [4105.0, 1773.0], [4097.0, 1787.6666666666667], [4473.0, 2256.0], [4465.0, 2311.0], [4353.0, 2255.0], [4361.0, 2324.5], [2281.0, 1506.0], [2405.0, 1551.0], [2425.0, 1567.0], [2433.0, 1560.0], [2481.0, 1570.0], [2477.0, 1567.4999999999998], [2521.0, 1580.4], [2905.0, 1628.0], [3065.0, 4066.0], [3021.0, 4137.0], [3069.0, 4055.0], [3009.0, 4150.0], [3013.0, 4152.0], [3017.0, 4132.0], [3025.0, 4124.0], [3029.0, 4122.0], [3033.0, 4124.0], [3037.0, 4102.0], [3061.0, 4073.0], [3057.0, 4069.0], [3053.0, 4084.0], [3041.0, 4110.0], [2973.0, 4206.0], [2969.0, 4245.365405405403], [3005.0, 4166.0], [3001.0, 4155.0], [2997.0, 4175.0], [2989.0, 4177.5], [2985.0, 4197.0], [2981.0, 3886.0], [2977.0, 4212.0], [3093.0, 4024.0], [3197.0, 1718.0], [3109.0, 3979.0], [3089.0, 4024.0], [3085.0, 4028.0], [3081.0, 4030.5], [3073.0, 4052.0], [3265.0, 3412.25], [3325.0, 3264.0], [3289.0, 1723.0], [3293.0, 3689.0], [3277.0, 3720.0], [3281.0, 3112.0], [3285.0, 3108.0], [3317.0, 3002.0], [3313.0, 3663.0], [3305.0, 3088.0], [3301.0, 3093.0], [3261.0, 3076.0], [3257.0, 3742.0], [3345.0, 3228.0], [3425.0, 3150.0], [3401.0, 3163.5], [3337.0, 2455.5], [3329.0, 3008.0], [3341.0, 3216.0], [3349.0, 3217.0], [3353.0, 3391.5], [3389.0, 3181.0], [3385.0, 3189.0], [3373.0, 3190.5], [3369.0, 3181.0], [3365.0, 3193.0], [3361.0, 3187.0], [3445.0, 3070.0], [3393.0, 3175.0], [3397.0, 3175.0], [3409.0, 3544.0], [3405.0, 3147.0], [3417.0, 3151.0], [3441.0, 3103.0], [3437.0, 3105.0], [3433.0, 3134.0], [3573.0, 2992.6406249999986], [3585.0, 2861.0], [3629.0, 2716.0], [3593.0, 2831.0], [3589.0, 2867.0], [3597.0, 2814.0], [3609.0, 2797.0], [3625.0, 2777.0], [3621.0, 2732.0], [3617.0, 2794.0], [3613.0, 2796.0], [3785.0, 2672.0], [3781.0, 2410.0], [3789.0, 2384.0], [3793.0, 2381.0], [3797.0, 2372.3333333333335], [3801.0, 2650.0], [3805.0, 1853.0], [3837.0, 1791.0], [3829.0, 1798.0], [3825.0, 1810.0], [3821.0, 1820.0], [3817.0, 2339.0], [3813.0, 1829.0], [3809.0, 2344.0], [3861.0, 1753.0], [3921.0, 2161.0], [3925.0, 2150.0], [3865.0, 1748.0], [3857.0, 1754.0], [3853.0, 1760.0], [3849.0, 1767.0], [3845.0, 1772.0], [3841.0, 1784.0], [3901.0, 2181.0], [3897.0, 2195.0], [3893.0, 1698.0], [3873.0, 2236.0], [4093.0, 2062.5], [4029.0, 2552.349514563107], [4045.0, 1884.0], [4041.0, 1381.2], [4130.0, 1728.0], [4122.0, 2027.5], [4106.0, 2024.0], [4098.0, 1262.0], [4138.0, 1968.0], [4146.0, 1694.0], [4234.0, 2636.532467532465], [4242.0, 2458.0], [4250.0, 2625.0], [4346.0, 2251.0], [4322.0, 2295.6666666666665], [4306.0, 2396.56862745098], [4154.0, 1888.0], [4474.0, 2259.0], [4362.0, 2325.0], [4354.0, 2241.0], [4466.0, 2276.0], [4458.0, 2280.6666666666665], [4450.0, 2375.6463414634136], [4347.0, 2221.0], [4235.0, 2462.0], [4243.0, 2554.0], [4251.0, 2458.0], [4339.0, 2330.5], [4323.0, 2299.0], [4315.0, 2316.0], [4307.0, 2377.0], [4155.0, 1883.0], [4147.0, 1173.0], [4139.0, 1198.0], [4131.0, 1980.0], [4123.0, 1992.0], [4115.0, 1497.0], [4107.0, 1764.0], [4099.0, 1777.0], [4355.0, 2223.0], [4363.0, 2315.0], [4459.0, 2243.0], [4451.0, 2352.0], [1077.0, 4974.0], [1063.0, 5033.0], [1079.0, 4974.0], [1057.0, 5061.0], [1073.0, 4357.0], [1037.0, 5049.0], [1035.0, 4399.0], [1033.0, 5026.0], [1031.0, 4417.0], [1029.0, 5032.0], [1027.0, 4423.5], [1025.0, 5034.0], [1053.0, 4711.5], [1051.0, 4301.75], [1047.0, 4683.0], [1043.0, 4289.0], [1071.0, 4361.0], [1069.0, 4397.0], [1065.0, 5028.0], [1061.0, 4387.0], [1059.0, 4717.0], [1147.0, 4314.0], [1149.0, 4330.4], [1121.0, 4383.0], [1143.0, 4321.0], [1141.0, 4318.0], [1139.0, 4301.0], [1137.0, 4292.0], [1115.0, 4312.0], [1103.0, 4288.0], [1101.0, 4250.5], [1113.0, 4295.333333333333], [1111.0, 4324.0], [1109.0, 4291.0], [1107.0, 4226.0], [1133.0, 4321.5], [1127.0, 4324.0], [1125.0, 4333.0], [1123.0, 4276.0], [1465.0, 4408.0], [1471.0, 4473.0], [1443.0, 4036.0], [1441.0, 4380.0], [1449.0, 4399.0], [1447.0, 4471.0], [1469.0, 4471.0], [1467.0, 4403.0], [1463.0, 4406.0], [1461.0, 4531.0], [1459.0, 4384.0], [1457.0, 4469.0], [1437.0, 4400.0], [1413.0, 4273.015151515155], [1419.0, 4069.0], [1417.0, 4095.0], [1423.0, 4055.0], [1421.0, 4071.0], [1433.0, 4037.0], [1431.0, 4047.0], [1429.0, 4045.0], [1427.0, 4043.0], [1453.0, 4461.0], [1451.0, 4398.0], [1523.0, 4366.0], [1533.0, 4457.5], [1535.0, 4451.5], [1513.0, 4498.0], [1507.0, 4456.0], [1531.0, 4383.0], [1529.0, 4472.666666666667], [1527.0, 4367.0], [1521.0, 4456.666666666667], [1487.0, 4460.0], [1483.0, 4493.0], [1481.0, 4498.333333333333], [1479.0, 4503.0], [1475.0, 4463.0], [1473.0, 4461.5], [1503.0, 4389.0], [1499.0, 4377.0], [1497.0, 4377.0], [1495.0, 4369.0], [1493.0, 4368.0], [1491.0, 4366.0], [1517.0, 4495.0], [1515.0, 4495.0], [1595.0, 4520.5], [1597.0, 4532.0], [1593.0, 4499.0], [1591.0, 4489.666666666667], [1581.0, 4474.0], [1579.0, 4456.0], [1577.0, 4457.0], [1569.0, 4530.0], [1567.0, 4511.0], [1537.0, 4518.0], [1541.0, 4537.0], [1539.0, 4539.0], [1545.0, 4531.0], [1543.0, 4523.0], [1549.0, 4405.0], [1547.0, 4403.0], [1563.0, 4513.0], [1559.0, 4529.0], [1557.0, 4522.5], [1555.0, 4398.0], [1659.0, 4454.0], [1661.0, 4435.0], [1657.0, 4384.0], [1655.0, 4530.0], [1653.0, 4383.666666666667], [1615.0, 4388.0], [1605.0, 4383.0], [1603.0, 4538.0], [1631.0, 4455.0], [1625.0, 4444.0], [1623.0, 4394.0], [1621.0, 4392.0], [1619.0, 4391.0], [1617.0, 4391.5], [1639.0, 4464.0], [1637.0, 4461.0], [1635.0, 4465.0], [1633.0, 4453.0], [1713.0, 4568.25], [1721.0, 4531.0], [1727.0, 4587.0], [1697.0, 4535.0], [1705.0, 4547.0], [1699.0, 4547.5], [1725.0, 4564.0], [1723.0, 4590.0], [1719.0, 4530.0], [1717.0, 4562.333333333333], [1715.0, 4570.0], [1695.0, 4566.0], [1667.0, 4433.5], [1673.0, 4497.5], [1671.0, 4516.0], [1679.0, 4482.0], [1677.0, 4568.0], [1693.0, 4516.0], [1691.0, 4543.0], [1689.0, 4510.5], [1685.0, 4507.0], [1683.0, 4471.666666666667], [1681.0, 4475.0], [1711.0, 4525.0], [1707.0, 4555.5], [1767.0, 3987.5], [1787.0, 4348.0], [1785.0, 4411.0], [1779.0, 4334.0], [1743.0, 4558.0], [1741.0, 4607.0], [1739.0, 4558.0], [1735.0, 4564.666666666667], [1733.0, 4555.0], [1731.0, 4588.5], [1759.0, 3993.0], [1757.0, 4624.0], [1753.0, 4620.0], [1751.0, 4603.0], [1749.0, 4617.0], [1747.0, 4586.0], [1745.0, 4598.666666666667], [1775.0, 4419.0], [1771.0, 4441.0], [1769.0, 3979.5], [1765.0, 3988.0], [1763.0, 3991.0], [1841.0, 4476.0], [1851.0, 4459.4], [1855.0, 4473.0], [1825.0, 4457.0], [1829.0, 4461.0], [1827.0, 4470.0], [1849.0, 4496.0], [1845.0, 4478.0], [1843.0, 4450.0], [1823.0, 4450.0], [1799.0, 4318.0], [1793.0, 4389.0], [1805.0, 4405.0], [1803.0, 4355.0], [1821.0, 4445.0], [1819.0, 4443.0], [1817.0, 4442.666666666667], [1815.0, 4433.0], [1813.0, 4439.0], [1811.0, 4434.0], [1809.0, 4427.0], [1839.0, 4456.0], [1837.0, 4452.0], [1835.0, 4455.5], [1833.0, 4449.0], [1887.0, 4400.0], [1909.0, 4588.0], [1915.0, 4460.0], [1905.0, 4408.0], [1871.0, 4345.0], [1869.0, 4505.0], [1863.0, 4501.0], [1861.0, 4491.0], [1859.0, 4488.0], [1901.0, 4405.0], [1889.0, 4397.0], [1885.0, 4385.0], [1883.0, 4379.0], [1881.0, 4362.5], [1877.0, 4330.0], [1875.0, 4336.5], [1981.0, 3952.0], [1983.0, 3949.0], [1953.0, 4510.666666666667], [1957.0, 4503.0], [1955.0, 4553.333333333333], [1961.0, 4506.0], [1959.0, 4519.25], [1979.0, 3954.0], [1977.0, 3942.0], [1973.0, 4587.0], [1971.0, 4552.5], [1969.0, 4565.5], [1933.0, 4524.0], [1929.0, 4474.0], [1949.0, 4520.0], [1947.0, 4503.5], [1945.0, 4517.0], [1943.0, 4507.5], [1941.0, 4479.0], [1967.0, 4527.0], [1963.0, 4510.0], [2033.0, 4247.5], [2017.0, 4540.0], [2021.0, 4233.0], [2019.0, 3925.0], [2025.0, 4542.0], [2043.0, 4268.6], [2041.0, 4267.0], [2039.0, 4257.5], [2035.0, 4246.0], [2015.0, 4301.666666666667], [1985.0, 3996.0], [1997.0, 4273.0], [1999.0, 4271.0], [2013.0, 4301.0], [2011.0, 4287.0], [2009.0, 4308.0], [2007.0, 4287.0], [2005.0, 4283.333333333333], [2003.0, 4306.0], [2001.0, 4273.0], [2422.0, 1551.5], [2482.0, 1576.7142857142856], [2498.0, 1586.0], [2522.0, 1589.8333333333333], [2734.0, 1612.0], [3014.0, 4141.0], [3010.0, 4147.0], [3018.0, 4131.0], [3026.0, 4121.0], [3030.0, 4119.0], [3038.0, 4121.0], [3066.0, 4077.0], [3058.0, 4080.0], [3054.0, 4077.0], [3050.0, 4078.5], [2974.0, 4210.0], [2970.0, 4222.0], [3002.0, 4166.0], [2998.0, 4174.0], [2994.0, 3886.5], [2990.0, 4187.0], [2986.0, 3565.0], [2982.0, 4197.0], [3194.0, 1708.0], [3094.0, 4016.0], [3198.0, 1717.4], [3074.0, 4052.0], [3078.0, 4035.0], [3090.0, 4023.0], [3086.0, 4037.0], [3322.0, 3017.5], [3286.0, 3693.0], [3282.0, 3109.0], [3278.0, 3318.285714285714], [3290.0, 3102.5], [3294.0, 3111.0], [3318.0, 3080.0], [3314.0, 3086.0], [3310.0, 3278.0], [3306.0, 3052.0], [3302.0, 3148.0], [3298.0, 3684.0], [3258.0, 3127.0], [3254.0, 3599.7448275862066], [3438.0, 3109.0], [3442.0, 3101.0], [3394.0, 1924.1176470588236], [3406.0, 1918.0], [3402.0, 3170.0], [3398.0, 3179.0], [3410.0, 3172.0], [3418.0, 3154.0], [3422.0, 3145.5], [3434.0, 3127.1666666666665], [3426.0, 3143.0], [3354.0, 3209.0], [3342.0, 3230.0], [3338.0, 3230.0], [3334.0, 3118.5], [3330.0, 3242.0], [3390.0, 3185.0], [3382.0, 3186.5], [3378.0, 3187.0], [3370.0, 3179.0], [3366.0, 3196.0], [3578.0, 2851.0], [3594.0, 2832.0], [3598.0, 2812.0], [3630.0, 2705.0], [3586.0, 2870.0], [3590.0, 2862.6666666666665], [3602.0, 3039.6666666666665], [3606.0, 2793.0], [3610.0, 2864.0], [3626.0, 2727.0], [3622.0, 2783.0], [3618.0, 2784.0], [3614.0, 2787.0], [3838.0, 1789.0], [3814.0, 1829.0], [3818.0, 2344.0], [3822.0, 1812.0], [3810.0, 2179.0], [3762.0, 2004.0], [3782.0, 2399.0], [3786.0, 2386.0], [3790.0, 2387.0], [3798.0, 2375.0], [3794.0, 2657.0], [3802.0, 2366.0], [3806.0, 1844.0], [3834.0, 1798.5], [3826.0, 1807.0], [3866.0, 1741.0], [3918.0, 2185.0], [3926.0, 2407.0], [3922.0, 2155.0], [3870.0, 1738.0], [3862.0, 2273.0], [3858.0, 1755.0], [3854.0, 1763.0], [3850.0, 1769.0], [3846.0, 1771.0], [3842.0, 1773.0], [3898.0, 2190.0], [3894.0, 2198.0], [3890.0, 1956.0], [3886.0, 1965.5], [3882.0, 2223.0], [3878.0, 2060.0], [3874.0, 1729.0], [4042.0, 1895.0], [4030.0, 1407.0], [4094.0, 1805.0], [4308.0, 2289.0], [4332.0, 2289.6666666666665], [4148.0, 2002.5], [4116.0, 1236.0], [4108.0, 1246.0], [4100.0, 1772.0], [4124.0, 1990.0], [4132.0, 1715.0], [4236.0, 2463.0], [4244.0, 2612.0], [4252.0, 2454.0], [4340.0, 2364.0], [4324.0, 2286.0], [4516.0, 2224.393939393939], [4364.0, 2313.0], [4356.0, 2242.0], [4468.0, 2230.5], [4460.0, 2334.0], [4349.0, 2326.5], [4237.0, 2460.0], [4245.0, 2640.0], [4253.0, 2514.0], [4341.0, 2360.0], [4309.0, 2326.0], [4157.0, 1878.0], [4149.0, 1688.0], [4133.0, 1723.0], [4125.0, 1722.0], [4357.0, 2318.0], [4365.0, 2306.0], [4469.0, 2271.0], [4461.0, 2339.0], [4453.0, 2255.5], [2415.0, 1558.0], [2427.0, 1565.75], [2515.0, 1588.0], [3055.0, 4069.0], [3063.0, 3771.0], [3011.0, 4158.0], [3015.0, 4139.0], [3019.0, 4145.0], [3027.0, 4119.0], [3035.0, 4109.5], [3039.0, 4098.0], [3067.0, 4061.0], [3059.0, 4065.0], [3051.0, 4078.0], [2975.0, 4201.0], [2971.0, 3589.0], [3007.0, 3846.5], [3003.0, 4167.0], [2999.0, 4160.0], [2995.0, 4183.0], [2991.0, 4174.0], [2987.0, 4190.0], [2983.0, 4188.0], [2979.0, 4197.5], [3087.0, 4034.0], [3147.0, 1701.0], [3107.0, 3906.8333333333335], [3095.0, 4013.0], [3091.0, 4025.0], [3083.0, 4037.0], [3079.0, 4044.0], [3075.0, 4032.0], [3275.0, 3479.0], [3287.0, 2713.5], [3291.0, 3105.0], [3295.0, 3104.0], [3327.0, 3447.5], [3279.0, 3369.0], [3283.0, 3104.0], [3323.0, 3029.0], [3315.0, 3050.0], [3311.0, 3082.0], [3307.0, 3666.0], [3299.0, 3095.0], [3339.0, 2986.0], [3439.0, 3104.0], [3335.0, 2990.0], [3347.0, 3206.5], [3351.0, 3190.5], [3359.0, 3208.3333333333335], [3355.0, 3201.0], [3391.0, 3175.0], [3387.0, 3190.0], [3383.0, 3196.0], [3379.0, 3187.0], [3375.0, 3193.0], [3371.0, 3188.0], [3367.0, 3207.0], [3395.0, 3178.0], [3399.0, 3185.0], [3403.0, 3165.0], [3415.0, 3148.3333333333335], [3423.0, 3147.0], [3419.0, 3146.0], [3443.0, 3091.0], [3435.0, 3114.0], [3583.0, 2858.0], [3579.0, 2860.6], [3587.0, 2858.5], [3627.0, 2718.0], [3595.0, 2814.0], [3607.0, 2868.0], [3599.0, 2809.0], [3611.0, 2862.0], [3623.0, 2777.0], [3619.0, 2775.0], [3615.0, 2805.0], [3787.0, 2396.0], [3831.0, 1803.5], [3839.0, 1788.0], [3783.0, 2388.0], [3791.0, 2376.0], [3799.0, 2375.0], [3803.0, 2645.0], [3807.0, 2350.0], [3835.0, 1793.0], [3827.0, 1805.0], [3823.0, 1812.0], [3819.0, 2332.0], [3811.0, 2344.0], [3867.0, 1739.0], [3923.0, 2152.0], [3907.0, 2179.5], [3871.0, 1738.0], [3855.0, 1760.0], [3851.0, 1767.0], [3847.0, 1773.0], [3899.0, 2190.0], [3895.0, 2198.0], [3891.0, 2204.0], [3887.0, 2211.0], [3883.0, 2221.0], [3879.0, 2229.0], [3875.0, 1727.0], [4087.0, 1876.906976744186], [4031.0, 2158.0], [4035.0, 1382.5], [4043.0, 1378.0], [4142.0, 1621.3333333333333], [4342.0, 2365.0], [4118.0, 2002.0], [4110.0, 1885.0], [4102.0, 1901.0], [4126.0, 1732.0], [4350.0, 2213.0], [4246.0, 2452.0], [4334.0, 2293.5], [4326.0, 2286.5], [4318.0, 2346.6666666666665], [4310.0, 2288.0], [4150.0, 1165.0], [4470.0, 2272.0], [4454.0, 2258.0], [4335.0, 2420.0], [4311.0, 2328.0], [4351.0, 2290.0], [4239.0, 2467.0], [4247.0, 2505.0], [4343.0, 2231.0], [4327.0, 2315.0], [4319.0, 2299.0], [4151.0, 1658.0], [4143.0, 1699.0], [4135.0, 1724.0], [4119.0, 2000.0], [4111.0, 1759.0], [4471.0, 2258.0], [4359.0, 2267.0], [4367.0, 2304.0], [4463.0, 2311.0], [4455.0, 2255.0], [1.0, 7630.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2305.268399999997, 3709.945800000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4516.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6828.75, "minX": 1.69977804E12, "maxY": 706315.6666666666, "series": [{"data": [[1.69977804E12, 706315.6666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69977804E12, 6828.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977804E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3709.945800000004, "minX": 1.69977804E12, "maxY": 3709.945800000004, "series": [{"data": [[1.69977804E12, 3709.945800000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977804E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1982.1908000000055, "minX": 1.69977804E12, "maxY": 1982.1908000000055, "series": [{"data": [[1.69977804E12, 1982.1908000000055]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977804E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2643.683799999998, "minX": 1.69977804E12, "maxY": 2643.683799999998, "series": [{"data": [[1.69977804E12, 2643.683799999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977804E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 66.0, "minX": 1.69977804E12, "maxY": 7630.0, "series": [{"data": [[1.69977804E12, 7630.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69977804E12, 5693.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69977804E12, 6104.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69977804E12, 5864.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69977804E12, 66.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69977804E12, 3091.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977804E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 256.5, "minX": 3.0, "maxY": 7587.0, "series": [{"data": [[514.0, 5631.5], [131.0, 5762.0], [550.0, 3685.5], [2260.0, 4250.0], [291.0, 2202.0], [3.0, 7587.0], [424.0, 2313.5], [111.0, 1563.0], [468.0, 2550.5], [248.0, 256.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2260.0, 4356.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2260.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 7587.0, "series": [{"data": [[514.0, 5618.5], [131.0, 5743.0], [550.0, 3684.5], [2260.0, 4219.0], [291.0, 2193.0], [3.0, 7587.0], [424.0, 2312.5], [111.0, 1563.0], [468.0, 2545.5], [248.0, 255.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2260.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2260.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.69977804E12, "maxY": 83.33333333333333, "series": [{"data": [[1.69977804E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977804E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 32.75, "minX": 1.69977804E12, "maxY": 50.583333333333336, "series": [{"data": [[1.69977804E12, 50.583333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69977804E12, 32.75]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69977804E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 32.75, "minX": 1.69977804E12, "maxY": 50.583333333333336, "series": [{"data": [[1.69977804E12, 50.583333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69977804E12, 32.75]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977804E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 32.75, "minX": 1.69977804E12, "maxY": 50.583333333333336, "series": [{"data": [[1.69977804E12, 50.583333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69977804E12, 32.75]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69977804E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

